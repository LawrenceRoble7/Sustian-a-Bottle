/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.03.2024 10:48:01

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 18787, -21419, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00027516757836565375, 0.00023306714138016105, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 19,-32,-41,124,2,-10,-32,21,84,-50,-17,-32,-24,31,-5,36,48,-32,-23,-48,85,70,45,-56,-47,-47,15,127,-14,-26,53,35, 
  /* [1][0][][] */ 37,48,48,-53,-69,49,-3,7,-29,-5,20,65,73,26,25,-6,-27,1,-39,-59,-54,18,21,72,57,47,-40,-29,69,-69,-127,-12, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0064559807069599628, 0.0054682204499840736, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 113, -120, -101, 579, 1302, -67, -503, 228, 474, -514, -381, -68, -69, -7, -179, 659, 133, -1013, -341, -277, 177, 278, -164, -40, -88, -255, 426, 2639, -188, -67, 2170, -221, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3204505345784128e-05, 4.5749533455818892e-05, 5.1583905587904155e-05, 8.6830877989996225e-05, 6.8573062890209258e-05, 6.1768965679220855e-05, 4.4648972107097507e-05, 4.0452803659718484e-05, 5.0360733439447358e-05, 5.4937030654400587e-05, 4.1301704186480492e-05, 4.8068319301819429e-05, 4.3819793063448742e-05, 4.7728284698678181e-05, 4.697115218732506e-05, 6.6214983235113323e-05, 5.7962839491665363e-05, 4.7576981160091236e-05, 4.2363222746644169e-05, 4.1643161239335313e-05, 6.8659734097309411e-05, 3.9890979678602889e-05, 4.1809897084021941e-05, 4.1502429667161778e-05, 5.575247632805258e-05, 5.750989294028841e-05, 4.6454999392153695e-05, 8.4331717516761273e-05, 5.2191848226357251e-05, 5.9109588619321585e-05, 8.8331282313447446e-05, 5.0062022637575865e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -36,-47,111,12,97,-11,-94,-89,42,-103,-98,1,58,15,-32,55,-54,-64,-60,-57,-70,-102,14,109,-127,7,87,-44,113,5,-15,-84,79,-63,-90,63,-105,-83,-82,30,74,-89,-88,103,50,-110,108,-15,-66,-65,-25,96,-67,-65,-91,107,30,71,124,-102,-73,84,-67,50,-3,16,77,89,58,100,85,-111,101,-109,48,81,-100,4,-54,32,59,18,101,-14,-56,-86,-82,97,32,111,-7,-107,12,73,32,1, 
  /* [1][0][][] */ -44,27,-60,0,-35,85,24,17,54,-98,-99,105,69,-20,32,60,114,-70,32,111,-48,3,40,33,4,12,-24,106,16,12,98,-66,54,101,-3,24,52,50,-10,-48,-78,-15,-13,-87,-29,22,-19,-54,-85,-95,109,45,15,56,-76,-39,19,102,58,79,-56,115,-93,-74,-50,39,78,35,104,36,16,11,-101,79,-43,36,81,-48,-36,70,-71,76,-42,-127,28,53,-65,-67,72,67,91,32,79,91,23,-29, 
  /* [2][0][][] */ 48,28,-44,80,-17,-40,63,86,-98,70,-31,101,82,-7,77,-95,-37,-52,26,45,-83,-5,99,24,-40,62,100,13,-52,73,70,74,-60,-14,-72,-92,-70,72,90,-10,-114,-83,19,-1,-67,87,-11,-66,26,18,76,-83,-34,33,16,22,-63,86,-52,5,-15,55,-55,58,80,44,45,68,-73,65,8,-59,33,-69,30,15,-40,-25,8,10,35,-82,-3,-51,3,-127,-16,-31,73,86,-16,13,-37,-64,-42,-77, 
  /* [3][0][][] */ 35,8,19,-9,-34,42,-33,9,44,2,48,-1,43,59,30,15,64,69,-16,14,68,-52,-22,-59,43,-53,-49,56,18,-56,40,29,-16,-12,-12,-5,-46,34,18,7,15,-11,-50,5,48,29,-42,5,50,-23,25,92,47,39,67,-56,-32,-64,-48,-20,-33,14,22,39,28,-16,-35,-1,-19,-50,21,52,3,22,37,-5,23,88,51,-17,-39,-38,6,68,33,99,-3,-48,-31,37,7,-58,38,-32,-32,127, 
  /* [4][0][][] */ 29,80,-5,37,-11,-18,41,4,65,68,5,0,15,-5,-11,-26,-34,16,-23,38,82,-54,55,9,68,25,21,-22,-26,21,-55,-23,68,80,16,-51,36,84,-54,9,-15,-17,-27,-52,30,77,12,64,40,-16,7,123,-57,64,-46,8,55,-69,20,6,36,-51,51,-37,-29,38,-1,-10,14,-86,-46,-35,-32,127,67,93,54,75,0,-27,14,-30,-46,88,7,112,59,44,-16,35,36,18,20,68,-5,64, 
  /* [5][0][][] */ 70,-66,59,59,28,-77,10,45,58,-84,-1,-44,19,71,29,24,46,16,-52,67,19,39,16,-15,-93,-48,-3,-61,36,25,13,-74,-29,1,-46,10,-78,-30,35,21,-77,-50,33,70,-23,8,28,-38,-127,62,18,14,30,-5,22,-12,69,38,-37,-27,21,-44,3,-50,-19,72,-14,16,54,5,70,-48,-31,48,-17,-56,9,-40,10,58,76,26,24,63,-56,15,-5,23,46,-75,83,67,-14,21,48,-75, 
  /* [6][0][][] */ 3,-45,100,63,-90,-72,-13,56,-17,-87,-4,-93,74,47,100,-119,7,-8,-6,91,-82,-120,100,49,-63,-86,-17,-62,-35,-116,34,-87,-92,-127,-51,-110,-12,32,-111,65,76,47,15,-21,-116,92,-87,-49,-81,9,-34,-62,49,-54,80,-35,3,-18,-64,99,-102,-8,60,-77,-58,51,87,-54,63,-16,-106,-13,48,-71,-93,-48,-86,-100,-60,-30,24,-48,38,-30,-72,-82,-45,-96,75,84,86,8,-62,-69,66,-33, 
  /* [7][0][][] */ 101,80,-34,-44,-74,102,-25,13,115,-10,-87,18,52,-97,46,84,36,-4,3,119,63,22,0,85,-71,106,44,57,-84,116,-17,30,22,13,66,107,-101,96,4,-46,100,-82,94,77,48,0,90,-110,-6,-63,-102,-73,-19,83,23,20,127,-99,17,-51,13,-10,77,-116,-69,-71,81,16,-117,14,67,101,82,28,72,66,-63,45,-98,46,104,-41,-14,-77,93,30,-113,104,97,14,88,69,-63,-43,15,-71, 
  /* [8][0][][] */ 8,35,-50,-82,43,21,-48,-23,31,52,36,52,-6,-22,-81,-56,-69,127,-14,19,28,-14,63,75,-44,105,24,63,-60,13,-89,112,81,-20,40,7,95,20,-11,47,90,125,-108,-104,-7,-4,-34,109,83,-53,-58,14,-64,32,-10,-100,70,84,-94,88,98,26,95,92,-36,-46,-17,102,-76,28,40,-5,65,78,12,30,-41,101,68,63,23,68,-85,-69,24,122,56,-35,40,-12,-52,69,-72,-84,-54,90, 
  /* [9][0][][] */ 48,4,81,28,58,-40,-42,-104,50,49,-31,25,-10,-60,-71,-14,45,38,-77,-57,-2,91,-64,-78,85,-12,9,36,-10,-40,-69,88,39,29,27,-28,-87,4,-45,11,30,-66,46,-65,73,16,-52,20,127,-14,-92,-42,48,-58,-60,93,60,-31,-18,-11,-77,85,73,-68,-74,38,72,46,-28,93,92,-87,20,58,-91,-85,-66,-84,-23,84,13,10,87,4,-37,-60,27,-11,64,10,-11,86,83,-4,13,-28, 
  /* [10][0][][] */ -47,73,100,-73,-26,127,89,34,12,30,15,-77,107,91,-28,4,-30,40,-107,-76,-24,44,56,-75,-5,49,-112,-117,-49,88,-101,-90,82,107,127,71,-50,-5,-37,46,-61,89,-114,-42,-98,-82,10,-72,-67,-15,31,-4,61,-12,-73,-32,-120,-14,22,-49,-10,83,78,36,117,-76,-100,-31,26,-18,-101,-76,92,56,-86,97,-20,61,70,20,79,-7,65,88,-103,6,102,-41,32,-6,-4,-69,-57,-43,-58,-98, 
  /* [11][0][][] */ 108,9,-4,96,103,49,38,40,76,82,-68,102,1,-64,30,-58,-42,-127,55,33,19,77,35,-96,-112,-88,-3,70,77,3,27,-22,-86,-62,52,38,-57,61,-17,-42,-30,79,-54,8,-35,-62,-71,-74,9,80,97,43,-76,-103,17,31,-59,-44,-21,-82,-73,81,54,10,29,81,-45,23,83,61,-69,-67,44,83,-81,36,-47,17,-38,86,-90,-26,-53,-46,51,-109,15,-33,-83,-16,17,-82,-79,-21,-81,-57, 
  /* [12][0][][] */ 20,64,-45,4,87,14,-45,44,-94,56,-13,20,-37,18,56,-79,-88,-65,-49,-79,25,-3,25,102,-90,-52,113,-91,97,22,-31,108,-87,-67,-39,14,2,-79,-12,53,94,20,-100,-34,-18,-93,-30,115,-110,-127,-72,94,42,-19,-82,91,-25,-50,54,67,58,117,-34,55,115,38,-38,110,62,108,42,73,87,105,-11,-13,-29,29,-108,-89,-51,98,54,-2,-32,-21,53,110,-92,-115,95,51,99,-9,26,52, 
  /* [13][0][][] */ 91,-54,99,87,83,96,64,66,51,-104,16,-23,80,65,61,-42,-112,-94,-65,23,62,-29,111,-43,-69,30,9,17,-78,-78,75,26,34,86,-19,29,-71,-28,28,60,-68,61,-44,14,-39,19,-12,-28,-29,83,-28,-102,-84,10,90,-76,-48,25,-16,-63,-22,106,-93,13,-47,-61,-78,70,-33,-14,87,2,-86,31,-64,-39,-90,53,78,-59,52,-90,89,12,-76,-127,84,107,-6,-48,-70,52,100,-44,64,-20, 
  /* [14][0][][] */ -62,-92,85,63,74,-29,-28,-97,-88,-43,63,82,-23,-80,-74,-83,-47,-77,5,24,-43,28,0,66,-117,-76,-17,32,-103,-104,-74,26,97,-27,-29,4,96,103,31,-86,-30,-111,40,87,62,-118,56,-84,85,21,75,44,92,-37,-20,13,-48,13,46,90,-13,-71,-40,62,-80,-11,76,-111,-82,-81,-84,86,1,70,45,-74,59,-95,53,33,45,-28,-104,-45,-114,-127,-105,91,98,0,70,-42,73,95,-11,38, 
  /* [15][0][][] */ -25,-9,-20,47,59,-106,52,-51,60,-8,-30,2,57,3,-73,-63,2,49,-25,25,41,-5,47,56,112,59,6,51,6,32,38,-81,9,-10,-48,3,-27,108,95,-78,38,112,-49,-16,7,-40,-43,-16,35,-25,8,22,-61,-20,-24,-21,51,17,-19,68,-30,-52,56,74,-22,42,-42,5,-48,-21,59,-35,7,32,49,-52,-8,39,71,56,-49,32,-72,-31,-77,77,-56,37,75,75,-68,-38,27,71,-59,127, 
  /* [16][0][][] */ -67,7,70,-48,30,69,-30,24,57,34,-76,46,-19,-41,-49,-41,61,88,56,48,86,47,-34,29,5,45,-66,42,-81,3,26,12,-76,51,35,46,-26,48,-37,-68,39,-10,46,64,42,90,60,-4,10,-67,5,92,-34,108,52,22,29,57,52,11,88,73,56,46,36,1,-32,72,26,60,-23,-7,15,77,45,74,-10,75,-82,-11,7,-59,37,27,7,127,77,13,62,21,-14,74,50,-28,-56,43, 
  /* [17][0][][] */ 16,-122,17,58,-59,-111,-84,-95,13,-96,55,36,76,33,-112,29,16,23,74,83,-107,-25,-12,-56,-2,41,-82,8,82,-59,-47,50,-47,-42,14,-10,-53,69,-92,-33,-111,-60,-21,-24,-15,-10,65,-117,59,72,-30,12,-33,46,71,-83,-127,66,-97,-119,12,-95,43,69,-97,-83,25,-113,-110,-10,75,9,0,-127,-78,40,82,-56,20,-72,-6,-36,-80,-102,-121,39,52,-46,-2,50,-110,-114,-22,76,-7,-12, 
  /* [18][0][][] */ -102,97,103,-77,-17,-117,-114,-7,-9,66,-117,-55,-45,29,52,-64,17,-37,67,-33,94,-52,12,-87,127,-105,-26,106,21,27,-8,37,39,-35,-117,-114,-40,34,-45,54,-47,-6,-59,-16,-120,11,21,2,36,-29,61,25,-118,-16,-3,80,-49,25,-26,-123,78,103,14,27,-78,-127,-41,83,61,-83,-74,99,-105,-38,-95,-111,50,52,-9,-81,-64,-12,-40,-75,98,-37,65,63,-115,-79,-69,99,82,-60,36,-24, 
  /* [19][0][][] */ 18,34,73,35,55,-76,97,88,111,-67,28,-17,-102,35,-62,61,74,-103,109,54,-23,80,-59,9,88,-84,25,-70,-98,-123,-71,55,79,-85,29,-4,5,-75,-61,-106,55,-119,-89,8,-89,37,74,-94,-16,36,-44,50,-40,23,5,-15,31,96,-6,-27,55,-60,107,59,-77,-3,-33,-2,-12,49,77,-55,-67,-127,-60,-83,-22,-118,14,108,56,-117,-36,82,-88,17,7,-5,89,31,-4,61,-36,120,69,-50, 
  /* [20][0][][] */ -5,50,42,59,-54,55,20,34,30,9,-48,-7,-4,61,25,-39,-38,2,-39,-16,19,-25,-42,-47,73,-41,-68,30,14,7,-27,78,65,30,-8,36,24,-14,-9,-71,-31,-5,-55,-62,-16,-25,-47,72,109,-63,-63,33,30,85,34,-1,65,44,64,60,75,-36,-22,-20,-18,-41,-31,15,-53,-54,-30,50,-39,-48,22,19,72,52,70,74,54,5,51,-7,43,127,-2,53,17,68,22,38,13,18,-4,20, 
  /* [21][0][][] */ 99,81,84,-104,114,-88,83,26,-19,-62,-68,54,11,42,-48,-95,-117,-29,35,-9,114,-55,81,-83,56,-86,-26,83,23,11,5,-29,10,26,-92,-124,126,106,-118,-31,-1,21,35,-10,-100,-92,-85,99,-36,-76,0,88,48,73,-93,34,-62,64,-47,127,63,-72,5,-3,96,38,-32,-81,-109,-2,60,93,38,-22,82,76,-116,-30,70,109,21,104,43,-64,21,-109,72,-87,-107,87,115,-113,-51,-77,81,-36, 
  /* [22][0][][] */ 38,-51,-70,-95,90,-43,102,66,-113,73,-73,-108,120,-117,-115,-87,55,78,-115,-69,91,-80,42,34,85,-15,-108,111,-58,-73,-57,-106,40,65,20,10,7,-34,-59,-114,0,-17,17,100,58,-125,99,-34,-99,-92,11,-14,-60,-116,-57,36,-19,-24,-11,-28,115,-76,-96,-119,-62,27,-121,-52,125,127,-26,3,-68,-12,64,-93,49,-67,73,95,114,-103,-63,-119,78,51,112,-37,-62,27,-70,68,19,21,-29,68, 
  /* [23][0][][] */ 79,-102,13,63,102,-101,-5,-95,31,-83,91,83,27,-104,31,-44,110,-69,-106,103,92,-75,115,-28,-47,-18,103,28,80,58,81,-37,-44,51,27,33,102,-14,-112,23,-119,-19,20,-109,-67,-103,127,25,13,-123,-89,-58,89,-91,-51,101,-84,-11,103,53,-117,-87,-86,-9,40,47,-112,-117,72,-4,116,-72,-1,-44,-35,-109,51,-30,101,120,-51,-54,31,-126,99,-58,117,-31,-97,31,114,3,111,-45,-36,60, 
  /* [24][0][][] */ -49,-44,-79,-54,-67,-71,-61,-73,34,92,59,19,92,50,-24,-91,-58,23,28,-40,66,-61,-35,-34,20,-23,68,52,87,50,11,-51,-15,14,43,21,-42,-74,50,-6,-77,-100,86,6,17,-36,38,59,-92,-47,-7,-5,57,31,53,-53,-16,67,12,4,71,-4,9,77,-68,83,-31,-76,-71,46,-50,-18,-29,23,75,66,47,-58,-76,-65,-60,-77,-39,-127,-4,17,-16,-82,14,-95,8,-61,-22,21,-75,8, 
  /* [25][0][][] */ -61,-45,-58,-10,66,-45,-87,38,12,-91,-35,15,53,-2,-84,-19,-49,24,16,-89,43,63,-12,-40,-9,-46,-77,29,57,-71,27,84,65,-84,31,49,66,-52,-35,-15,-79,62,-73,0,74,22,53,19,-127,68,-60,-9,31,-37,-54,8,-23,38,-85,55,85,29,20,30,-3,54,-17,-8,-71,-2,-26,-92,23,-96,54,9,54,43,10,11,37,36,-38,55,-54,-70,-82,-77,-21,-41,74,19,-89,-12,-19,-76, 
  /* [26][0][][] */ 49,-90,-24,-14,-98,11,8,-10,-68,-111,108,61,-85,-26,-1,0,101,37,-65,-65,30,73,88,-5,88,73,-2,43,10,5,-91,21,-25,-54,-98,-84,-65,94,-41,88,-47,114,51,26,-64,90,-50,108,8,52,-5,110,6,1,14,-116,110,49,48,34,9,-106,117,-21,98,-29,-51,72,-83,63,93,87,69,-74,-68,27,47,-94,-82,23,-25,88,81,-55,92,58,-37,21,-58,127,27,3,-44,109,50,113, 
  /* [27][0][][] */ -13,77,-29,-37,-28,-51,26,-9,90,58,67,-74,-20,44,33,44,-4,60,65,2,-10,-12,-2,-4,40,60,-85,1,31,-3,-15,17,78,45,-43,-21,-30,44,-50,-7,12,88,19,55,80,63,6,72,95,93,58,26,-24,38,42,-28,86,-22,0,-20,48,-32,70,54,30,-32,-43,84,15,-16,-28,45,26,36,32,45,57,-8,62,68,74,10,54,39,-38,88,-6,127,35,62,-10,-30,37,5,102,125, 
  /* [28][0][][] */ 76,-28,71,33,-101,-69,-88,-62,-61,-89,47,59,-64,-68,6,82,76,86,-69,53,-38,24,-84,-60,-127,64,-68,-52,-60,-70,-4,-19,-86,13,68,47,-6,-92,-35,26,58,11,-78,32,-107,-13,15,34,-5,-56,-74,-48,-74,13,29,35,22,-10,58,40,-32,-38,-98,-1,37,58,-21,63,-66,17,-81,-32,58,16,-4,-94,-110,-62,-74,36,-63,-88,87,-69,52,-118,58,-94,-102,-98,-33,-51,-45,36,-124,-85, 
  /* [29][0][][] */ 37,39,37,-41,-66,2,-83,2,86,-7,-65,-75,74,-74,-36,-33,-75,85,25,-48,-54,-23,35,0,-7,7,-36,-24,-76,-8,70,-3,38,0,-60,-42,-14,78,-10,65,44,75,-36,57,0,82,-46,-14,51,-4,37,-64,48,-61,83,31,-58,37,-44,77,-85,66,-52,-40,-49,-49,37,66,65,-71,29,-54,77,59,43,20,84,-40,-24,24,-6,-59,-7,-55,46,127,28,61,-26,73,52,54,-73,17,-6,56, 
  /* [30][0][][] */ 20,35,-26,25,-32,15,23,6,127,6,38,-39,-53,29,24,64,-13,68,87,-25,50,-50,-16,-2,39,47,-36,67,-3,-36,-34,28,-20,-14,-54,-4,16,40,22,-7,107,31,-2,91,70,44,43,61,21,81,33,23,65,38,41,43,7,-30,-11,10,15,-4,64,10,-41,-38,-18,80,-31,39,50,4,-38,86,69,26,11,-19,9,5,33,31,-30,41,-24,104,-6,105,50,16,64,19,-2,14,33,48, 
  /* [31][0][][] */ 75,-84,26,80,36,57,-54,-94,-26,-20,-67,-86,80,-106,-45,92,-59,-85,36,34,57,23,-37,79,36,-97,21,28,-69,-68,43,96,11,20,-82,-16,74,-27,-60,-105,79,-61,-42,23,3,-48,-36,19,79,22,77,-23,-104,-41,-71,16,-103,52,-7,95,-37,-7,74,-64,56,94,-47,-73,61,-116,-106,14,-91,-35,-1,3,-59,-57,39,68,-71,-37,43,65,45,127,-81,12,13,-47,-81,-54,3,80,10,-21, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018361913971602917, 0.0019443550845608115, 0.0021923158783465624, 0.0036903123836964369, 0.0029143551364541054, 0.0026251808740198612, 0.0018975812708958983, 0.0017192441737279296, 0.002140331082046032, 0.0023348238319158554, 0.001755322446115315, 0.0020429035648703575, 0.0018623411888256669, 0.0020284519996494055, 0.0019962738733738661, 0.002814136678352952, 0.002463420620188117, 0.0020220216829329729, 0.001800436875782907, 0.0017698343144729733, 0.0029180385172367096, 0.0016953665763139725, 0.0017769205151125789, 0.0017638532444834709, 0.0023694802075624466, 0.0024441704154014587, 0.0019743375014513731, 0.0035840980708599091, 0.0022181535605341196, 0.002512157429009676, 0.0037540795747190714, 0.0021276359912008047, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1100, 14, 4133, 5124, 4669, -2013, 4498, -1206, -2279, -684, 7606, -2469, 4437, 5465, 1673, 2694, -676, 13, -1527, 5637, 2220, -1135, 1926, -704, -573, 3705, 1160, 2471, 5913, 2305, 4453, 1367, 1794, 4157, 5708, 2801, -547, 3345, 2414, -4780, 119, 1502, -129, 1234, -1110, 713, -1566, 1154, -5357, 1847, 1310, -3039, 7902, -227, 2018, 1700, 985, 2601, -726, -2530, 233, 1659, 780, 4051, 5629, 2691, 3044, 5168, 3828, -729, 3194, 4807, 3880, -1243, 4860, 6363, 975, -4143, 642, 1300, 11363, 1758, -723, -1717, 1270, 2028, 1652, -1328, 4800, -355, 3704, 1354, 33, -3035, -149, 1658, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00017182416922878474, 0.0002498924732208252, 0.0001342351024504751, 0.00014696494326926768, 0.00013219636457506567, 0.00019935281306970865, 0.00013088922423776239, 0.00021702225785702467, 0.00015986863581929356, 0.00018711507436819375, 9.2041635070927441e-05, 0.00017875584308058023, 0.00012087343202438205, 0.00012052163947373629, 0.00018615140288602561, 0.0001620676921447739, 0.00023868335119914263, 0.00017974180809687823, 0.00017960841068997979, 0.00010805117926793173, 0.00020406059047672898, 0.00018987174553330988, 0.00018394882499706, 0.00015258231724146754, 0.00029435963369905949, 0.0001762049796525389, 0.00023765077639836818, 0.00015826901653781533, 0.00011977052054135129, 0.00017792628204915673, 0.00011368533887434751, 0.00018453823577146977, 0.00016092554142232984, 0.00014845073746982962, 0.00010024712537415326, 0.0001658348337514326, 0.00019401048484724015, 0.00016243942081928253, 0.00014800491044297814, 0.00011699425522238016, 0.00024063233286142349, 0.00021131850371602923, 0.00016752161900512874, 0.00024173180281650275, 0.0001786543580237776, 0.00014128976908978075, 0.00016129211871884763, 0.00016755421529524028, 0.00011494727368699387, 0.00015025203174445778, 0.00018300351803191006, 0.00015097117284312844, 9.4159782747738063e-05, 0.00019367551431059837, 0.00017318259051535279, 0.0001412360870745033, 0.00023306415823753923, 0.00013376328570302576, 0.00021579541498795152, 0.00012570252874866128, 0.00022333682863973081, 0.00014842429663985968, 0.0002545175957493484, 0.00016152937314473093, 0.00011797286424553022, 0.00017061371181625873, 0.00011948603787459433, 0.00015315506607294083, 0.00016688833420630544, 0.00019390269881114364, 0.00014791380090173334, 0.00014735492004547268, 0.00011136101966258138, 0.00018573910347186029, 0.00015192148566711694, 0.00012965152563992888, 0.0001354360138066113, 0.00015002454165369272, 0.00016729919298086315, 0.00016548199346289039, 7.6908465416636318e-05, 0.00016244476137217134, 0.00019347789930179715, 0.00019295292440801859, 0.00016883708303794265, 0.00016160393715836108, 0.00015655539755243808, 0.00021941284649074078, 0.00012802047422155738, 0.00016540095384698361, 0.00016297167167067528, 0.00015982393233571202, 0.00019356294069439173, 0.00014598193229176104, 0.0002465599391143769, 0.0002419830416329205, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -13,110,-96,29,69,-35,94,74,-66,-4,30,-93,86,127,-93,13, 
  /* [1][0][][] */ -15,7,-57,-16,2,50,26,-127,40,-52,-31,-58,-15,-55,-54,-5, 
  /* [2][0][][] */ -17,-21,34,79,27,45,-99,127,-17,-4,68,-55,-28,-72,-43,64, 
  /* [3][0][][] */ 76,-96,72,7,-6,-37,-38,127,-36,55,76,43,0,46,-10,21, 
  /* [4][0][][] */ -45,-29,-6,63,-84,3,-40,-111,-13,-5,44,-25,44,47,93,127, 
  /* [5][0][][] */ 127,40,-26,-20,-68,21,32,60,26,-22,44,86,92,14,-64,-6, 
  /* [6][0][][] */ 11,-45,-62,-50,-85,8,-11,-44,-63,-62,-26,27,99,62,127,-3, 
  /* [7][0][][] */ -51,35,-28,-76,11,-42,-67,12,-87,46,-74,-58,-127,-43,25,80, 
  /* [8][0][][] */ 57,53,69,11,64,37,77,16,62,-33,27,6,-127,-24,-78,-2, 
  /* [9][0][][] */ -35,62,30,-50,-33,-11,37,-19,-23,48,-44,16,47,127,29,21, 
  /* [10][0][][] */ 90,71,-68,63,-57,-12,64,-55,-91,-46,-49,-103,-127,-58,28,104, 
  /* [11][0][][] */ 37,-2,57,18,-11,-35,1,107,-90,29,-16,0,-4,-3,37,127, 
  /* [12][0][][] */ -59,-28,7,15,19,-19,125,51,-70,32,19,-22,-8,75,-76,127, 
  /* [13][0][][] */ -4,31,34,49,86,51,127,92,-30,84,-91,-64,28,63,-82,-36, 
  /* [14][0][][] */ -127,107,5,4,-7,-8,50,15,-49,24,127,-11,-85,11,-60,61, 
  /* [15][0][][] */ -7,-14,-127,-44,90,-32,-104,-31,-24,-24,-24,-69,-6,-74,-45,45, 
  /* [16][0][][] */ 122,-14,11,-8,27,-27,46,-12,-33,8,127,44,42,-2,-26,27, 
  /* [17][0][][] */ 1,22,-15,-94,-1,-37,124,-127,2,4,-50,40,42,92,32,39, 
  /* [18][0][][] */ 35,122,-25,-48,65,-61,-18,-61,-31,127,-37,-6,-28,65,3,-44, 
  /* [19][0][][] */ -70,-119,119,-75,33,-127,17,-26,35,43,90,88,33,-9,43,-16, 
  /* [20][0][][] */ -11,92,46,0,10,6,15,-29,63,-10,84,-15,-127,-32,-63,-21, 
  /* [21][0][][] */ -56,22,13,30,71,30,63,57,-127,54,-21,16,-8,20,-73,-3, 
  /* [22][0][][] */ 10,-93,42,15,14,-127,90,10,13,-49,-32,-76,34,-64,-60,-46, 
  /* [23][0][][] */ -55,-82,54,53,16,-18,12,-44,15,-25,70,3,2,59,82,127, 
  /* [24][0][][] */ -6,-5,26,72,44,16,-49,-127,53,16,-36,14,5,5,-20,-25, 
  /* [25][0][][] */ -5,37,23,-67,-30,6,14,-48,-15,47,-55,-3,31,127,46,-4, 
  /* [26][0][][] */ -68,72,6,27,24,-86,-9,-27,11,23,18,62,16,3,-92,127, 
  /* [27][0][][] */ -19,-127,-56,3,-65,119,1,-72,32,-54,56,-30,26,-69,-113,-33, 
  /* [28][0][][] */ -39,-3,38,91,26,1,-47,-127,-123,49,115,-17,75,6,-57,-21, 
  /* [29][0][][] */ -127,95,-18,-20,-33,10,-119,-63,-48,-25,9,-9,16,-49,-116,70, 
  /* [30][0][][] */ 45,66,-45,92,-101,-106,-78,-5,-49,2,20,-113,127,26,-25,112, 
  /* [31][0][][] */ 127,48,-67,-37,-58,32,118,31,-42,-15,49,52,31,16,-14,-11, 
  /* [32][0][][] */ -25,-12,127,-9,-18,79,82,8,-10,-12,-17,22,-3,77,73,28, 
  /* [33][0][][] */ 1,29,-43,-65,-38,31,127,14,7,-22,17,-69,78,113,-43,34, 
  /* [34][0][][] */ -74,-30,90,15,29,-61,113,-17,-127,39,39,-62,62,65,-74,-32, 
  /* [35][0][][] */ -4,18,-56,25,-70,114,-56,-14,-23,127,7,83,-67,57,11,37, 
  /* [36][0][][] */ -8,-65,127,-52,-43,19,-27,-15,16,18,-50,73,1,-79,-31,35, 
  /* [37][0][][] */ 89,-9,78,-32,127,-84,-61,8,-61,117,-90,-2,-117,-36,109,-33, 
  /* [38][0][][] */ 33,26,17,-89,-12,-43,-99,56,-89,52,-79,-31,-51,-127,-108,70, 
  /* [39][0][][] */ -69,32,-64,-46,-67,-77,56,4,-127,-35,19,96,31,8,2,40, 
  /* [40][0][][] */ 127,39,-3,-72,-73,8,16,-32,-32,-19,-46,-54,23,54,44,35, 
  /* [41][0][][] */ 93,-76,-61,-41,-12,-8,-72,-6,60,-16,0,-68,127,-66,57,-35, 
  /* [42][0][][] */ -10,-87,-42,127,-1,-104,-119,16,8,11,6,53,-80,70,-52,1, 
  /* [43][0][][] */ -79,-26,-39,-127,-40,18,-16,67,52,-127,-50,47,-23,-59,-4,80, 
  /* [44][0][][] */ -28,58,32,-66,-20,-4,34,99,127,-79,60,112,95,33,13,-10, 
  /* [45][0][][] */ 37,78,-65,76,127,-64,-40,-57,103,-68,59,-55,-27,10,-66,47, 
  /* [46][0][][] */ -28,-40,10,-5,96,-22,24,24,-9,127,-29,-117,30,57,-51,72, 
  /* [47][0][][] */ 91,-33,-42,-10,89,-14,-47,-66,8,127,-43,28,-21,-111,-72,-5, 
  /* [48][0][][] */ -16,17,-10,-71,2,-29,127,-91,-4,8,-26,41,48,49,12,39, 
  /* [49][0][][] */ -35,105,-81,46,46,-58,75,57,-29,45,38,-81,-40,93,127,-116, 
  /* [50][0][][] */ 8,43,-24,3,-127,4,-76,-58,58,72,31,39,-47,-41,0,36, 
  /* [51][0][][] */ 127,-49,-47,-7,-48,94,-102,-40,41,-22,-37,72,-23,-66,0,43, 
  /* [52][0][][] */ -34,-57,17,84,-44,-112,-127,2,-58,-64,-16,-54,18,-58,-7,98, 
  /* [53][0][][] */ 9,74,62,-127,-10,96,110,-12,-10,-22,-5,-31,70,-99,3,38, 
  /* [54][0][][] */ 36,119,2,-29,4,-75,-96,42,14,-30,-49,127,65,85,32,52, 
  /* [55][0][][] */ -55,-20,48,43,48,-50,98,102,-101,-6,33,8,127,53,-30,13, 
  /* [56][0][][] */ 127,28,7,22,-42,91,-46,-73,-19,33,-85,-4,-56,95,-2,21, 
  /* [57][0][][] */ -46,-32,-53,-31,-62,-114,62,-25,-127,-21,64,49,24,31,-28,50, 
  /* [58][0][][] */ 43,-67,61,23,-1,-74,-9,7,29,-16,-127,-23,23,-33,-50,51, 
  /* [59][0][][] */ 75,16,-127,81,16,41,83,-27,-61,-48,23,-89,-106,-56,28,95, 
  /* [60][0][][] */ 5,45,-8,9,-7,-16,-17,2,-25,-86,51,122,-49,-127,-39,-20, 
  /* [61][0][][] */ -37,6,69,-70,-63,30,-8,119,-26,-84,64,54,87,-10,-13,127, 
  /* [62][0][][] */ 72,43,-9,-127,-28,-4,9,-38,-6,31,-30,39,16,-20,-86,-79, 
  /* [63][0][][] */ 1,-21,-10,-5,-64,-72,-59,9,-65,-10,-35,-11,127,1,52,-18, 
  /* [64][0][][] */ 23,-10,-11,74,-95,-45,-28,-71,49,115,48,-13,47,-49,-66,127, 
  /* [65][0][][] */ -33,-1,-17,-2,-76,52,17,-20,44,-100,99,-70,75,58,-127,66, 
  /* [66][0][][] */ -127,92,-92,-96,31,-52,-99,-81,-112,123,102,3,-119,-70,49,73, 
  /* [67][0][][] */ 1,-26,-127,-113,73,86,3,-20,-26,-9,48,-13,18,38,31,44, 
  /* [68][0][][] */ 42,8,-6,-31,-60,16,7,42,-71,67,127,-17,-5,-43,-114,21, 
  /* [69][0][][] */ 63,-104,48,-38,16,-112,-39,127,-11,70,87,74,-8,72,-51,6, 
  /* [70][0][][] */ 60,2,127,52,122,-24,123,32,40,28,-84,27,-93,64,-104,46, 
  /* [71][0][][] */ 12,31,96,-75,-127,-68,23,5,-20,-10,18,-90,-74,-3,22,27, 
  /* [72][0][][] */ -60,-93,24,-112,79,-17,5,50,-74,19,-115,-17,61,119,-73,127, 
  /* [73][0][][] */ 18,18,54,4,127,-91,-56,3,-36,98,-89,34,-100,-47,119,-20, 
  /* [74][0][][] */ -78,17,-125,-79,70,-19,-32,6,-55,-14,-127,-26,-44,-51,-16,43, 
  /* [75][0][][] */ 89,-16,48,-43,27,14,-127,-21,0,-94,59,7,-3,-22,-4,-19, 
  /* [76][0][][] */ 1,-45,-23,100,50,100,118,-61,88,-127,59,125,33,-84,-54,30, 
  /* [77][0][][] */ -20,-24,127,-33,49,-18,-3,-123,31,4,9,85,20,43,29,-20, 
  /* [78][0][][] */ -37,20,6,-51,9,-40,28,-20,30,-17,5,-89,-123,-81,-127,-68, 
  /* [79][0][][] */ -114,-74,-20,55,127,22,-15,39,16,34,0,48,-28,-55,-73,-2, 
  /* [80][0][][] */ 14,-100,40,127,-24,-5,-108,74,4,11,42,14,-99,-19,11,40, 
  /* [81][0][][] */ 107,60,-24,79,6,47,16,127,8,16,116,69,121,46,59,-18, 
  /* [82][0][][] */ -43,6,15,-26,24,-127,-94,-73,8,58,-40,-39,-32,71,-64,-22, 
  /* [83][0][][] */ 90,-13,79,-13,-47,-17,-127,17,6,-104,19,-55,-3,2,-11,-9, 
  /* [84][0][][] */ 16,-69,-95,24,127,39,44,32,-115,25,-103,-15,47,-32,-75,12, 
  /* [85][0][][] */ -41,79,96,-70,98,36,112,-106,127,-9,53,23,117,-73,20,0, 
  /* [86][0][][] */ 119,-36,127,34,10,-52,85,39,-60,-56,-106,-51,30,27,-71,3, 
  /* [87][0][][] */ -8,6,15,-66,73,-14,-51,32,31,-36,73,-17,-83,-127,0,19, 
  /* [88][0][][] */ -58,-30,34,-16,33,40,-67,-60,2,3,-86,-127,-55,-45,-11,-36, 
  /* [89][0][][] */ -69,12,13,-75,31,19,-127,20,80,21,-65,-3,-14,-74,-37,-22, 
  /* [90][0][][] */ -18,-12,-29,-65,127,14,-66,47,36,59,37,-22,38,29,-76,-15, 
  /* [91][0][][] */ -36,-54,15,29,-33,2,0,64,-49,-69,23,-38,-12,74,49,127, 
  /* [92][0][][] */ -31,77,4,-4,-27,57,-107,60,-45,-6,80,1,-37,127,48,32, 
  /* [93][0][][] */ 2,78,-50,-65,74,79,-80,5,73,50,53,47,-127,22,-45,55, 
  /* [94][0][][] */ 25,68,95,6,-127,-17,12,-10,17,-23,26,-9,-64,-18,26,-33, 
  /* [95][0][][] */ -7,22,45,-5,114,-11,-111,76,15,15,-68,127,3,50,107,-48, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0019521854119375348, 0.0028391608502715826, 0.0015251161530613899, 0.0016697465907782316, 0.0015019528800621629, 0.0022649529855698347, 0.0014871018938720226, 0.0024657049216330051, 0.0018163522472605109, 0.0021259135100990534, 0.0010457338066771626, 0.0020309397950768471, 0.0013733070809394121, 0.001369310193695128, 0.0021149646490812302, 0.0018413369543850422, 0.0027118080761283636, 0.0020421419758349657, 0.002040626248344779, 0.0012276266934350133, 0.0023184404708445072, 0.0021572334226220846, 0.0020899400115013123, 0.0017335684970021248, 0.0033443758729845285, 0.0020019582007080317, 0.0027000764384865761, 0.0017981781857088208, 0.0013607763685286045, 0.0020215148106217384, 0.0012916394043713808, 0.0020966366864740849, 0.0018283603712916374, 0.0016866273945197463, 0.0011389607097953558, 0.0018841373967006803, 0.0022042558994144201, 0.0018455602694302797, 0.0016815621638670564, 0.0013292337534949183, 0.0027339514344930649, 0.0024009014014154673, 0.0019033019198104739, 0.0027464430313557386, 0.0020297868177294731, 0.0016052678693085909, 0.0018325252458453178, 0.0019036722369492054, 0.0013059768825769424, 0.001707092858850956, 0.0020791999995708466, 0.0017152634682133794, 0.0010697991820052266, 0.002200450049713254, 0.0019676191732287407, 0.0016046579694375396, 0.0026479654479771852, 0.0015197555767372251, 0.0024517660494893789, 0.0014281730400398374, 0.0025374479591846466, 0.0016863270429894328, 0.0028917090967297554, 0.0018352208426222205, 0.0013403522316366434, 0.0019384326878935099, 0.0013575442135334015, 0.0017400758806616068, 0.0018961067544296384, 0.0022030312102288008, 0.0016805269988253713, 0.0016741772415116429, 0.0012652315199375153, 0.002110280329361558, 0.0017260604072362185, 0.0014730397379025817, 0.0015387603780254722, 0.0017045083222910762, 0.0019007747760042548, 0.0018801285186782479, 0.00087379780597984791, 0.0018456209218129516, 0.0021982048638164997, 0.0021922404412180185, 0.0019182475516572595, 0.0018360679969191551, 0.0017787087708711624, 0.0024928655475378036, 0.0014545085141435266, 0.0018792079063132405, 0.0018516075797379017, 0.00181584432721138, 0.0021991711109876633, 0.001658578054048121, 0.002801298163831234, 0.0027492975350469351, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 7151, 12698, -492, 4789, 640, 4477, -2976, 4459, 15978, -1249, -5058, 9170, -16172, 12829, 1424, 12451, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 6.1998718592803925e-05, 6.6403874370735139e-05, 5.9309979405952618e-05, 8.9329027105122805e-05, 7.13492336217314e-05, 0.000103204176411964, 7.0358262746594846e-05, 7.930021092761308e-05, 8.2525097241159528e-05, 8.9548891992308199e-05, 7.8497854701709002e-05, 5.4838597861817107e-05, 7.746008486719802e-05, 6.4654486777726561e-05, 9.9932185548823327e-05, 7.1925838710740209e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -83,30,31,-24,-54,-10,-54,-5,-51,5,-7,-8,51,42,21,-43,21,-1,86,8,-6,-63,127,66,85,21,21,25,-47,-102,-83,4,-52,-32,20,34,18,31,-7,21,-6,30,-71,2,-84,-20,-12,73,-22,20,-33,-6,2,13,25,-42,-103,6,-26,56,59,23,4,-5,-20,-55,-43,29,-46,-44,20,-14,7,-7,-70,-39,-53,17,-42,1,-38,38,82,-60,23,58,1,35,40,-1,13,-22,-50,-35,-35,10, 
  /* [1][0][][] */ 39,14,3,-61,-79,-13,16,31,-20,17,57,-56,24,-21,-86,-62,-12,-2,-67,22,-34,-87,19,51,35,-70,-13,-32,89,-98,127,-64,58,41,-38,60,34,86,-31,-51,18,57,-18,-18,-20,59,-124,-54,-36,-57,13,-27,63,-44,-42,67,7,-13,-46,-1,26,47,-15,-92,-10,-30,-73,-1,1,25,-56,-9,-42,-15,28,-78,4,12,30,-57,-8,-68,-80,-6,41,-26,-35,8,-67,7,-40,47,22,68,-50,57, 
  /* [2][0][][] */ 80,-54,48,26,1,-85,79,9,-5,-13,-22,-25,-87,-31,22,-24,-106,-53,-42,35,10,-28,-59,16,-19,-63,-7,-35,-33,38,-37,127,-68,105,-30,8,-28,-14,-21,-14,-115,110,66,10,-64,-1,-2,-9,36,-3,-35,-55,53,-19,-25,63,63,-15,66,6,0,33,-38,25,61,-4,8,-8,41,54,-39,-18,33,52,71,49,42,-93,70,70,84,0,-51,45,-72,25,18,70,5,8,-24,11,-35,50,-27,28, 
  /* [3][0][][] */ -7,4,-3,11,15,-10,-4,-79,-23,63,39,41,1,-11,-32,48,10,-41,31,5,19,127,36,-42,-42,21,-13,1,42,-34,55,-22,-20,16,-16,-24,4,25,38,3,-72,-82,-31,28,-4,31,29,-5,-12,-47,-25,-23,26,-83,-21,-51,15,63,-22,0,0,-11,-42,0,25,47,-27,9,-13,-14,-4,-66,-20,-42,23,-4,19,13,-24,-33,-37,18,-55,1,-20,-39,34,-10,-10,8,12,-19,52,10,-36,66, 
  /* [4][0][][] */ 37,2,-65,7,28,18,-40,1,-16,83,92,-16,-5,0,6,-44,12,-11,-33,36,13,-54,49,84,-53,-11,-127,-1,-44,-52,7,14,-67,-38,-1,65,10,41,13,20,-40,-38,33,-26,-21,9,-37,53,-44,58,22,17,50,-6,-75,21,48,-22,0,-18,48,10,23,16,-42,13,-49,5,-49,37,-48,62,35,-65,-39,-57,1,-65,-18,15,-33,79,-68,9,-19,34,29,-74,53,-1,44,9,-70,-12,37,31, 
  /* [5][0][][] */ -65,29,22,-15,42,-21,65,-13,-25,26,-2,-18,76,-13,-34,-54,0,-27,41,29,-114,-31,-66,27,20,-13,44,1,55,-70,-13,59,44,127,-10,44,14,41,33,-13,-27,127,59,-30,-21,52,31,2,-1,17,-1,27,31,-28,15,-71,30,-39,-55,-54,59,72,-51,-19,77,-36,-79,-66,-58,-9,-43,-8,-24,13,-23,-57,23,-38,-36,-22,125,-41,32,-69,-60,41,15,-15,-19,47,36,4,-20,23,7,70, 
  /* [6][0][][] */ 42,-21,-83,25,-44,-101,93,127,-48,54,6,58,-100,-58,54,49,-6,-52,-13,11,-28,-20,-62,-62,-11,15,51,9,35,40,85,-38,22,2,0,-78,14,52,16,70,18,82,-63,-22,26,-69,-62,32,30,-95,-8,56,38,27,-39,-51,71,52,15,12,-106,38,-86,23,6,-1,-16,40,30,56,0,-53,-51,33,84,31,58,-41,39,-45,3,-58,-60,71,-5,-44,39,8,-39,62,45,48,-16,26,-43,86, 
  /* [7][0][][] */ 26,74,-17,-41,-12,-8,7,-15,-43,33,-41,-47,-55,7,16,-1,-39,-55,-23,53,14,127,-6,24,-42,-4,9,37,26,43,74,-42,58,17,-5,-10,-18,-29,9,22,-58,-59,7,-48,41,-40,66,-15,31,-68,-82,-13,-55,-8,6,-5,12,-10,-73,11,-10,92,23,-29,-14,4,-37,22,-23,-31,-90,43,29,56,-38,30,-46,61,29,-73,-27,-17,41,-67,37,-22,-3,11,-18,46,-84,17,51,-33,-34,15, 
  /* [8][0][][] */ -2,68,-75,31,-31,-27,-68,35,-102,-29,10,8,-17,46,13,64,9,-44,4,1,19,-29,8,-14,7,71,11,19,-3,-11,-52,-18,-21,-30,-35,-50,-30,35,36,-6,0,16,25,9,-59,-35,-4,-15,-21,-10,62,65,27,-13,-79,107,-40,35,-21,-42,-31,5,20,46,-23,-74,-50,-15,-44,17,9,5,-21,-40,-116,-20,-53,15,-73,-40,-15,-32,-35,-29,17,12,13,19,24,83,-40,-4,-96,-127,25,-45, 
  /* [9][0][][] */ -13,23,-36,43,-29,-28,52,40,2,36,-24,77,-37,-24,32,127,6,10,58,6,31,29,26,-75,-70,-2,10,-6,-2,-21,42,39,-28,-14,-2,-109,15,-22,-15,-10,-20,-32,38,-25,7,5,17,13,30,69,11,-4,-59,-73,11,-9,-1,-11,67,-22,-59,53,-51,-14,60,0,-11,9,-58,19,27,27,-7,69,-14,-11,-22,22,-36,-10,30,1,52,-4,9,-24,-4,-20,-61,1,-1,-9,56,35,-41,-1, 
  /* [10][0][][] */ 54,7,-18,2,-38,-20,53,0,13,-14,-24,-22,-87,-20,13,-1,-72,-33,11,19,41,41,17,-2,-63,69,22,2,-53,-69,-20,-12,66,-46,43,-2,60,-87,68,127,4,-94,6,3,10,-83,-7,61,34,70,-70,-38,-22,6,20,45,24,-57,72,49,-19,48,-53,-24,-2,-54,19,47,14,-33,-17,30,111,34,25,-67,39,-40,59,-21,-47,44,32,14,-46,-20,15,51,-51,-17,14,44,50,60,-37,6, 
  /* [11][0][][] */ -62,-73,27,-72,27,-12,-29,-31,36,-51,5,-8,0,11,1,9,-59,-2,52,3,-65,-6,-67,-80,38,20,-58,42,44,-45,31,-20,15,-3,3,-17,-70,16,-122,-1,-67,103,-40,59,12,13,-18,-41,28,-32,-47,-49,41,24,46,-47,-34,-69,-8,-65,-18,-49,-21,-127,16,-75,47,70,108,14,77,-18,-37,-16,69,-44,86,14,27,49,48,-25,-8,85,90,13,-8,-18,-69,-44,-4,32,40,46,50,80, 
  /* [12][0][][] */ 42,-37,28,-31,19,106,-13,40,62,58,-8,40,3,30,25,13,-72,43,11,53,127,20,49,-61,16,9,-83,-60,-16,62,24,6,28,-20,8,-50,33,3,-40,-17,12,-27,31,35,4,25,14,13,-56,14,13,15,-25,-27,8,25,-20,51,39,59,9,-80,3,-70,-11,84,-3,-44,1,-38,56,18,-15,13,-4,46,2,30,-42,4,-25,48,101,33,-17,62,-16,-56,55,4,-86,35,75,17,-19,-96, 
  /* [13][0][][] */ -1,44,26,-39,-35,-2,-11,-42,36,-35,-38,-70,53,-126,-29,-64,-31,-37,-95,-12,-92,-20,19,114,-73,20,105,19,9,-40,77,40,2,-31,-127,90,-42,-46,30,-63,121,-26,4,22,32,-96,70,-25,83,-19,-61,37,8,-12,-6,74,62,-64,-29,-18,43,49,-6,-82,-29,54,-40,34,-72,-28,-89,8,-71,6,-28,-95,-108,20,36,100,-21,93,43,-94,38,23,38,-3,-35,-14,-20,-7,-60,39,-42,-8, 
  /* [14][0][][] */ -6,16,-94,-36,90,93,-74,10,18,-48,76,14,39,-16,-49,-68,-59,35,43,127,1,-54,-5,7,56,42,-12,66,26,-5,-30,23,57,20,-37,9,-6,63,57,0,59,59,26,5,-43,-50,52,-38,8,-4,13,-15,55,24,-36,31,-2,67,-101,-17,-11,-73,-36,-91,8,-47,-49,-3,-73,56,9,32,-18,-30,-23,-41,34,-20,-60,-28,42,-15,7,1,-7,57,-27,-29,-14,65,80,19,-11,-39,-33,-60, 
  /* [15][0][][] */ -76,-40,77,-52,8,-27,-57,-94,15,14,-14,53,-27,-33,54,109,-127,-29,10,-64,34,-1,-19,-73,1,-22,25,-55,-70,-118,-58,25,-35,36,84,-116,-20,-53,28,-3,-31,-66,32,-23,40,8,80,109,-38,-17,-1,-50,-63,42,20,-59,-86,-20,126,18,-43,29,-99,15,-70,1,11,19,46,-82,70,-27,74,-36,-26,-41,24,28,74,11,-35,114,50,22,-16,-31,-104,21,-31,-74,-111,30,63,-35,-41,57, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0026349455583840609, 0.0028221646789461374, 0.0025206741411238909, 0.0037964836228638887, 0.0030323422979563475, 0.0043861772865056992, 0.0029902260284870863, 0.0033702589571475983, 0.0035073165781795979, 0.0038058278150856495, 0.0033361588139086962, 0.0023306403309106827, 0.0032920534722507, 0.0027478155680000782, 0.0042471177875995636, 0.0030568479560315609, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { 2267, -716, -1888, -4965, -1953, 2417, -773, -271, -2078, -1655, 8889, -2362, -2503, 8930, 6710, -6437, 19899, 6307, -5419, 428, 791, -2597, 3020, -1129, 96, -5418, -2766, -3921, 1568, -6848, -532, -780, 14256, -1343, -3668, 502, 478, -2490, -98, 9698, -44, -1502, 2976, -5126, 11300, 11567, -672, 15084, -525, 7485, 13069, -3866, 161, 1887, 411, 10831, -1422, -645, 14109, 8087, 9173, 10869, 7845, -6600, -1530, -1651, -3192, 1460, -1951, -1047, 4091, 3541, 14973, -2003, -781, 7463, -127, 1479, 11129, -2218, -2495, 18344, -278, 1262, 14606, 632, -2779, -4027, 949, -2792, 8088, 21, -468, -252, -5545, -4513, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00044693803647533059, 0.0002029082243097946, 0.00011413054016884416, 0.00014317060413304716, 0.00037429275107569993, 0.00032085686689242721, 0.00042943056905642152, 0.00032630731584504247, 0.00020493211923167109, 0.00018148713570553809, 0.00010620899411151186, 0.00026187027106061578, 0.00023248700017575175, 0.00013135088374838233, 0.00015604429063387215, 0.00012836142559535801, 9.2798145487904549e-05, 0.00025400801678188145, 0.00013914702867623419, 0.00015038359561003745, 0.00020075128122698516, 0.0003667909768410027, 0.0001767035573720932, 0.00029635053942911327, 0.00045863518607802689, 0.00012657807383220643, 0.00031050597317516804, 0.00014632871898356825, 0.00015731033636257052, 0.00010105257388204336, 0.00045460424735210836, 0.00030981906456872821, 0.00014579019625671208, 0.000227002237807028, 0.00023234734544530511, 0.00044622732093557715, 0.00020180546562187374, 0.00019809159857686609, 0.00034791851066984236, 0.00010721221042331308, 0.0001861907949205488, 0.00025287305470556021, 0.0002360080397920683, 0.00010937122715404257, 0.00012138035526731983, 0.00011381595686543733, 0.00020252344256732613, 0.00010955253674183041, 0.00023957956000231206, 0.00010209456377197057, 0.00013257286627776921, 0.00012945433263666928, 0.0001588515006005764, 0.00013376484275795519, 0.00022090213315095752, 0.00015203183284029365, 0.00025605229893699288, 0.00018481689039617777, 0.0001778671721694991, 9.9149088782723993e-05, 0.00012905878247693181, 0.00019441301992628723, 0.00011665215424727648, 0.00011518688552314416, 0.00017986746388487518, 0.0002061988489003852, 0.0002615384291857481, 0.00028522941283881664, 0.00016502442304044962, 0.00028092475258745253, 0.00020782998763024807, 0.000169810198713094, 7.4437899456825107e-05, 0.00025859402376227081, 0.00035319884773343801, 0.00013672660861629993, 9.0060289949178696e-05, 0.00014756011660210788, 0.00015145666839089245, 0.00020617990230675787, 0.0002345623797737062, 0.00010222233686363325, 0.00020528041932266206, 0.00015961547615006566, 8.5525229224003851e-05, 0.00019659646204672754, 0.00013092442532069981, 0.00016495745512656868, 0.00019567710114642978, 0.00025570849538780749, 0.00014078704407438636, 0.00033085694303736091, 0.00021063224994577467, 0.0003298502997495234, 8.6825501057319343e-05, 0.0002725127269513905, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 10,126,-2,28,-27,-7,40,17,93,-76,-107,64,-8,-14,2,-17,-100,-11,31,-3,17,50,57,59,3,-36,-38,36,-41,18,29,-18,-37,23,-20,127,-10,73,6,-66,24,-84,-13,36,-127,-38,6,-13,-4,-36,-53,-23,-22,64,-18,-12,-64,-71,-31,-127,-127,-14,-89,17,-35,64,85,-13,-37,16,39,7,-104,16,51,23,14,-47,-57,18,34,-121,70,0,-74,-40,-44,21,-88,18,-127,46,74,7,78,8, -42,-34,7,86,7,81,-8,-14,75,16,-101,85,-22,-68,-26,106,-88,48,70,79,104,5,76,127,18,-25,20,70,12,127,-27,-127,98,88,9,89,51,127,-29,-127,127,2,59,127,-73,-37,127,-32,9,-78,-127,-31,-30,127,-15,-127,8,28,-107,-109,-61,-105,-24,88,-25,102,127,-39,5,127,127,23,-97,29,-27,-53,70,-92,-20,127,-6,-72,127,-54,-62,-33,78,27,101,127,-49,7,123,-19,127,39, 8,-125,15,6,-4,-19,8,63,98,70,-103,46,-3,28,-20,-57,-44,3,34,10,40,75,33,64,17,-102,26,58,10,53,15,-47,-40,-83,-33,74,-1,70,18,-56,-3,98,-14,47,-65,-13,12,1,33,-29,-40,-5,39,0,0,10,42,-90,-28,-104,-107,17,-76,-16,49,64,-18,-12,13,-5,6,5,-89,-12,7,41,25,-27,-107,28,9,-127,35,-5,-10,-51,-33,0,-90,3,3,32,44,62,68,7, 
  /* [0][1][][] */ 70,21,51,127,8,-43,127,22,-8,-123,-127,127,1,-127,-69,40,-104,-96,77,-10,-127,13,-127,-78,-12,96,-95,127,-101,63,121,78,12,71,36,58,-127,74,-24,-64,59,-127,0,60,-88,-69,7,-113,-127,-67,-65,-1,25,-89,111,-39,-127,4,-54,26,-39,-74,-54,49,-63,-22,99,-77,-105,6,-58,-127,-127,90,127,-85,127,87,-109,-46,127,-82,-36,104,-58,-3,-27,108,-3,9,-43,23,-7,-69,50,1, -127,30,-101,113,-54,-127,-114,-127,80,-9,33,52,-47,-82,-27,114,-127,-127,127,127,41,-127,-108,64,-127,127,20,54,-88,-22,-127,62,-127,79,127,-55,21,120,127,-109,-54,33,8,32,-81,-127,-71,-124,-11,-127,-102,120,-8,63,49,-86,28,48,55,-8,-17,-67,-127,127,4,-127,101,127,21,47,-126,-79,-45,69,-113,-127,115,127,108,-60,-70,2,-112,73,-88,-77,127,127,127,67,-68,-127,-127,-60,81,127, 31,-33,114,60,-6,-15,22,88,-38,127,-69,85,9,-20,-127,86,-9,-38,16,-42,-121,58,-54,-65,71,6,127,31,127,100,46,-86,9,-127,9,50,-113,46,-61,-61,10,102,9,65,25,-45,15,-127,105,-70,-87,-24,127,-117,-127,40,102,4,-127,92,-37,-52,-19,33,127,-42,0,-6,-94,-4,-48,-52,-111,-127,17,-27,56,-76,-127,-28,-56,-118,-27,127,-127,10,-15,-21,-40,-28,4,36,-4,127,50,-15, 
  /* [0][2][][] */ 20,-127,45,-38,19,17,14,38,-50,-38,-19,-80,24,-10,-19,42,-62,9,-1,41,26,39,-14,11,77,102,2,-6,-60,7,-4,38,-74,-8,-27,-7,46,-29,-3,-51,-17,-24,-18,-24,-1,-38,-6,-32,-25,11,-18,68,-9,-2,-28,-16,0,5,-7,40,-55,30,27,-7,-34,56,-34,-13,-14,-13,-2,42,-1,16,4,8,-67,-19,-10,28,24,-49,-22,-37,-41,37,-42,8,-89,43,27,11,-11,-10,-2,-11, -47,39,127,-14,127,70,-43,-22,-127,-19,-55,-93,127,-12,-24,62,-9,58,0,-52,31,-14,39,-20,59,-51,1,51,-36,69,-25,30,-119,28,7,-37,70,3,21,-108,-22,-11,-127,15,4,-16,-47,-63,-12,-61,-19,127,93,-64,-63,-97,-5,127,-59,23,40,-127,82,38,-12,55,-31,18,127,-9,-4,42,-41,5,-34,-68,-26,-111,-94,-40,-11,-87,-36,-52,-58,127,42,10,71,61,45,21,-65,-26,35,4, 13,80,41,-49,2,1,-25,44,-21,97,27,-7,22,10,1,127,-50,0,-27,44,-31,26,-15,-16,56,77,14,28,13,10,-5,-41,-103,-18,11,-39,13,-63,-15,-13,-17,40,-2,-5,5,-13,-20,-82,24,9,-1,28,74,-72,-9,27,34,2,1,59,-15,60,18,-3,25,4,-41,18,100,-1,-5,58,41,-18,-17,23,-25,-25,-33,19,-10,-89,-9,-21,-64,23,-8,-7,-91,23,49,26,-3,-8,-3,-10, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.018994865939021111, 0.008623599074780941, 0.0048505477607250214, 0.0060847504064440727, 0.015907442197203636, 0.013636416755616665, 0.018250798806548119, 0.013868060894310474, 0.008709615096449852, 0.0077132033184170723, 0.0045138821005821228, 0.011129486374557018, 0.0098806973546743393, 0.0055824127048254013, 0.0066318819299340248, 0.0054553607478737831, 0.0039439210668206215, 0.010795340873301029, 0.0059137484058737755, 0.0063913026824593544, 0.0085319289937615395, 0.015588616020977497, 0.007509901188313961, 0.012594898231327534, 0.019491994753479958, 0.0053795683197677135, 0.01319650374352932, 0.0062189702875912189, 0.0066856890916824341, 0.0042947344481945038, 0.01932067982852459, 0.013167310506105423, 0.0061960830353200436, 0.0096475947648286819, 0.0098747620359063148, 0.018964661285281181, 0.0085767321288585663, 0.0084188925102353096, 0.014786536805331707, 0.004556518979370594, 0.0079131089150905609, 0.01074710488319397, 0.01003034133464098, 0.0046482770703732967, 0.0051586651243269444, 0.0048371781595051289, 0.0086072459816932678, 0.0046559828333556652, 0.010182131081819534, 0.0043390188366174698, 0.0056343465112149715, 0.0055018090642988682, 0.0067511885426938534, 0.0056850058026611805, 0.009388340637087822, 0.0064613530412316322, 0.010882222093641758, 0.0078547177836298943, 0.0075593548826873302, 0.0042138360440731049, 0.0054849982261657715, 0.0082625532522797585, 0.0049577164463698864, 0.0048954426310956478, 0.0076443669386208057, 0.0087634511291980743, 0.011115383356809616, 0.012122250162065029, 0.0070135379210114479, 0.011939301155507565, 0.0088327741250395775, 0.0072169331833720207, 0.0031636108178645372, 0.010990245267748833, 0.015010951086878777, 0.0058108805678784847, 0.0038275623228400946, 0.0062713045626878738, 0.0064369081519544125, 0.008762645535171032, 0.009968901053071022, 0.0043444493785500526, 0.0087244175374507904, 0.0067836577072739601, 0.0036348223220556974, 0.0083553493022918701, 0.0055642877705395222, 0.007010691799223423, 0.0083162765949964523, 0.010867610573768616, 0.0059834490530192852, 0.014061419293284416, 0.0089518707245588303, 0.01401863805949688, 0.0036900837440043688, 0.011581790633499622, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 10431, 3183, 90, -893, 7660, 8461, 9125, 1881, -502, 9000, 1524, -2745, 2170, 3169, 225, -820, 4512, 9809, -617, 375, 4224, 9786, 8921, -2247, -2989, -432, 8808, -573, 1320, 1378, 6322, -1900, 9490, 2914, 4314, -3666, 965, -4171, 361, 1327, 2240, -147, 2112, -357, 960, 2775, 4592, 3565, 3706, 2722, 5713, 1999, -1895, 2044, 1461, 2742, 1934, 4105, 7526, 1155, -835, 6589, 4142, 4497, 3177, 6115, -3142, 2223, 6516, -1163, 6776, 1728, 3225, 2657, 3673, 2391, -561, 2887, 3033, 3142, 2038, 1950, 6228, 601, 1937, 6334, 1476, -659, 13961, -1000, 949, -1198, 9760, 2586, 458, -859, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 7.8419478086289018e-05, 0.00012293446343392134, 0.00019419078307691962, 0.00017689974629320204, 0.00010021866182796657, 9.3667476903647184e-05, 9.8806813184637576e-05, 0.00011854071635752916, 0.0001905792742036283, 8.4083025285508484e-05, 0.00017330207629129291, 0.00015462050214409828, 0.00015566423826385289, 0.00014850508887320757, 0.00016605948621872813, 0.00015428000187966973, 0.00013513189333025366, 9.2566784587688744e-05, 0.00013219856191426516, 0.00017878536891657859, 0.00014314809232018888, 8.7700136646162719e-05, 0.0001001850250759162, 0.00013951741857454181, 0.00017157274123746902, 0.00017738607130013406, 9.894818504108116e-05, 0.00015051073569338769, 0.00019863212946802378, 0.00013664604921359569, 0.00012999304453842342, 0.00015830688062123954, 9.2768750619143248e-05, 0.00016461467021144927, 0.00015951201203279197, 0.00015443065785802901, 0.00017495271458756179, 0.0001501694496255368, 0.00013639351527672261, 0.00020045298151671886, 0.00018065233598463237, 0.00016522464284207672, 0.00017221673624590039, 0.00020426863920874894, 0.00021839952387381345, 0.00013593133189715445, 0.00013183009286876768, 0.00015847297618165612, 0.00014999973063822836, 0.00016439914179500192, 0.0001264771563000977, 0.00020494933414738625, 0.00018707658455241472, 0.00018790036847349256, 0.0001593199121998623, 0.00017872190801426768, 0.00017024960834532976, 0.00011748222459573299, 0.00010655575169948861, 0.0001372658007312566, 0.00022160215303301811, 0.00010472071880940348, 0.00013730372302234173, 0.00013475777814164758, 0.0001728391507640481, 0.00012009092461084947, 0.00018750062736216933, 0.00016880496696103364, 0.00011055178038077429, 0.00019447389058768749, 0.00010958885832224041, 0.00015316699864342809, 0.00014297795132733881, 0.00016350742953363806, 0.00015107162471394986, 0.00011603983148233965, 0.00017865473637357354, 0.00012284994591027498, 0.00011637765419436619, 0.00015564690693281591, 0.00021442152501549572, 0.00020856232731603086, 0.00012443889863789082, 0.00012903241440653801, 0.0001913473242893815, 0.00010900806228164583, 0.00015031127259135246, 0.0002526430762372911, 6.959269376238808e-05, 0.00020116847008466721, 0.00019725020683836192, 0.00015316731878556311, 8.1464815593790263e-05, 0.00015640085621271282, 0.00015884166350588202, 0.0001301576558034867, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -107,40,18,-34,-53,-77,-127,-18,58,8,73,-61,91,-122,-15,-103, 
  /* [1][0][][] */ -106,40,-40,-62,-93,17,-22,56,-63,0,55,-81,72,127,-9,46, 
  /* [2][0][][] */ -42,4,-44,19,11,-48,24,5,-127,99,66,-7,45,49,-76,101, 
  /* [3][0][][] */ -35,-74,10,-46,-63,9,-46,-127,7,7,26,-76,-58,-47,-116,-57, 
  /* [4][0][][] */ 64,12,-54,14,-88,10,-127,21,21,74,8,51,-12,8,-8,-95, 
  /* [5][0][][] */ -76,36,-83,-18,27,-81,-24,-60,107,-16,2,-38,-1,-127,-97,-64, 
  /* [6][0][][] */ -38,-34,-12,27,-95,79,30,-7,-12,-13,127,-6,-30,6,-98,34, 
  /* [7][0][][] */ -62,68,104,-127,90,93,83,-84,55,77,-91,26,47,32,109,110, 
  /* [8][0][][] */ -31,-1,36,18,35,17,57,127,-42,-37,-35,-55,43,55,-72,-27, 
  /* [9][0][][] */ 16,58,98,-3,-74,-123,-127,-125,10,8,102,10,-94,-97,73,-16, 
  /* [10][0][][] */ -20,-106,32,-51,-114,69,26,33,-23,-58,-12,20,-19,40,-127,34, 
  /* [11][0][][] */ 87,-72,4,77,-61,-34,63,-9,127,94,-63,30,14,-77,-19,89, 
  /* [12][0][][] */ -46,-34,127,-5,66,-2,-14,88,110,-32,126,69,-93,13,-110,46, 
  /* [13][0][][] */ -4,-29,23,35,0,-5,127,41,-90,6,3,-2,-47,100,109,-66, 
  /* [14][0][][] */ 107,-82,64,-5,78,44,127,49,81,22,72,101,38,-23,70,-50, 
  /* [15][0][][] */ -24,104,17,-38,43,127,-69,80,-90,-4,-16,-14,-38,122,4,-15, 
  /* [16][0][][] */ -52,50,120,-44,21,72,7,-1,-1,19,-20,30,81,1,86,127, 
  /* [17][0][][] */ 7,127,86,-100,-27,-6,-3,-46,-54,41,-16,16,-41,-17,118,-57, 
  /* [18][0][][] */ -95,-32,-65,-67,110,54,-41,-58,47,56,127,64,-11,103,-24,-2, 
  /* [19][0][][] */ 47,118,89,72,46,-27,-18,12,-6,127,65,113,51,78,-68,57, 
  /* [20][0][][] */ 77,-19,3,60,-51,-18,-8,44,-44,-49,-127,-72,71,-53,15,-28, 
  /* [21][0][][] */ -97,-32,3,72,-41,-3,-127,79,-15,17,12,18,-23,31,-61,-2, 
  /* [22][0][][] */ 5,10,-80,-78,127,12,-50,62,72,75,50,50,-16,32,9,24, 
  /* [23][0][][] */ -61,-4,-22,-9,24,59,106,69,-4,127,-27,-17,3,39,-50,-38, 
  /* [24][0][][] */ 15,-44,15,-46,127,3,92,-31,46,20,30,40,-39,38,27,-39, 
  /* [25][0][][] */ 124,-70,95,52,11,-16,-49,117,90,-31,-50,-6,127,-45,107,62, 
  /* [26][0][][] */ 58,65,85,90,61,-15,-78,-12,-3,76,15,127,11,-78,8,-48, 
  /* [27][0][][] */ -41,43,-95,4,2,85,37,-88,91,-110,112,32,65,-45,127,90, 
  /* [28][0][][] */ -44,24,-60,-127,1,-18,63,-31,-55,86,-39,1,-3,34,1,34, 
  /* [29][0][][] */ 84,81,-73,78,1,61,-83,-25,24,40,22,62,-127,25,-10,93, 
  /* [30][0][][] */ -35,70,-77,-10,19,-48,14,50,-43,53,-25,1,-18,65,-24,127, 
  /* [31][0][][] */ 39,-127,88,24,57,-64,-58,33,2,-20,9,-32,-66,32,49,95, 
  /* [32][0][][] */ -52,84,27,106,-123,80,18,52,45,-127,1,-121,44,12,65,33, 
  /* [33][0][][] */ -60,-38,62,82,-16,2,-70,23,-37,-83,15,-32,-10,-15,-1,127, 
  /* [34][0][][] */ -10,44,-108,-114,88,-5,11,66,-5,5,-28,-42,-72,-33,-29,127, 
  /* [35][0][][] */ 78,-7,32,11,-15,17,-86,-14,-16,-127,-55,20,18,-20,54,-14, 
  /* [36][0][][] */ -18,47,-127,-50,54,127,-15,30,-48,17,38,8,21,20,-75,37, 
  /* [37][0][][] */ 21,19,62,-50,54,-72,51,-16,-66,51,-58,5,13,21,127,37, 
  /* [38][0][][] */ -39,127,51,-40,37,13,86,-75,19,-12,-106,26,-61,-99,-113,30, 
  /* [39][0][][] */ 77,46,-127,-89,-32,-27,21,-26,6,0,1,-34,41,9,-91,-45, 
  /* [40][0][][] */ -56,32,-80,-103,-56,-17,9,-127,6,13,19,-77,61,102,39,82, 
  /* [41][0][][] */ -19,-75,25,127,-41,-40,-123,19,-50,-22,84,-124,-22,-1,-88,45, 
  /* [42][0][][] */ -9,74,-33,-127,-12,-4,6,-64,102,-14,-78,15,74,-47,-25,-13, 
  /* [43][0][][] */ 5,38,6,24,127,27,20,19,10,27,-6,-86,-119,-51,-15,-14, 
  /* [44][0][][] */ 94,-53,-6,59,-23,-17,-14,58,23,-57,66,-2,127,10,-79,2, 
  /* [45][0][][] */ 13,-92,-53,51,-47,-86,5,59,28,-21,17,25,-92,127,41,-24, 
  /* [46][0][][] */ -38,-63,57,84,-18,-1,-127,82,53,-32,19,-57,28,52,1,105, 
  /* [47][0][][] */ -27,-33,0,66,-4,5,77,23,20,-89,-127,-22,49,-32,-49,18, 
  /* [48][0][][] */ -50,101,-30,-53,18,66,-29,-127,20,-38,41,-33,36,-119,-32,-10, 
  /* [49][0][][] */ -43,18,32,-38,-8,-12,125,127,-44,-35,2,27,-42,44,-29,48, 
  /* [50][0][][] */ 49,28,-49,32,41,-127,-23,-11,-71,35,-44,1,1,-65,-96,-27, 
  /* [51][0][][] */ -29,75,-29,127,-36,57,-41,-92,-7,-102,-25,-31,10,6,-32,97, 
  /* [52][0][][] */ -127,16,1,-30,48,42,73,10,20,-77,-33,-13,-84,-31,-80,-31, 
  /* [53][0][][] */ -42,-66,-56,-127,-19,-14,29,83,34,-36,-27,9,-19,52,57,91, 
  /* [54][0][][] */ -12,-74,22,0,-51,110,96,-38,-10,-97,56,57,-32,-16,-127,57, 
  /* [55][0][][] */ -18,-21,-28,23,48,-23,62,42,-46,-40,-127,-31,56,-23,-23,18, 
  /* [56][0][][] */ 87,-34,-53,-23,-121,22,-127,-11,-28,-36,-36,20,78,-41,72,5, 
  /* [57][0][][] */ -75,-3,12,-55,127,10,56,65,-24,66,36,36,-74,121,-117,-18, 
  /* [58][0][][] */ 24,3,-2,-21,47,1,-37,-54,67,-127,-54,17,-55,-35,-19,51, 
  /* [59][0][][] */ -56,-25,-23,-9,45,51,-109,-67,52,127,-104,28,-19,8,1,-11, 
  /* [60][0][][] */ 18,-38,-13,33,-127,-44,35,5,-3,33,-20,48,-11,-53,43,38, 
  /* [61][0][][] */ 12,25,-95,-25,-60,-29,-120,-119,-18,-11,43,103,67,-53,127,49, 
  /* [62][0][][] */ 57,-16,56,-5,-24,22,55,127,-31,96,18,85,2,40,109,108, 
  /* [63][0][][] */ 27,-112,-19,-18,-66,5,51,-28,-21,-23,-8,-13,-39,127,117,32, 
  /* [64][0][][] */ -5,-17,-127,-30,32,26,53,-30,3,-93,23,24,46,-51,-37,102, 
  /* [65][0][][] */ -12,24,72,51,61,-12,93,56,-50,-11,-127,-76,28,82,-39,-37, 
  /* [66][0][][] */ -33,-127,-2,-88,-50,-83,42,-13,-16,-37,0,82,-56,-41,-46,43, 
  /* [67][0][][] */ -24,-89,-73,-44,-44,107,-18,-127,-80,-38,-47,-88,43,-20,-51,20, 
  /* [68][0][][] */ 100,12,73,-27,-47,22,-101,-61,-104,-127,-8,-20,47,-24,90,-79, 
  /* [69][0][][] */ 45,0,54,-28,11,-50,-56,25,-10,127,-36,14,-2,40,85,-42, 
  /* [70][0][][] */ 29,-9,-28,71,-113,37,3,-88,84,127,31,51,54,-46,-30,6, 
  /* [71][0][][] */ 127,-25,86,67,-105,-35,25,-75,126,18,-69,33,99,-50,25,-17, 
  /* [72][0][][] */ -24,-88,35,67,61,-42,-88,127,87,50,80,4,-23,-25,-17,99, 
  /* [73][0][][] */ 61,25,52,-127,47,-91,-78,25,-18,96,-41,21,21,-84,45,-30, 
  /* [74][0][][] */ 92,12,61,36,-127,-44,56,-4,-90,-34,22,-36,17,-66,16,35, 
  /* [75][0][][] */ 95,127,-93,40,55,65,-39,-16,-4,-45,42,59,-99,35,44,72, 
  /* [76][0][][] */ -88,-75,20,-48,-60,-17,112,9,-82,28,127,42,-51,-127,-23,109, 
  /* [77][0][][] */ -74,116,-39,-2,-48,-62,56,41,15,-27,15,116,-29,82,27,127, 
  /* [78][0][][] */ 127,52,-85,30,-83,-16,-121,-9,16,5,-58,-7,23,-117,3,69, 
  /* [79][0][][] */ -76,-34,127,56,-2,-91,-36,-18,-3,38,-7,-25,-55,124,-68,65, 
  /* [80][0][][] */ 30,50,22,-44,-12,3,127,-6,48,20,-24,28,76,-47,38,0, 
  /* [81][0][][] */ 47,-11,-12,-93,65,34,20,71,127,0,-15,-5,-59,1,-30,-84, 
  /* [82][0][][] */ 89,40,79,10,119,-98,56,40,0,86,-45,22,-16,-50,31,-127, 
  /* [83][0][][] */ -60,65,10,40,109,93,124,124,0,87,-32,-75,-127,125,-87,-109, 
  /* [84][0][][] */ 8,-96,-11,107,-5,-72,-42,42,-70,26,-51,8,-127,46,-8,-45, 
  /* [85][0][][] */ -63,113,-68,-32,-25,-54,-31,-66,17,0,-20,-41,-127,-123,-73,-7, 
  /* [86][0][][] */ -18,41,108,126,41,-37,76,6,19,25,-61,-70,31,79,-127,-68, 
  /* [87][0][][] */ -13,75,127,-11,-108,-38,27,-3,45,-22,-5,57,-59,-4,-4,-10, 
  /* [88][0][][] */ -26,-74,-96,18,22,37,15,59,-12,-72,-75,-69,127,1,-13,40, 
  /* [89][0][][] */ 20,43,13,-115,-16,-67,-36,67,127,-6,67,-71,11,-20,47,-38, 
  /* [90][0][][] */ 1,78,34,20,-38,44,45,111,12,-70,-16,127,19,5,-6,75, 
  /* [91][0][][] */ -53,10,-2,47,82,53,-34,-127,-51,33,-15,10,-77,-117,-66,-13, 
  /* [92][0][][] */ -48,64,11,-15,-127,12,-99,80,-39,70,86,84,-37,-47,20,10, 
  /* [93][0][][] */ 75,23,127,9,-121,-89,23,66,-31,-51,1,-83,8,-40,-15,4, 
  /* [94][0][][] */ -41,-127,32,-126,21,48,-20,-4,95,-28,8,72,10,77,-30,40, 
  /* [95][0][][] */ -34,-74,-24,-57,127,124,-9,40,109,40,-83,33,-9,107,-79,57, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0011028849985450506, 0.0017289401730522513, 0.0027310831937938929, 0.0024879034608602524, 0.0014094669604673982, 0.0013173316838219762, 0.0013896108139306307, 0.0016671468038111925, 0.0026802911888808012, 0.0011825367109850049, 0.0024373061023652554, 0.0021745699923485518, 0.0021892490331083536, 0.0020885632839053869, 0.0023354468867182732, 0.002169781131669879, 0.0019004837376996875, 0.0013018515892326832, 0.0018592296401038766, 0.0025144226383417845, 0.0020132230129092932, 0.0012334074126556516, 0.0014089938485994935, 0.0019621613901108503, 0.0024129848461598158, 0.0024947430938482285, 0.0013915990712121129, 0.0021167704835534096, 0.0027935458347201347, 0.0019217786611989141, 0.0018282114760950208, 0.0022264148574322462, 0.0013046920066699386, 0.002315127057954669, 0.0022433637641370296, 0.0021718998905271292, 0.0024605204816907644, 0.0021119706798344851, 0.0019182271789759398, 0.0028191541787236929, 0.0025406794156879187, 0.0023237057030200958, 0.0024220419581979513, 0.0028728172183036804, 0.0030715528409928083, 0.001911727013066411, 0.0018540474120527506, 0.0022287508472800255, 0.0021095837000757456, 0.0023120958358049393, 0.0017787643009796739, 0.0028823905158787966, 0.0026310295797884464, 0.002642615232616663, 0.0022406619973480701, 0.0025135301984846592, 0.0023943763226270676, 0.0016522603109478951, 0.0014985912712290883, 0.0019304947927594185, 0.0031165943946689367, 0.0014727835077792406, 0.0019310280913487077, 0.0018952222308143973, 0.0024307954590767622, 0.0016889488324522972, 0.0026369933038949966, 0.0023740590550005436, 0.0015547911170870066, 0.002735064597800374, 0.0015412486391142011, 0.0021541279274970293, 0.0020108299795538187, 0.0022995548788458109, 0.0021246587857604027, 0.0016319745918735862, 0.0025125853717327118, 0.0017277514562010765, 0.001636725733987987, 0.002189005259424448, 0.003015606664121151, 0.0029332032427191734, 0.0017500983085483313, 0.0018147012451663613, 0.0026910929009318352, 0.0015330803580582142, 0.0021139653399586678, 0.0035531511530280113, 0.00097874586936086416, 0.0028292166534811258, 0.0027741105295717716, 0.0021541325841099024, 0.0011457144282758236, 0.0021996085997670889, 0.0022339359857141972, 0.0018305263947695494, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -26921, -484, 3439, -7797, 9732, -11514, 18187, -1633, 11611, -7361, 13229, 11736, -1353, -27007, -487, 4097, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 6.3157436670735478e-05, 6.2784543843008578e-05, 6.552298873430118e-05, 6.4777683292049915e-05, 8.090808114502579e-05, 0.00012009654892608523, 9.2365167802199721e-05, 6.9556539529003203e-05, 0.00012807419989258051, 0.00010577702050795779, 9.2815083917230368e-05, 8.100511331576854e-05, 9.1612811957020313e-05, 9.7379393992014229e-05, 9.2607311671599746e-05, 7.2051305323839188e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 30,27,10,7,-37,-70,-9,-18,-9,-58,20,-3,56,-56,41,17,-74,-9,16,8,83,23,-70,10,-2,61,127,62,2,65,37,-29,8,14,19,-22,31,32,6,-18,108,8,48,-33,1,1,23,-29,22,-27,88,-8,-47,-13,23,35,-9,-22,1,15,-16,49,-50,-5,15,7,55,33,16,-26,17,44,-5,33,10,35,62,-37,33,27,-1,42,41,40,-49,7,-4,53,9,7,-83,5,26,26,103,63, 
  /* [1][0][][] */ 24,35,-60,-7,-34,-55,76,-61,-47,-46,-56,-17,-3,-27,-2,-73,-24,-12,-47,-1,-2,-127,96,-59,-6,10,11,52,-73,1,-54,23,-28,45,16,37,-12,31,-40,68,35,13,17,-44,48,-74,2,29,-86,-8,69,-96,-18,37,51,69,17,7,-75,20,-16,6,-2,-12,23,32,81,4,-39,-96,4,0,19,36,-11,28,-49,-9,92,-25,29,-15,48,-57,-26,-57,-34,3,-36,-35,19,25,66,-66,-24,68, 
  /* [2][0][][] */ 16,-20,5,3,64,49,-41,15,-50,36,9,-16,26,-1,23,26,26,-17,-127,-10,-10,-20,-36,31,9,-8,-50,19,-50,-28,-6,70,-29,-35,-4,9,-52,29,-35,-33,62,7,17,18,16,49,19,-12,-79,-9,-30,38,-10,49,7,-54,34,16,16,20,-30,-15,-24,51,24,1,-15,3,-17,4,-10,-17,15,44,22,61,-50,8,-19,-35,23,20,42,-17,-5,-47,-10,-46,-41,-43,-20,63,-12,-19,90,-41, 
  /* [3][0][][] */ 20,-38,-5,-109,31,-18,100,-22,1,127,-72,-44,15,-47,-25,85,60,46,-2,19,-48,35,30,18,-49,78,51,9,-13,-14,-49,56,6,-52,27,-18,5,-46,-59,76,-13,-2,-60,36,47,-65,2,48,50,-18,4,-12,82,48,43,-36,2,-22,-20,-69,-61,20,35,-11,-11,-16,112,-36,-33,-28,-33,0,2,-63,-11,-68,1,-54,119,-13,-15,-54,-57,-59,-38,-51,90,77,8,55,-44,-47,2,-89,-25,4, 
  /* [4][0][][] */ -23,75,16,8,-32,17,-26,-22,41,-41,9,-27,15,42,-7,0,-12,-47,-28,-56,34,-44,-73,16,-22,-30,-24,3,-49,127,-68,-16,3,-18,1,-68,64,42,-28,-3,13,18,44,-54,-35,15,40,-27,28,-5,-45,-29,-61,24,32,29,-15,57,-7,17,-21,-61,-5,13,44,32,-53,-1,1,13,-5,-61,-7,62,61,63,-7,7,-52,43,30,57,41,-50,49,-58,-31,-65,-57,-53,-68,32,-9,21,29,-28, 
  /* [5][0][][] */ 0,-2,41,-30,-13,-20,-17,0,49,1,-34,0,-21,-22,28,-32,-26,7,-52,-42,-27,-9,-37,3,20,-56,62,-27,-6,51,1,89,-9,-83,24,9,-35,-45,-12,-3,-49,4,-21,12,-2,32,-84,20,-9,13,48,-15,36,-98,-7,22,-38,-64,5,-47,52,23,36,70,-37,16,110,-23,-19,-15,4,11,-10,36,38,5,-6,-28,127,38,-32,-5,-32,30,45,67,-2,100,-2,-30,-10,9,16,-27,-37,52, 
  /* [6][0][][] */ 14,-49,43,26,-53,88,-32,-94,9,-61,-53,65,-8,27,-18,44,19,33,17,-28,-65,-41,-88,-48,10,-55,-19,55,-95,41,-30,-27,28,93,-7,-4,-3,-45,37,-49,-30,33,46,-46,29,82,-87,-9,45,6,-54,-121,86,35,-56,-2,7,-30,25,-31,-2,-39,35,6,22,-44,-49,-44,-70,33,-15,-52,-11,-80,20,-90,81,25,-55,36,-38,80,2,-50,62,-24,-32,13,-127,48,-87,103,44,-66,66,-52, 
  /* [7][0][][] */ -10,-26,-67,66,-17,14,32,11,-108,-12,73,33,-8,-62,-4,-28,-16,4,9,-2,-70,-25,-41,-66,82,45,-7,71,-18,25,33,30,-47,-127,26,88,-22,8,-82,26,-7,-12,-49,-50,8,34,44,76,-8,50,-40,28,10,-42,62,-45,-21,11,-74,-32,52,-14,-14,-37,85,-47,92,-33,-70,-18,71,-14,0,-22,-92,-31,16,-38,96,-49,-18,-5,-87,-46,37,14,-64,56,20,23,8,-6,33,-41,84,3, 
  /* [8][0][][] */ -4,-59,-9,13,-36,-25,19,-34,9,0,44,46,16,46,-48,-31,67,1,9,16,-18,-79,-57,-6,-8,-29,76,8,-32,44,1,-32,-23,10,11,4,-61,-14,45,-46,1,61,75,-47,21,3,44,-12,35,-20,73,-20,10,-12,-74,16,-31,127,-80,6,-11,-58,-46,-8,-102,-21,-9,4,-1,20,36,-17,-17,-121,47,-110,8,15,-66,14,-21,-22,13,68,74,-70,-52,53,-65,86,-1,-5,-51,21,4,-53, 
  /* [9][0][][] */ -21,-21,-18,15,4,19,1,48,-43,-2,53,54,-25,47,28,-28,-10,24,-22,-33,3,28,4,5,-21,17,5,12,31,-11,10,-8,-17,-20,-3,53,-8,-21,11,9,-16,-33,-11,-2,7,39,-15,33,-40,9,-18,22,103,37,1,5,22,-28,40,11,-22,-1,64,0,6,18,53,3,19,-4,-15,12,4,-127,-38,-105,-24,4,43,5,-11,29,-12,-45,34,21,-54,-2,1,90,40,28,46,36,-15,13, 
  /* [10][0][][] */ 26,41,9,7,-1,15,-36,-12,50,12,-38,23,8,12,1,-43,-35,-17,18,-2,23,-17,-23,-30,-1,-21,-90,48,-17,49,14,15,16,8,-24,3,16,8,-10,3,38,-16,31,-38,-35,-5,12,23,17,8,10,-21,-27,-14,12,28,1,10,-5,-1,-13,-39,-13,15,-6,-26,-85,-22,-54,-24,41,-28,-1,22,26,19,40,-10,-92,11,-5,25,6,-8,1,8,-68,-127,6,35,15,13,52,-40,24,20, 
  /* [11][0][][] */ 9,-16,-1,17,-88,17,26,-22,70,-4,-17,-50,21,14,1,-27,-24,57,13,-53,-3,41,-5,-13,64,18,83,1,10,-59,-25,28,11,112,-100,24,11,-9,71,-25,-43,61,3,10,-36,8,-13,-23,41,-32,-18,2,-25,0,-92,104,-33,-2,3,-4,23,0,-10,-89,-21,-44,-122,-106,8,-24,-101,47,70,35,-21,11,27,66,-127,-45,-18,-8,-28,16,-20,-3,53,96,-6,-70,3,14,-42,15,109,55, 
  /* [12][0][][] */ 29,16,-36,-24,28,-2,2,49,43,-33,18,22,-9,-9,2,4,21,-41,-35,9,16,41,9,41,-53,-42,-127,-5,68,-24,25,4,-23,-65,53,-6,34,-21,11,5,-6,-61,12,27,38,-19,20,-20,-69,12,-57,82,75,-19,27,-75,14,11,-25,-32,18,40,64,16,-20,-1,20,34,98,39,17,25,3,-35,-20,-5,-34,-50,39,-59,10,-35,12,-37,5,-1,-5,-96,-17,20,-37,40,6,53,16,42, 
  /* [13][0][][] */ -23,16,-73,14,29,25,-12,28,31,55,-34,37,-60,-30,73,-60,5,43,49,19,-24,-43,8,11,29,44,-24,21,-7,34,40,-13,-11,61,4,36,21,-44,-61,-37,0,-22,-12,10,36,51,-49,39,-43,43,6,-4,-7,-26,69,34,23,-53,12,-17,31,21,5,-27,11,75,117,53,19,-4,-35,-10,15,35,-76,35,22,-68,127,-30,-13,-27,16,-1,15,57,-39,-14,6,-18,3,50,40,12,51,39, 
  /* [14][0][][] */ 1,61,25,10,-84,-38,14,25,-59,-17,77,20,-75,-1,67,-32,-27,56,-87,31,-2,10,-104,23,-51,-3,-52,-115,2,-9,17,83,-61,32,20,1,-19,-78,27,-58,32,-29,90,-41,-5,47,-53,30,-18,-37,77,28,11,16,-46,23,-60,38,-11,38,44,72,5,49,5,-30,-1,-62,56,66,59,54,-63,32,16,17,32,-8,36,25,-77,100,4,-121,90,-7,-10,1,-127,-26,-18,42,-26,33,46,39, 
  /* [15][0][][] */ 70,-30,24,25,49,8,0,3,6,23,-58,-8,51,61,1,1,-1,-9,-64,39,-2,-41,8,17,39,-36,68,23,53,-15,-33,59,62,38,-15,-92,64,61,53,54,77,19,-39,10,-32,-116,13,-35,-28,-11,-21,0,-27,-34,-10,43,-1,4,1,22,-10,-52,-37,36,34,16,-55,37,-13,-48,-14,-14,13,-127,-46,-99,-18,24,-109,31,74,-32,51,27,-52,-5,-10,-13,40,78,19,-48,-25,-47,35,-35, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0026841911021620035, 0.0026683430187404156, 0.0027847269084304571, 0.0027530514635145664, 0.0034385933540761471, 0.0051041031256318092, 0.0039255195297300816, 0.0029561528936028481, 0.0054431534372270107, 0.0044955234043300152, 0.0039446409791707993, 0.0034427172504365444, 0.0038935444317758083, 0.004138624295592308, 0.0039358106441795826, 0.0030621804762631655, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9693, 1387, -852, 8739, -3989, 1156, -581, -4271, 1331, -6162, 955, -147, 6274, -2315, -1770, -6130, 125, 1052, -7195, -3634, -2117, -2918, -4748, -347, 17, 8571, -9341, -6345, -2796, -4678, -3316, -1560, 17233, -318, -1682, -4213, 555, 13327, 1557, 13420, 614, 5965, -933, 8424, 210, 569, 16544, 5333, -5330, -56, -2578, -1073, -2890, -5381, -3056, 2608, -1621, 6977, -850, 2276, -1538, 3591, -2784, 8728, 7010, -119, 14322, 16813, -1326, -239, 4585, -1012, -129, 1567, -729, -909, 18919, 11760, 7225, 14287, 15594, -1614, 6783, 11280, 23, -1815, 12876, -5625, 7235, -1628, -7995, -325, 532, -332, 11021, -3025, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00011131411883980036, 0.00027036239043809474, 0.00018244994862470776, 0.00014181464212015271, 0.00021783319243695587, 0.0006121288170106709, 7.1722584834787995e-05, 0.00017206316988449544, 0.00035846585524268448, 0.0001871628628578037, 0.00027073724777437747, 0.00021492315863724798, 8.584775059716776e-05, 0.00015514377446379513, 0.00022508611436933279, 0.00017069301975425333, 0.00031100836349651217, 0.0003378535620868206, 0.00017525441944599152, 0.00032971907057799399, 0.0002315541059942916, 0.00031235514325089753, 0.00013554224278777838, 0.00012125555804232135, 0.0016945292009040713, 0.00017455649503972381, 0.00022560969227924943, 0.00014375441242009401, 0.00028173509053885937, 0.0001289650535909459, 0.00014535167429130524, 0.0002857545914594084, 7.5099858804605901e-05, 0.00050121895037591457, 0.00011046715371776372, 0.00023442575184162706, 0.000284875015495345, 0.00010762170131783932, 0.00036306210677139461, 9.0298519353382289e-05, 0.00055862427689135075, 0.00018702138913795352, 0.0002366445551160723, 0.00011417196219554171, 0.00017076669610105455, 0.00033009840990416706, 8.3467857621144503e-05, 0.00018644942610990256, 0.0001917175977723673, 0.00050033349543809891, 0.00031269376631826162, 0.00022437685402110219, 0.0001428066025255248, 0.00017337473400402814, 0.0005249284440651536, 0.00030263635562732816, 0.00023138867982197553, 0.00035616266541182995, 0.00033917906694114208, 0.00037076463922858238, 0.0002232129336334765, 0.00027598047745414078, 0.00015352535410784185, 0.00013401916658040136, 0.00029683209140785038, 0.00028158692293800414, 0.00010628833842929453, 0.00010387964721303433, 0.00019564687681850046, 0.00043225788976997137, 0.00018298040959052742, 0.00030912033980712295, 0.00059040903579443693, 0.00021697975171264261, 0.00018663180526345968, 0.00026699478621594608, 6.4802727138157934e-05, 0.0001677321270108223, 0.00015726173296570778, 0.0001521989906905219, 9.9834869615733624e-05, 0.00023751075787004083, 0.00014407870185095817, 0.00024909083731472492, 0.0001302521995967254, 0.00029278217698447406, 0.00012356028310023248, 0.0002127306506736204, 0.00018110351811628789, 0.00027238429174758494, 0.00013588083675131202, 0.00026140254340134561, 0.00041687709745019674, 0.00014300840848591179, 0.00014461629325523973, 0.00024900049902498722, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -40,-20,-11,-18,108,-8,45,-2,-8,10,-21,-18,-53,-18,-3,-36,-10,3,-8,1,-20,20,-25,57,-7,-32,-16,15,40,20,45,11,-2,-2,-7,7,7,-96,-24,-40,-6,-54,53,-73,-32,41,-82,-29,-27,11,-16,60,-47,58,54,-21,33,-44,18,-36,-23,-15,-12,-23,-11,-7,-35,-39,-24,23,-6,-10,34,-10,-32,-3,2,20,127,-111,-94,2,-104,-21,-44,-26,3,7,14,-18,-16,-51,-8,55,35,15, 12,39,37,-60,-29,1,127,-34,-1,2,-39,10,-45,-19,-97,69,-11,73,24,-14,-9,127,54,98,34,22,50,87,127,75,127,-30,-113,-18,-66,-19,-15,-121,127,-126,-30,-120,2,-91,35,-38,-83,-19,26,5,20,127,-71,83,-72,-9,-93,-30,-1,8,-6,-127,-127,15,-58,4,-1,-105,-12,12,-30,100,-127,-26,6,-35,-118,-61,-6,-127,-123,6,12,-68,48,71,-51,23,-46,12,36,-15,5,127,-7,-97, -17,-4,-7,-3,101,-2,82,-36,-24,34,-19,-18,-67,-20,-12,-52,-17,-4,-19,-9,-13,28,-14,56,8,-23,0,-2,19,67,65,12,-5,0,-4,83,4,-51,-32,-33,-6,46,49,-39,-26,-37,-61,-37,-3,-16,-7,33,18,44,32,-16,44,-33,12,-44,1,-12,-37,-32,-16,-30,119,-61,-10,22,2,6,-10,-7,-10,8,-81,31,-29,-48,-30,8,-127,-31,-12,-44,14,-25,2,-17,-30,74,8,68,40,-11, 
  /* [0][1][][] */ -108,-26,27,-60,62,86,-29,4,3,1,-30,-6,-72,33,21,42,-12,33,45,29,11,5,13,-31,27,4,74,40,5,-15,-9,-8,-120,-16,65,17,-7,-127,-43,-127,-20,-58,77,-50,-51,127,-83,-99,68,61,9,-32,-88,70,74,-32,98,-43,49,-15,19,-11,89,-127,-9,21,-21,-102,-10,4,-127,8,90,120,-14,-69,-99,-23,-69,-86,-66,8,-3,-40,34,40,-127,53,-127,127,86,-95,127,-14,-29,19, 65,127,127,97,-127,-127,125,-39,127,127,-66,-50,-75,127,-24,86,127,-127,76,127,127,-53,65,-127,-127,-127,127,127,-115,127,-29,127,-96,127,127,-80,127,80,15,26,127,-51,-127,-127,127,-30,113,117,127,-127,127,-91,119,127,-127,127,-127,127,-127,127,-101,96,121,-33,127,127,-14,127,-81,-127,13,-127,30,127,127,54,-16,-127,96,-75,68,127,95,127,127,77,-122,127,-28,64,27,-23,-107,-13,-127,-29, -127,-44,42,-62,41,57,-35,1,-33,6,-5,127,-104,44,19,71,-28,35,127,16,-2,-4,44,-18,39,-19,42,18,3,-3,44,0,-80,-30,59,127,1,-83,-75,-74,-31,-13,36,-13,-38,-65,-127,-127,42,68,-4,-36,127,29,104,-55,125,-31,59,-45,2,-37,-107,-110,-40,-4,-59,-91,-15,19,-85,5,38,-93,9,127,-127,-62,-54,35,-113,-2,-16,-79,13,28,-99,64,-97,-65,127,127,-40,-14,-43,-3, 
  /* [0][2][][] */ -35,-55,-122,-14,40,0,-33,70,-2,40,21,-58,127,7,-2,9,0,-8,-21,-14,8,-5,63,-38,9,-28,-7,12,-4,-28,-22,8,96,-3,-19,-16,-19,2,-17,-30,-28,43,41,-4,7,17,-119,-21,-24,1,-24,-12,17,-26,50,-29,34,-31,18,-24,26,0,2,-22,-52,-36,127,8,7,16,2,21,-16,-13,-41,-14,13,11,-16,-57,-57,5,-53,-26,-20,13,13,-28,-82,4,1,-39,-13,-15,5,11, -36,-70,-21,-127,-41,-6,40,127,-53,60,127,-57,-26,25,127,127,-7,-45,52,-43,-5,-22,127,12,23,-18,31,-1,-24,9,-83,-45,-127,-26,-101,22,-103,-63,40,-73,-24,-127,-30,110,6,-27,-108,-23,25,-26,-16,-12,71,40,-55,-35,-77,-52,53,-42,127,-9,99,-4,-96,-83,-16,-78,127,20,-9,25,0,-35,-4,-11,-20,-113,0,115,-127,-25,-39,-81,34,-127,-38,-1,-70,-5,89,-11,3,-90,-76,127, -67,12,-81,-37,45,-6,3,48,-23,18,17,8,47,15,3,-22,-13,-3,3,-11,-2,5,48,-21,6,-22,-26,-11,11,15,-5,5,-34,4,-2,21,-13,-43,-20,-62,-33,67,8,23,24,-8,-111,-17,-28,2,-26,-21,13,-32,33,-15,57,-13,10,-4,14,3,3,6,-38,-40,-25,-2,27,4,-12,-6,-63,-54,-37,6,-50,-34,88,2,-90,-6,-64,-34,-16,14,43,-4,-76,2,16,2,-2,-28,-25,17, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0047308499924838543, 0.011490401811897755, 0.0077541223727166653, 0.0060271220281720161, 0.0092579107731580734, 0.026015473529696465, 0.0030482099391520023, 0.0073126847855746746, 0.015234798192977905, 0.0079544214531779289, 0.011506333015859127, 0.0091342339292168617, 0.0036485292948782444, 0.0065936101600527763, 0.0095661599189043045, 0.0072544529102742672, 0.013217855244874954, 0.014358775690197945, 0.0074483128264546394, 0.014013060368597507, 0.0098410490900278091, 0.013275093398988247, 0.0057605449110269547, 0.0051533612422645092, 0.072017490863800049, 0.0074186506681144238, 0.0095884120091795921, 0.006109562236815691, 0.01197374053299427, 0.0054810144938528538, 0.0061774463392794132, 0.012144569307565689, 0.003191743977367878, 0.021301804110407829, 0.0046948539093136787, 0.0099630942568182945, 0.012107187882065773, 0.0045739221386611462, 0.015430139377713203, 0.0038376869633793831, 0.023741532117128372, 0.0079484088346362114, 0.010057393461465836, 0.0048523084260523319, 0.0072575844824314117, 0.014029182493686676, 0.003547383937984705, 0.0079241003841161728, 0.0081479977816343307, 0.021264173090457916, 0.013289484195411205, 0.0095360158011317253, 0.0060692806728184223, 0.0073684258386492729, 0.022309457883238792, 0.01286204531788826, 0.0098340185359120369, 0.01513691246509552, 0.014415109530091286, 0.015757497400045395, 0.0094865495339035988, 0.011729170568287373, 0.0065248273313045502, 0.0056958147324621677, 0.012615363113582134, 0.011967443861067295, 0.0045172544196248055, 0.004414884839206934, 0.0083149923011660576, 0.018370959907770157, 0.0077766673639416695, 0.013137614354491234, 0.025092383846640587, 0.009221639484167099, 0.0079318517819046974, 0.011347278021275997, 0.0027541157323867083, 0.0071286153979599476, 0.006683623418211937, 0.0064684571698307991, 0.0042429817840456963, 0.010094206780195236, 0.0061233448795974255, 0.010586360469460487, 0.0055357185192406178, 0.012443241663277149, 0.0052513116970658302, 0.0090410523116588593, 0.0076968995854258537, 0.011576332151889801, 0.005774935707449913, 0.011109607294201851, 0.017717275768518448, 0.0060778572224080563, 0.0061461925506591797, 0.010582521557807922, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1548, 5742, 1369, 1029, 6346, 18908, -36, 2466, 9721, -938, 15320, 4263, 1646, 838, 4297, 804, 3710, 7849, -214, 10453, 276, 6846, -789, 1857, -8822, 1657, 2043, 2123, 5716, 2706, 4196, 2914, 2064, 18356, 3597, 3952, 3872, 3987, 5514, 2767, 24067, 1861, 2718, 1676, 3345, 5157, 3679, 8705, 1444, -1101, 1738, 5266, 2764, -1980, 15000, 281, 2568, 23388, 814, 2115, 1786, 8729, 2843, 341, 13616, 7914, 1648, 4690, 3822, 4729, 2511, 1191, -3990, 5345, 2417, 2827, 1187, 9195, 4402, 8915, 3215, 1904, 4733, 22436, 29, 7989, 5444, 1786, -1566, 1985, 1779, 11435, 3711, 2412, 4125, 5337, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019764422904700041, 0.00013180695532355458, 0.00014174284297041595, 0.00030098296701908112, 0.00010873143764911219, 5.1419778174022213e-05, 0.00024937913985922933, 0.00012516806600615382, 9.3567468866240233e-05, 0.00017409566498827189, 5.9755268011940643e-05, 0.00010850696708075702, 0.00013289882917888463, 0.00028626792482100427, 0.00014258091687224805, 0.00014867268328089267, 0.00018060291768051684, 8.4153958596289158e-05, 0.00017644102626945823, 8.7575856014154851e-05, 0.00027156894793733954, 0.00011275191354798153, 0.00023731942928861827, 0.00014082195411901921, 8.6986226961016655e-05, 0.00016849272651597857, 0.00020774475706275553, 0.00018744838598649949, 0.0001513022871222347, 0.00015020511636976153, 0.00014941746485419571, 0.00018371452460996807, 0.00020074297208338976, 4.9737300287233666e-05, 0.00013397644215729088, 0.00014485597785096616, 0.00014416927297133952, 0.00013431475963443518, 0.0001099993460229598, 0.00014289130922406912, 4.2106050386792049e-05, 0.00017530744662508368, 0.00013527137343771756, 0.0001224586449097842, 0.00011672492837533355, 0.00014737113087903708, 0.00017856957856565714, 8.6162275692913681e-05, 0.00022496911697089672, 0.00023926873109303415, 0.00023361205239780247, 0.0001288179773837328, 0.00016149372095242143, 0.00019516343309078366, 6.2336664996109903e-05, 0.00029657204868271947, 0.00016048956604208797, 4.2737108742585406e-05, 0.00025712396018207073, 0.00015698386414442211, 0.0002353927557123825, 9.9014221632387489e-05, 0.00018648301193024963, 0.00019925448577851057, 6.7950189986731857e-05, 0.00010975948680425063, 0.00026460792287252843, 0.00014478692901320755, 0.00016992920427583158, 0.00011421468661865219, 0.00019419459567870945, 0.00014678201114293188, 0.00016438246530015022, 0.00012075115228071809, 0.00016072449216153473, 0.00023735665308777243, 0.00017895858036354184, 9.171592682832852e-05, 0.00013294912059791386, 0.000109583925222978, 0.00012752760085277259, 0.0001345943019259721, 0.0001076244589057751, 4.4087493733968586e-05, 0.00014054933853913099, 0.00010098481288878247, 0.00013465039955917746, 0.00022195899509824812, 0.00020926848810631782, 0.00025438086595386267, 0.00013013495481573045, 6.9790337875019759e-05, 0.00014528939209412783, 0.00014952028868719935, 0.00015234007150866091, 0.00012958548904862255, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 47,11,-6,37,-127,-31,123,44,67,79,-42,32,36,3,35,73, 
  /* [1][0][][] */ -38,20,-84,21,127,97,-3,11,-40,1,-58,29,-46,108,-48,-48, 
  /* [2][0][][] */ -46,70,86,-13,81,100,10,31,45,5,37,-21,64,-127,-13,9, 
  /* [3][0][][] */ 127,-9,16,8,15,48,-5,13,33,11,-59,-24,-35,29,-34,36, 
  /* [4][0][][] */ -111,-15,-35,7,-127,10,-85,-46,-41,35,3,-106,-93,26,-45,114, 
  /* [5][0][][] */ -127,-16,18,34,101,39,-42,38,-49,14,1,17,-68,64,-90,-2, 
  /* [6][0][][] */ -127,21,-48,24,-13,-45,72,14,-10,-30,-50,41,15,0,-49,15, 
  /* [7][0][][] */ 30,120,94,-110,77,105,80,22,127,3,27,63,67,-3,13,21, 
  /* [8][0][][] */ -47,-27,-78,72,-56,76,-58,-54,27,-49,80,44,127,49,-65,42, 
  /* [9][0][][] */ -49,-123,14,86,-37,-66,-1,77,28,63,4,63,-127,31,30,-23, 
  /* [10][0][][] */ -44,-63,-106,49,-122,109,53,-87,-23,-71,54,-36,-3,127,-78,87, 
  /* [11][0][][] */ -64,-125,-33,55,-63,77,-27,62,18,2,48,-68,3,124,-90,127, 
  /* [12][0][][] */ -40,-121,-89,125,-124,-127,25,120,73,59,-17,95,-13,-50,-21,14, 
  /* [13][0][][] */ -79,-35,-25,3,-22,-9,29,10,-21,127,-7,-22,41,39,19,-10, 
  /* [14][0][][] */ -57,11,-28,-49,-21,69,-4,-71,127,-62,59,-17,59,-65,-55,-56, 
  /* [15][0][][] */ 1,-127,99,-61,-69,-44,34,48,18,-71,-81,-30,107,-21,-24,-44, 
  /* [16][0][][] */ -24,-35,6,-49,13,34,-27,-19,57,-127,40,-38,-15,-8,-85,-86, 
  /* [17][0][][] */ -3,35,24,-112,41,-8,-63,-24,106,-10,17,93,127,-105,11,-126, 
  /* [18][0][][] */ 62,-2,-55,-127,5,-43,121,-67,14,71,-11,28,-10,40,-9,-120, 
  /* [19][0][][] */ -22,-39,-15,-67,-94,45,-11,-1,58,-40,1,-127,-26,-51,-42,-37, 
  /* [20][0][][] */ 24,61,63,-80,59,0,-18,76,-97,-127,16,-75,-21,85,-28,-21, 
  /* [21][0][][] */ -5,-79,-127,-44,60,64,101,40,-37,-71,-27,-29,63,-127,-23,0, 
  /* [22][0][][] */ 45,-35,91,2,18,52,64,44,47,127,70,51,5,3,125,5, 
  /* [23][0][][] */ -109,-127,-42,79,62,76,-36,13,-11,24,-7,-84,-2,83,58,99, 
  /* [24][0][][] */ 31,-48,52,56,-10,-127,8,-54,34,123,-112,105,-5,-62,103,-95, 
  /* [25][0][][] */ 85,-86,127,92,61,13,-2,37,-99,63,54,-60,-1,67,17,-16, 
  /* [26][0][][] */ -16,35,-2,38,-58,111,-15,40,-62,-35,-80,38,4,27,44,-127, 
  /* [27][0][][] */ 28,-3,-12,-56,-49,10,-90,2,-109,-12,-72,-46,-101,45,-18,127, 
  /* [28][0][][] */ -79,9,7,-5,1,-16,-127,0,-29,-36,11,-3,-9,-45,-58,-23, 
  /* [29][0][][] */ -43,-104,-9,84,-15,-12,127,16,75,66,-111,70,35,-1,-65,88, 
  /* [30][0][][] */ 28,-66,-76,16,-127,22,42,-17,4,7,3,-41,-29,47,-10,70, 
  /* [31][0][][] */ -127,-35,15,81,-3,22,-57,0,-32,-36,-7,-32,-22,-64,-30,68, 
  /* [32][0][][] */ -126,-67,-96,-19,-127,-67,-18,-28,123,58,-55,-88,53,28,5,-29, 
  /* [33][0][][] */ -22,-7,-81,54,-127,-84,45,15,-103,-2,-29,-66,-31,85,64,77, 
  /* [34][0][][] */ 35,42,-6,31,-47,-32,31,17,5,-127,-15,28,-39,12,31,75, 
  /* [35][0][][] */ 9,-18,-111,-56,-127,9,101,-44,41,65,-14,-10,30,113,73,62, 
  /* [36][0][][] */ -23,18,-81,55,127,-2,70,71,-94,11,-84,-84,6,-28,11,45, 
  /* [37][0][][] */ -114,60,16,-68,19,-87,-50,-33,-18,-18,-30,38,67,-95,8,-127, 
  /* [38][0][][] */ 30,127,12,-102,-62,-41,-82,-77,-16,-57,21,32,-59,-108,25,-45, 
  /* [39][0][][] */ 14,-66,-61,59,43,107,127,-20,-30,54,30,-20,-30,102,20,126, 
  /* [40][0][][] */ 117,59,48,69,-57,-76,4,2,-63,64,-21,-9,-52,-64,127,-19, 
  /* [41][0][][] */ -27,-14,18,63,-102,116,-2,53,-49,17,-106,24,17,38,67,-127, 
  /* [42][0][][] */ -1,-66,54,-17,127,41,37,9,-23,-70,-117,-7,-1,11,-5,20, 
  /* [43][0][][] */ -45,-100,-12,25,91,11,-12,112,-79,-73,-97,-77,127,2,-83,77, 
  /* [44][0][][] */ -20,-74,-80,-46,12,80,42,21,-70,-126,-34,59,-64,55,33,127, 
  /* [45][0][][] */ 2,-51,-49,0,-127,66,-22,-34,52,-40,52,-49,-10,15,-47,45, 
  /* [46][0][][] */ 42,-42,-9,-23,78,-80,-5,65,18,-14,2,62,-27,-51,33,-127, 
  /* [47][0][][] */ -82,-13,-1,74,-29,10,34,8,-6,127,108,91,-26,81,-3,107, 
  /* [48][0][][] */ 43,-5,-83,-92,33,-63,9,39,41,-67,-15,22,-58,1,-38,-127, 
  /* [49][0][][] */ 55,-5,-23,20,-13,-23,45,83,-14,127,-17,59,-41,-3,50,75, 
  /* [50][0][][] */ 13,7,14,13,-127,-17,-9,-40,62,15,22,53,-18,-75,6,-7, 
  /* [51][0][][] */ 17,-21,11,-127,-41,81,49,-69,20,-7,16,-99,82,67,-23,-15, 
  /* [52][0][][] */ 26,-35,-9,-90,99,-103,-2,-35,51,-16,127,-47,41,27,-34,90, 
  /* [53][0][][] */ -72,-55,50,-13,-64,-127,29,-96,-44,75,-99,67,-59,4,79,-59, 
  /* [54][0][][] */ 43,25,-11,-2,-120,-29,-127,-51,-15,-3,77,29,-111,-24,30,10, 
  /* [55][0][][] */ -2,2,-31,116,-27,25,24,-13,27,127,32,45,7,-14,7,57, 
  /* [56][0][][] */ 9,-127,-48,70,-66,10,-48,49,74,21,53,17,-29,-4,27,44, 
  /* [57][0][][] */ -39,27,114,-115,66,-1,-58,-1,119,10,24,76,71,-40,127,-84, 
  /* [58][0][][] */ 77,-60,-3,-57,9,-3,2,127,61,56,-4,36,36,31,124,22, 
  /* [59][0][][] */ -92,48,64,-43,-41,-87,-13,0,5,17,-85,-84,-127,-41,84,-10, 
  /* [60][0][][] */ 17,-23,7,9,-1,-23,-4,-37,3,127,-4,59,-13,-28,-24,-17, 
  /* [61][0][][] */ 68,43,54,-26,-44,-127,-14,-70,-23,-6,-25,42,-46,-43,63,80, 
  /* [62][0][][] */ -17,74,-37,47,-41,127,-34,22,-54,-1,-58,27,-39,65,84,-88, 
  /* [63][0][][] */ 35,-11,-75,-127,-55,-76,45,-37,15,-102,-12,10,-70,64,44,-58, 
  /* [64][0][][] */ -45,-2,-8,-28,33,-69,0,67,-127,-2,-63,-35,-34,91,54,53, 
  /* [65][0][][] */ -35,-18,-56,12,28,3,-40,-35,-127,-45,-1,-18,-84,61,-26,29, 
  /* [66][0][][] */ -22,56,-20,24,-37,127,-28,23,-48,25,-20,67,-12,56,61,-76, 
  /* [67][0][][] */ 5,-14,-31,-61,17,-70,73,-78,-15,38,10,127,-31,4,-19,-106, 
  /* [68][0][][] */ 12,-127,-42,42,-3,-7,26,62,21,38,55,4,-66,46,-37,7, 
  /* [69][0][][] */ -14,64,100,-98,33,40,-49,107,-12,122,80,83,127,-78,42,-72, 
  /* [70][0][][] */ 23,2,66,-36,96,18,-103,-58,-127,-112,0,47,-16,81,-102,0, 
  /* [71][0][][] */ -23,-55,34,-67,81,-10,43,-2,-62,105,-127,-38,-7,54,-43,37, 
  /* [72][0][][] */ 12,32,51,24,-69,-28,-127,-79,-22,59,-39,50,24,110,-89,10, 
  /* [73][0][][] */ -11,-27,1,-37,42,-123,35,-41,83,82,110,3,26,3,-48,127, 
  /* [74][0][][] */ 7,-6,-36,116,-96,-13,74,42,89,60,40,121,127,31,-58,15, 
  /* [75][0][][] */ -21,51,-20,24,-33,127,-14,8,-18,30,-33,44,-12,36,25,-62, 
  /* [76][0][][] */ -75,90,-71,13,-127,-13,-9,10,35,45,-9,-39,31,-44,-102,50, 
  /* [77][0][][] */ 92,102,-91,127,60,86,36,48,46,16,95,-40,53,17,87,17, 
  /* [78][0][][] */ 17,-41,21,-45,72,-113,12,-57,51,61,113,-11,33,-16,-13,127, 
  /* [79][0][][] */ -42,73,5,23,-15,-40,-13,-22,-127,-20,39,-5,102,32,-58,-43, 
  /* [80][0][][] */ -77,18,35,-19,53,50,-12,-127,-83,70,-85,-34,-16,-61,-34,51, 
  /* [81][0][][] */ 63,58,-14,16,5,-40,53,101,-107,97,-52,-34,-24,36,127,118, 
  /* [82][0][][] */ 49,90,15,-100,-16,-35,126,-88,13,-3,-101,38,127,-31,121,-41, 
  /* [83][0][][] */ -10,-18,55,-5,9,21,-40,-125,94,-11,97,20,46,-59,-18,-127, 
  /* [84][0][][] */ -127,-82,-44,-23,0,57,57,14,62,66,89,61,36,103,-87,2, 
  /* [85][0][][] */ 95,-1,111,-74,103,-8,-27,76,24,127,-83,-22,-66,48,102,2, 
  /* [86][0][][] */ -108,74,-35,8,12,71,1,31,69,48,127,-41,-52,57,-16,-13, 
  /* [87][0][][] */ 13,-52,22,-51,47,-127,29,-36,51,-8,65,-35,32,-39,-40,68, 
  /* [88][0][][] */ -44,37,23,-23,102,-33,32,20,-49,-57,50,-31,73,127,86,-102, 
  /* [89][0][][] */ -22,27,-10,19,-22,127,-21,27,-25,13,-39,10,-5,49,22,-81, 
  /* [90][0][][] */ 46,-73,43,5,120,18,31,-6,17,-69,-127,-20,4,-20,-51,-6, 
  /* [91][0][][] */ -21,-1,-38,6,-33,-51,-114,127,-79,-24,-46,-108,-122,-44,-49,54, 
  /* [92][0][][] */ 61,42,32,29,-127,-78,15,15,-16,23,-34,-46,-31,-61,41,-18, 
  /* [93][0][][] */ 13,-98,-127,78,-67,-46,-20,95,99,48,25,56,-51,41,-30,-29, 
  /* [94][0][][] */ 127,20,99,-31,42,-10,18,37,38,85,-7,55,20,-6,115,-14, 
  /* [95][0][][] */ -36,-28,-27,-40,127,6,47,56,-11,-6,-87,-44,40,-6,-30,27, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0036640788894146681, 0.0024435375817120075, 0.0026277364231646061, 0.0055798511020839214, 0.0020157459657639265, 0.00095325888833031058, 0.0046231797896325588, 0.0023204607423394918, 0.0017346248496323824, 0.0032275177072733641, 0.0011077885283157229, 0.0020115845836699009, 0.0024637794122099876, 0.0053070522844791412, 0.0026432734448462725, 0.002756207250058651, 0.0033481540158390999, 0.0015601100167259574, 0.003270997665822506, 0.0016235477523878217, 0.005034551490098238, 0.0020902806427329779, 0.004399607889354229, 0.0026106643490493298, 0.001612616702914238, 0.0031236461363732815, 0.0038513301406055689, 0.0034750606864690781, 0.0028049568645656109, 0.0027846165467053652, 0.0027700145728886127, 0.0034058394376188517, 0.0037215256597846746, 0.00092206784756854177, 0.0024837569799274206, 0.0026854502502828836, 0.0026727195363491774, 0.0024900289718061686, 0.0020392513833940029, 0.0026490276213735342, 0.00078059395309537649, 0.0032499826047569513, 0.0025077634491026402, 0.0022702312562614679, 0.0021639354526996613, 0.0027320778463035822, 0.0033104585018008947, 0.001597341732122004, 0.0041706482879817486, 0.0044357455335557461, 0.0043308776803314686, 0.0023881255183368921, 0.0029938933439552784, 0.0036180878523737192, 0.0011556444223970175, 0.0054980777204036713, 0.0029752773698419333, 0.00079229299444705248, 0.0047667594626545906, 0.0029102861881256104, 0.0043638898059725761, 0.0018356008222326636, 0.0034571636933833361, 0.0036939310375601053, 0.0012597122695297003, 0.0020348047837615013, 0.0049055027775466442, 0.0026841701474040747, 0.0031502766069024801, 0.0021173986606299877, 0.0036001268308609724, 0.0027211564593017101, 0.0030474469531327486, 0.0022385765332728624, 0.0029796326998621225, 0.004400297999382019, 0.0033176701981574297, 0.001700299559161067, 0.0024647116661071777, 0.0020315500441938639, 0.0023642035666853189, 0.00249521154910326, 0.0019952240400016308, 0.00081732746912166476, 0.0026056105270981789, 0.0018721332307904959, 0.0024962513707578182, 0.0041148443706333637, 0.0038795783184468746, 0.004715905524790287, 0.0024125406052917242, 0.0012938262661918998, 0.0026934852357953787, 0.002771920757368207, 0.0028241958934813738, 0.0024023542646318674, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -4230, 12160, -17943, -17, 7973, -14530, -38827, -10008, -2484, 7910, -14707, -14053, 7469, -10986, -3296, -3684, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00017025481793098152, 0.00013671565102413297, 0.00019421086471993476, 0.00012352834164630622, 9.9884164228569716e-05, 0.00013854699500370771, 0.00010023837967310101, 0.0001125667622545734, 8.3535742305684835e-05, 8.0445468483958393e-05, 0.0001918355847010389, 0.0001159903040388599, 0.00010985590779455379, 8.0713245552033186e-05, 0.00012524843623396009, 0.00013329421926755458, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 10,47,19,-30,68,55,-39,56,-9,110,7,41,-36,48,-14,33,17,78,35,-67,-55,79,-14,71,53,47,46,56,-43,-50,-11,80,-29,8,-66,49,45,-127,-27,32,20,-31,61,2,-6,-57,-61,-10, 
  /* [1][0][][] */ -52,15,-89,-44,4,95,-57,23,-23,-37,-38,19,56,-23,-36,-32,-27,-25,2,16,-61,48,-101,-53,-45,-39,59,61,-16,-35,45,-40,12,-44,-31,57,4,-58,127,-36,-16,27,-45,-18,26,51,28,30, 
  /* [2][0][][] */ -14,-1,50,-12,-16,-69,21,6,84,70,-50,9,107,-46,127,70,-66,-7,-39,20,81,-79,-28,-95,-4,-33,19,-63,45,54,-40,15,21,-40,55,22,-68,25,-6,-44,23,36,53,-8,23,-74,90,-63, 
  /* [3][0][][] */ 36,1,-32,-28,37,126,13,-5,53,-49,22,-21,-58,14,11,55,-45,-70,27,-114,-21,-7,-21,-7,-44,97,127,66,-12,-52,32,34,61,-29,103,35,-33,-61,2,42,34,12,-11,-9,17,17,-5,-28, 
  /* [4][0][][] */ 96,-6,8,-48,88,92,65,-3,73,-20,-112,40,65,-41,3,-14,-79,-116,-13,-106,-19,29,-39,-44,-83,127,-96,125,-60,-48,14,94,44,-34,13,-15,-23,25,-17,38,-48,9,6,53,-34,96,-33,-48, 
  /* [5][0][][] */ 0,-13,-56,3,-11,51,28,-23,67,49,32,85,43,-16,37,-5,-44,127,-11,35,3,1,-61,-9,36,2,-65,-37,-19,26,19,-15,-43,2,45,8,-43,7,-88,11,83,-20,21,48,-16,9,-48,27, 
  /* [6][0][][] */ 58,16,22,59,-5,-29,113,-60,25,70,127,101,39,60,-54,38,32,-45,-52,72,72,-66,-36,89,-96,82,84,-2,118,42,-38,19,91,-55,-120,-2,85,33,17,18,-6,56,62,-18,72,125,42,-13, 
  /* [7][0][][] */ -103,-3,-25,32,-41,-46,20,46,80,112,-50,-69,-101,13,-20,-12,-68,98,-3,127,-50,32,30,34,-23,-83,-28,-73,23,42,-4,0,-28,22,21,-7,0,-51,125,10,8,47,20,-26,66,59,-26,-9, 
  /* [8][0][][] */ -25,-83,61,-77,59,-67,62,-34,-28,-117,21,12,-37,3,35,25,-11,0,-28,99,2,45,-25,33,72,-20,-58,-30,-115,-21,-64,-113,-2,-80,-1,80,-11,27,107,14,6,-2,62,127,-14,-74,-43,85, 
  /* [9][0][][] */ 20,-47,18,-83,39,79,-41,50,15,-46,-26,-27,21,-44,127,-23,-4,-110,48,41,-56,46,67,-35,-23,-84,-36,82,57,68,-39,-34,-46,32,-1,120,-31,-42,-58,-34,-36,-5,39,105,55,92,-75,10, 
  /* [10][0][][] */ -19,17,-27,-18,26,27,-70,-34,54,34,61,-10,-41,-7,58,-44,-73,127,7,58,1,-12,25,33,-37,38,4,97,35,2,-37,-13,71,9,-4,21,-3,-53,-39,12,-85,-16,25,-19,10,41,26,31, 
  /* [11][0][][] */ -49,57,-16,34,47,64,-7,12,6,13,-127,-78,76,19,-10,-63,-4,36,-27,-57,-8,-12,121,3,47,7,-21,48,-8,21,-11,54,21,-17,-41,-10,30,85,119,16,19,-31,60,1,-54,-10,97,1, 
  /* [12][0][][] */ -66,-5,34,19,-70,-58,13,0,-24,-34,-125,13,71,-108,14,20,54,105,102,-127,-16,42,-47,-76,-7,-28,38,-24,10,15,-19,81,69,81,44,-32,-64,-31,43,5,-46,1,66,-1,34,-20,-39,-35, 
  /* [13][0][][] */ -59,-127,-56,-117,-1,37,76,14,-121,32,127,-74,45,53,120,-7,118,24,15,-97,93,-93,127,7,-91,8,-27,10,-53,-116,-113,17,46,-7,-73,62,15,-60,99,-63,-14,52,66,30,44,-32,112,-78, 
  /* [14][0][][] */ 50,20,-54,-4,-43,11,-83,-25,-29,60,61,34,-18,-50,9,-56,41,-110,27,-7,104,-60,27,9,-12,127,-86,4,-46,-36,-92,3,123,55,92,-27,-106,8,-14,78,-25,-49,112,-23,-63,-38,-59,49, 
  /* [15][0][][] */ -51,6,31,28,86,0,8,23,18,72,-14,50,48,-4,-24,-19,4,38,-7,-39,32,-39,-41,-40,39,-56,-44,57,-34,5,22,11,-57,-8,127,-11,-72,15,54,-16,-42,-27,10,0,-24,-15,-11,1, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0072358297184109688, 0.005810414906591177, 0.0082539618015289307, 0.0052499542944133282, 0.0042450767941772938, 0.0058882473967969418, 0.0042601311579346657, 0.0047840871848165989, 0.0035502689424902201, 0.0034189324360340834, 0.0081530120223760605, 0.0049295877106487751, 0.0046688760630786419, 0.0034303127322345972, 0.0053230584599077702, 0.0056650042533874512, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 14685, -541, 13401, -306, 16850, -3039, 34540, 638, 11010, 29932, 4361, 27266, 1253, 12454, 27327, 22242, 959, -689, 702, 50487, -143, 23193, 1553, 17147, 19994, 41060, -463, -1711, 930, 13434, 21553, -40, 1417, -3595, 3468, 12893, 9560, 34445, 1826, 20236, 28286, -663, 882, 8459, 3246, 1423, 27786, 24868, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.2239723016973585e-05, 0.00013656487863045186, 0.00010508798732189462, 0.0001158398445113562, 9.6651245257817209e-05, 9.0129287855233997e-05, 6.5832435211632401e-05, 0.00022326412727124989, 0.00010088986891787499, 7.3667120886966586e-05, 5.4241390898823738e-05, 7.725452451268211e-05, 6.7929242504760623e-05, 0.00010391746036475524, 6.4360880060121417e-05, 0.00012044428149238229, 9.2217116616666317e-05, 6.8930195993743837e-05, 0.00013834777928423136, 4.4280197471380234e-05, 6.4201194618362933e-05, 5.5283791880356148e-05, 0.00012027833872707561, 0.00010567866411292925, 4.9134570872411132e-05, 5.8341745898360386e-05, 6.9933958002366126e-05, 5.1417893701000139e-05, 0.00032675670809112489, 0.00012382559361867607, 7.5492098403628916e-05, 0.00031683713314123452, 9.8326330771669745e-05, 0.00016171974129974842, 9.344975114800036e-05, 7.1220230893231928e-05, 9.4709437689743936e-05, 5.0745609769364819e-05, 8.9463377662468702e-05, 0.00012266587873455137, 4.6576369641115889e-05, 0.00029480640660040081, 0.00026868446730077267, 0.00010871157428482547, 0.0001339713780907914, 6.4819301769603044e-05, 7.7543518273159862e-05, 5.0342714530415833e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -77,51,-127,127,-96,112,-63,36,-85,-61,48,-48,83,-116,-6,-40,69,87,61,-127,72,-120,56,-94,-127,-35,54,114,-79,-68,-57,81,61,-88,62,-98,-105,-115,85,-42,-23,-61,71,-20,106,51,-85,-75, -70,39,-58,127,-89,118,-15,94,-115,-76,89,-66,69,-127,-47,-50,103,87,127,-117,114,-127,83,-127,-116,-97,46,127,29,-79,-89,56,87,-127,82,-127,-127,-127,115,-43,-101,108,85,-39,-55,78,-97,-82, -61,42,-2,58,-4,81,-57,67,-36,-27,69,-73,7,-73,-17,-29,48,51,85,-45,86,-109,33,-73,-121,-44,15,36,65,-44,-57,95,30,-80,41,-23,-61,-88,59,-62,-100,-40,39,-10,-100,45,-64,-89, 
  /* [0][1][][] */ -118,76,-43,77,-106,111,-127,127,-127,-93,85,-93,126,-102,-82,-111,113,101,-44,-95,87,-94,110,-66,-120,-90,110,72,-127,-42,-110,127,99,48,111,-109,-53,-108,93,-42,-127,-76,81,-78,127,78,-105,-127, -127,127,-78,65,-124,127,-114,83,-126,-127,127,-127,127,-74,-127,-127,127,127,-63,-107,127,-114,127,-88,-85,-127,127,76,5,-66,-127,71,127,46,127,-107,-114,-114,127,-88,-124,127,127,-127,-81,127,-127,-116, -71,87,-76,39,-127,67,-95,94,-67,-33,95,-93,73,-11,-44,-43,109,73,-51,-29,72,-97,77,-27,-96,-77,67,50,90,-16,-87,110,42,33,76,-36,-10,-42,65,-45,-64,-74,41,-74,-112,67,-27,-99, 
  /* [0][2][][] */ -35,33,24,89,-10,97,-58,19,-56,-48,25,-38,52,-48,-33,-22,60,38,-56,-51,44,-36,28,-42,-107,-40,39,7,-88,-82,-35,49,36,81,53,-52,-20,-42,35,-59,-110,-48,28,-12,87,43,11,-55, -88,42,-15,92,-49,61,-30,24,-41,-55,38,-89,70,-59,-57,-17,61,42,-72,-42,56,-52,47,-62,-81,-66,52,26,-11,-127,-65,48,40,63,75,-41,-58,-23,23,-127,-63,70,40,-32,-43,80,6,-47, -52,28,-46,64,-35,31,-69,57,-33,-5,52,-58,36,-20,-37,-1,41,29,-37,-3,50,-19,21,-20,-91,-36,25,18,55,-49,-70,-3,25,89,42,-15,5,-6,8,-69,12,-22,17,-13,-76,63,68,-59, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0039201881736516953, 0.0058040074072778225, 0.0044662393629550934, 0.0049231932498514652, 0.0041076778434216976, 0.0038304945919662714, 0.0027978783473372459, 0.0094887251034379005, 0.0042878193780779839, 0.0031308527104556561, 0.002305258996784687, 0.0032833172008395195, 0.0028869928792119026, 0.004416491836309433, 0.0027353372424840927, 0.005118881817907095, 0.0039192275144159794, 0.0029295331332832575, 0.0058797807432711124, 0.0018819083925336599, 0.0027285506948828697, 0.0023495610803365707, 0.0051118293777108192, 0.0044913431629538536, 0.0020882191602140665, 0.0024795241188257933, 0.0029721932951360941, 0.0021852604113519192, 0.013887159526348114, 0.0052625876851379871, 0.0032084141857922077, 0.013465577736496925, 0.0041788690723478794, 0.0068730888888239861, 0.0039716144092381001, 0.0030268598347902298, 0.0040251510217785835, 0.0021566883660852909, 0.0038021935615688562, 0.0052132997661828995, 0.0019794956315308809, 0.012529272586107254, 0.011419089511036873, 0.0046202419325709343, 0.0056937835179269314, 0.0027548202779144049, 0.0032955994829535484, 0.0021395653020590544, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2500, -1203, 914, -1879, 4160, -718, 5365, -3178, 1587, 888, 2255, 3485, 588, -569, 541, 6992, -2070, 3202, 6941, 883, -968, 2412, -1049, 8317, 1748, 2581, 1428, -960, 8650, -237, 2315, -2245, -691, 3072, -1693, 1571, 2619, 945, 397, 7906, 1977, 13390, -4427, 1875, 7039, 436, 2995, 2652, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00018339404778089374, 0.00028530717827379704, 0.00027616406441666186, 0.0002370233996771276, 0.00018834543880075216, 0.00019755194080062211, 0.00014757970348000526, 0.00017791896243579686, 0.00021346185531001538, 0.00023595719540026039, 0.00020622937881853431, 0.00019932910799980164, 0.0002332156291231513, 0.00020100224355701357, 0.00023199370480142534, 0.00013516357284970582, 0.00021278669009916484, 0.00023168715415522456, 0.00012435231474228203, 0.00023209127539303154, 0.00024455538368783891, 0.00020864015095867217, 0.00020101245900150388, 0.0001021919451886788, 0.00024385066353715956, 0.00018689291027840227, 0.00023082701954990625, 0.00022476243611890823, 0.00010908466356340796, 0.00028972173458896577, 0.00020060637325514108, 0.00014235705020837486, 0.00019818916916847229, 0.00024477220722474158, 0.00017619541904423386, 0.00027565527125261724, 0.00016992090968415141, 0.00026262702886015177, 0.00020573867368511856, 0.00011048577289329842, 0.00024686090182512999, 7.5669384386856109e-05, 0.00012827561295125633, 0.00017625436885282397, 0.00012050472287228331, 0.00018849634216167033, 0.00019038998289033771, 0.00019850062381010503, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 61,17,127,-41,67,98,-64,-61, 
  /* [1][0][][] */ 12,-86,-127,11,54,35,28,-2, 
  /* [2][0][][] */ -127,-31,-31,-27,57,22,-60,-49, 
  /* [3][0][][] */ 44,72,127,-76,-9,-122,-13,3, 
  /* [4][0][][] */ -127,25,-57,-33,63,21,-26,-59, 
  /* [5][0][][] */ -102,20,-51,-1,4,38,-83,-127, 
  /* [6][0][][] */ -42,-127,-108,36,104,3,9,42, 
  /* [7][0][][] */ -54,-127,-86,-64,-57,-46,26,80, 
  /* [8][0][][] */ 94,32,3,7,127,-50,-122,16, 
  /* [9][0][][] */ -32,45,-58,80,-59,-50,127,-35, 
  /* [10][0][][] */ -27,127,38,58,124,-13,-14,66, 
  /* [11][0][][] */ -79,-31,-11,-2,-65,104,127,-9, 
  /* [12][0][][] */ 51,37,-127,39,-23,-16,-66,-9, 
  /* [13][0][][] */ 64,-36,-108,18,2,-127,-36,-34, 
  /* [14][0][][] */ 13,-73,53,1,127,-112,-57,23, 
  /* [15][0][][] */ -46,-47,4,127,59,69,-58,32, 
  /* [16][0][][] */ 103,15,-32,11,82,-100,-127,-22, 
  /* [17][0][][] */ 60,127,67,79,49,70,32,-92, 
  /* [18][0][][] */ 24,-32,6,4,127,19,35,11, 
  /* [19][0][][] */ 4,127,39,9,-114,28,33,-40, 
  /* [20][0][][] */ -41,38,38,-127,8,39,-20,110, 
  /* [21][0][][] */ -30,64,47,-127,25,29,-22,113, 
  /* [22][0][][] */ -71,-75,-82,14,-124,127,120,-20, 
  /* [23][0][][] */ 110,52,-127,25,11,-68,-107,-27, 
  /* [24][0][][] */ -60,13,7,-5,-27,63,-119,127, 
  /* [25][0][][] */ -107,-67,-127,17,-40,-78,74,96, 
  /* [26][0][][] */ 47,-12,-43,-40,122,-17,127,-45, 
  /* [27][0][][] */ 127,-73,26,90,-1,29,-22,93, 
  /* [28][0][][] */ 45,49,45,-1,127,-65,55,-25, 
  /* [29][0][][] */ -26,-4,-29,-70,-76,6,127,-42, 
  /* [30][0][][] */ 53,-127,-47,-59,-127,10,18,-59, 
  /* [31][0][][] */ 10,31,-25,-19,-127,6,-17,-5, 
  /* [32][0][][] */ 31,-66,-55,67,-16,-73,106,-127, 
  /* [33][0][][] */ 51,127,40,40,36,-13,-10,-21, 
  /* [34][0][][] */ -127,-39,119,8,-31,97,76,5, 
  /* [35][0][][] */ -27,83,127,-16,-65,-67,-38,31, 
  /* [36][0][][] */ -94,-8,120,-23,-23,127,82,11, 
  /* [37][0][][] */ -24,-92,-5,-127,-32,-66,79,46, 
  /* [38][0][][] */ 44,-14,81,-55,63,53,-127,10, 
  /* [39][0][][] */ -2,110,-127,-24,-51,-24,-19,78, 
  /* [40][0][][] */ 58,-49,24,25,4,4,17,127, 
  /* [41][0][][] */ -35,64,127,-21,63,61,-24,26, 
  /* [42][0][][] */ 62,-124,-127,-22,-123,-6,11,-100, 
  /* [43][0][][] */ -37,-105,41,-106,127,-65,20,35, 
  /* [44][0][][] */ 20,126,127,41,1,59,-64,25, 
  /* [45][0][][] */ -33,54,7,79,-122,59,-127,23, 
  /* [46][0][][] */ -36,-31,51,59,-127,-102,-35,3, 
  /* [47][0][][] */ -20,71,52,-97,-127,72,-20,70, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0022899264004081488, 0.0035624518059194088, 0.0034482872579246759, 0.0029595624655485153, 0.0023517513182014227, 0.0024667070247232914, 0.0018427351024001837, 0.0022215624339878559, 0.002665364183485508, 0.0029462494421750307, 0.0025750568602234125, 0.0024888974148780107, 0.0029120172839611769, 0.0025097888428717852, 0.0028967598918825388, 0.0016877027228474617, 0.0026569338515400887, 0.0028929321561008692, 0.0015527092618867755, 0.0028979780618101358, 0.0030536095146089792, 0.0026051586028188467, 0.0025099164340645075, 0.0012760066892951727, 0.0030448101460933685, 0.0023336145095527172, 0.0028821921441704035, 0.0028064674697816372, 0.0013620717218145728, 0.0036175735294818878, 0.0025048458483070135, 0.0017775230808183551, 0.0024746637791395187, 0.0030563168693333864, 0.0022000416647642851, 0.0034419342409819365, 0.0021216957829892635, 0.0032792587298899889, 0.0025689296890050173, 0.0013795664999634027, 0.003082397161051631, 0.00094483612338081002, 0.0016016970621421933, 0.002200777642428875, 0.0015046668704599142, 0.0023536356166005135, 0.0023772802669554949, 0.0024785527493804693, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -629, 2648, 24200, 1406, 7789, -13455, 3823, -11969, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.3923234089743346e-05, 0.00012291267921682447, 0.00012346595758572221, 0.00010327580093871802, 0.00011108981561847031, 0.00014315106091089547, 9.0875655587296933e-05, 8.1871025031432509e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -37,-48,-3,-78,13,-10,84,92,-92,-72,-37,5,-51,20,-48,38,-83,14,7,127,68,4,24,91,81,87,45,15,-95,-64,-80,-44,-30,104,30,-80,41,-3,94,-14,27,8,3,-91,39,-43,-33,-96, 
  /* [1][0][][] */ -40,45,-14,-19,-77,64,-25,-39,-42,74,-10,18,46,34,-52,-5,-16,-117,76,-51,127,24,-59,32,73,10,-77,59,47,-22,65,37,-44,-18,14,-34,7,104,-20,-18,48,30,-12,3,106,0,-29,55, 
  /* [2][0][][] */ -44,-37,119,9,88,-38,-27,30,-38,-9,-14,50,9,-56,-54,-127,-49,-104,-17,22,-107,19,-45,-30,-41,22,-6,-62,-50,13,-35,-10,-15,-11,46,-13,28,-49,-52,20,35,-47,35,-47,-45,-51,-62,-43, 
  /* [3][0][][] */ 42,18,64,-10,25,-41,25,77,-70,-33,57,-32,-85,53,-7,33,60,34,-40,28,-109,-81,119,4,5,6,-60,-46,-41,63,110,-90,2,-127,-23,20,10,-75,-33,65,-81,-79,75,-13,-113,-87,61,-26, 
  /* [4][0][][] */ 14,-17,67,-31,8,-4,-8,-1,-61,-14,-26,6,55,-84,40,-105,38,58,-12,-42,11,4,10,10,-10,-8,77,-18,24,28,-127,-33,-30,-26,7,17,45,-8,31,-2,-56,-3,-74,38,-27,-107,6,24, 
  /* [5][0][][] */ 16,-44,60,34,38,21,19,5,-79,-20,-43,23,24,-2,5,-49,89,75,5,-25,86,-63,127,-92,-27,49,-10,33,21,12,-38,-49,-24,-47,-34,11,40,23,57,5,-70,20,35,20,42,-6,80,-10, 
  /* [6][0][][] */ -50,45,-111,68,42,17,18,14,-15,-9,53,-72,-82,-16,-24,30,-106,33,-3,65,8,12,-73,-85,-30,-21,8,45,-31,-25,-39,2,29,64,-32,-24,-21,-13,66,3,60,53,-98,-61,-25,127,-43,-37, 
  /* [7][0][][] */ 49,66,-88,33,1,73,103,58,38,62,-100,8,-32,-7,-75,-54,31,30,119,111,75,-5,105,39,127,80,-36,96,-67,32,8,-80,7,-63,-30,40,-13,82,-58,87,-69,58,-5,-69,69,-23,47,-2, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0039917374961078167, 0.0052237887866795063, 0.0052473028190433979, 0.0043892213143408298, 0.0047213169746100903, 0.0060839196667075157, 0.0038622152060270309, 0.0034795184619724751, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 99, 8173, -493, 1810, 123, -1261, 2546, -1683, -3774, -418, -7531, -158, 797, -767, -1806, 2457, 8894, 1142, -599, -2974, -10438, 3233, 12933, -3287, -4297, -626, 4547, -6225, -1092, 2888, -10506, 7397, 5907, 352, 4064, 923, -9, -352, 11566, 462, 8174, -1397, 4110, 7236, -817, 5919, -1464, -2861, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00035616400418803096, 0.00016456481534987688, 0.00067204516381025314, 0.00025049762916751206, 0.00018235703464597464, 0.00020197153207845986, 0.00019420881289988756, 0.00028132219449616969, 0.00012598921603057534, 0.00024148882948793471, 0.00018557625298853964, 0.0017135590314865112, 0.00045817162026651204, 0.00055109104141592979, 0.00043279302190057933, 0.00093141035176813602, 0.00013239301915746182, 6.7831351771019399e-05, 0.00024262309307232499, 0.00032029883004724979, 0.00020769743423443288, 0.00025730446213856339, 0.00011195713886991143, 0.00043107621604576707, 0.00024501158623024821, 0.00048253641580231488, 0.00050024496158584952, 0.0001970463345060125, 0.00028163706883788109, 0.00045732338912785053, 0.00012401973071973771, 0.00014251850370783359, 0.00012849365884903818, 0.00024368851154576987, 0.00017636148550081998, 0.00029921453096903861, 0.001621468341909349, 0.0003007992054335773, 0.00011727757373591885, 0.00016581172531004995, 0.00017445108096580952, 0.00017227510397788137, 0.00028433240368030965, 0.00016226021398324519, 0.00056417618179693818, 9.2698603111784905e-05, 6.2481558416038752e-05, 0.0001720793079584837, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 19,-34,9,-3,-31,-107,-32,44,-31,9,-8,13,56,0,-17,1,85,30,33,-1,18,-33,-54,11,7,-18,12,-35,-57,69,-9,-120,45,-14,-59,-65,-15,-46,2,-25,-24,41,-8,-15,-7,90,127,-13, -127,-93,-25,127,-78,81,-102,127,26,34,10,-2,62,19,-20,-42,-24,55,32,-5,31,110,8,127,127,-30,-37,50,58,-127,-12,-92,58,-9,-31,-127,22,19,-49,-37,-127,0,-106,-126,45,71,53,127, -28,-10,11,6,-22,59,35,59,-3,-30,-3,3,-25,-5,-14,4,-47,34,-63,-31,20,-34,127,17,-41,3,14,29,13,28,1,-8,-3,-20,-42,80,3,15,24,91,25,-10,16,-34,-6,53,-11,2, 
  /* [0][1][][] */ -4,-23,-27,-12,27,-114,123,-105,-17,13,-1,39,127,18,3,-32,-18,-18,24,46,66,-80,47,4,-63,127,-70,-26,127,-108,61,-127,-41,1,-88,45,5,-81,-49,-4,109,127,2,-127,-61,-52,-4,97, 75,-127,127,-14,127,43,-77,-75,32,127,127,-127,-96,127,127,127,127,127,112,127,127,93,-10,7,93,-102,-127,117,35,108,127,34,-127,127,127,118,-127,127,-127,-127,42,26,-127,-41,127,-127,-17,90, 22,33,-39,-20,-34,127,-127,96,84,-82,6,64,-54,15,20,-50,26,16,-127,24,38,-127,-43,-5,59,-17,-31,127,-61,-47,28,-14,-28,7,87,-48,31,-8,0,-87,108,-8,30,53,-53,94,114,-74, 
  /* [0][2][][] */ 3,44,7,-40,11,-85,-11,8,-12,-2,19,12,-20,-14,-2,2,-51,27,15,-43,11,-25,78,-15,-76,5,42,-24,13,-5,15,44,-10,-11,-74,44,6,-12,3,38,-51,-13,5,-8,-30,13,-22,26, 34,-4,-36,-46,38,7,112,-78,127,-24,18,16,-72,-22,-24,-62,-21,99,13,19,17,21,-32,-31,-39,59,66,-28,-86,4,-22,22,-30,-3,-29,-27,61,-15,-6,111,-125,-18,-9,36,26,57,4,-110, 8,40,3,-37,-2,-6,-3,-36,-5,-19,28,16,4,-12,-2,21,51,47,-30,-28,-2,-30,-39,-16,47,-16,17,-35,-7,-5,-3,41,24,-28,-28,-73,1,0,28,21,-21,-29,16,6,-25,20,72,-51, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015136970207095146, 0.0069940043613314629, 0.028561919927597046, 0.010646149516105652, 0.0077501735650002956, 0.0085837896913290024, 0.0082538742572069168, 0.011956192553043365, 0.0053545418195426464, 0.010263275355100632, 0.0078869909048080444, 0.072826258838176727, 0.019472293555736542, 0.023421367630362511, 0.018393702805042267, 0.039584938436746597, 0.0056267031468451023, 0.0028828324284404516, 0.010311481542885303, 0.013612700626254082, 0.0088271405547857285, 0.010935439728200436, 0.0047581782564520836, 0.018320739269256592, 0.010412991978228092, 0.020507797598838806, 0.02126041054725647, 0.0083744693547487259, 0.01196957565844059, 0.019436243921518326, 0.005270838737487793, 0.0060570361092686653, 0.0054609803482890129, 0.010356761515140533, 0.0074953627772629261, 0.012716617435216904, 0.068912401795387268, 0.012783966027200222, 0.0049842968583106995, 0.0070469980128109455, 0.0074141710065305233, 0.0073216920718550682, 0.012084127403795719, 0.0068960590288043022, 0.023977486416697502, 0.0039396905340254307, 0.0026554663199931383, 0.0073133702389895916, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2718, 3748, 9395, 3492, 894, -969, 3516, 12344, 2791, -477, 3462, -2342, 24634, -1841, 1891, 22903, -311, 2876, 147, 2395, 2669, 5102, 339, 17714, 6487, 2972, 15298, 1483, 4474, 5121, 840, 1230, 1269, 1026, -138, 340, -2434, -315, 1882, 1995, 4687, 1608, 4275, 3828, 6521, 2166, 2325, 5551, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00027212378336116672, 0.00022910113329999149, 0.00010067229595733806, 0.00013526304974220693, 0.00029810750856995583, 0.00032789222314022481, 0.00022061781783122569, 7.5512580224312842e-05, 0.00020768980903085321, 0.00033011715277098119, 0.00022714977967552841, 0.00022557281772606075, 4.327955684857443e-05, 0.00020257916185073555, 0.00025343510787934065, 4.9103047786047682e-05, 0.00034137335023842752, 0.00019027078815270215, 0.00035677370033226907, 0.00026301605976186693, 0.00027180335018783808, 0.00015557199367322028, 0.00037665219861082733, 5.8563291531754658e-05, 0.00013087195111438632, 0.00018797093071043491, 6.5581916715018451e-05, 0.00031667982693761587, 0.00017503114941064268, 0.00014788070984650403, 0.00042951144860126078, 0.00037188210990279913, 0.00018886887119151652, 0.00029959934181533754, 0.00033683943911455572, 0.00038501774542964995, 0.00022245933359954506, 0.00034629052970558405, 0.00025218792143277824, 0.00026229003560729325, 0.00016176918870769441, 0.00029189072665758431, 0.00018051172082778066, 0.00020790121925529093, 0.00012515400885604322, 0.000283212517388165, 0.00030972444801591337, 0.00015234210877679288, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 54,127,-67,-47,16,74,0,50, 
  /* [1][0][][] */ 54,-71,38,-127,-51,60,-85,-28, 
  /* [2][0][][] */ -31,127,110,38,104,-18,58,9, 
  /* [3][0][][] */ 97,55,-61,72,12,-106,-127,-15, 
  /* [4][0][][] */ -29,12,19,-55,-15,70,127,22, 
  /* [5][0][][] */ 19,113,-127,-58,46,123,47,4, 
  /* [6][0][][] */ -7,127,51,43,82,10,21,-71, 
  /* [7][0][][] */ 127,-18,-17,30,51,21,110,21, 
  /* [8][0][][] */ 61,127,41,83,107,69,78,-95, 
  /* [9][0][][] */ 71,119,-127,-77,4,115,14,91, 
  /* [10][0][][] */ -72,-40,34,-55,1,-31,-56,127, 
  /* [11][0][][] */ 30,-120,-127,-31,34,-9,41,-10, 
  /* [12][0][][] */ -28,-119,-121,-21,-127,35,-73,29, 
  /* [13][0][][] */ 1,18,-113,103,-127,-43,-14,-26, 
  /* [14][0][][] */ -55,-40,-127,-1,37,-14,-18,-55, 
  /* [15][0][][] */ 5,-112,-127,18,-119,-26,-15,5, 
  /* [16][0][][] */ 127,-57,-10,65,-85,22,30,115, 
  /* [17][0][][] */ -23,114,127,-25,-39,-19,-38,-20, 
  /* [18][0][][] */ -4,-127,68,123,13,-57,60,-89, 
  /* [19][0][][] */ 127,-37,-60,32,-102,-2,30,88, 
  /* [20][0][][] */ -29,-127,87,82,-16,-88,-1,-74, 
  /* [21][0][][] */ -6,-62,-15,-27,127,5,58,26, 
  /* [22][0][][] */ -127,33,-64,48,46,46,-100,-100, 
  /* [23][0][][] */ -95,-46,55,-9,-79,127,97,-30, 
  /* [24][0][][] */ -59,63,13,-19,-27,127,120,23, 
  /* [25][0][][] */ -43,-103,-127,-57,-49,-26,-24,-60, 
  /* [26][0][][] */ -19,73,-19,127,-102,31,-45,-4, 
  /* [27][0][][] */ 22,-115,28,72,5,-53,7,-127, 
  /* [28][0][][] */ 31,125,54,55,127,-24,31,-79, 
  /* [29][0][][] */ 100,19,-23,-28,91,-127,-102,-5, 
  /* [30][0][][] */ 35,-17,10,-127,11,-43,5,-34, 
  /* [31][0][][] */ 24,-39,5,58,-3,20,14,127, 
  /* [32][0][][] */ -115,-74,-5,-59,-95,127,89,53, 
  /* [33][0][][] */ -36,36,43,-24,59,127,-108,73, 
  /* [34][0][][] */ 74,127,-82,-29,37,45,-58,65, 
  /* [35][0][][] */ 12,-127,34,109,-27,-44,55,-65, 
  /* [36][0][][] */ -19,-28,-83,-7,-127,-56,-5,13, 
  /* [37][0][][] */ -63,-127,71,89,-58,-113,-22,-69, 
  /* [38][0][][] */ -68,14,75,-99,-127,-109,-79,99, 
  /* [39][0][][] */ 77,-127,75,35,-4,-99,-22,-96, 
  /* [40][0][][] */ 5,46,4,40,-127,-19,-70,3, 
  /* [41][0][][] */ 122,127,-67,-108,67,32,4,15, 
  /* [42][0][][] */ -13,-47,-15,14,127,23,63,10, 
  /* [43][0][][] */ 127,35,67,22,-70,-27,50,88, 
  /* [44][0][][] */ 61,25,-55,35,100,-127,-125,26, 
  /* [45][0][][] */ 51,21,19,22,62,-127,-7,-61, 
  /* [46][0][][] */ 55,-32,-7,127,35,52,19,71, 
  /* [47][0][][] */ -72,-91,37,64,-53,23,127,-75, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0037080063484609127, 0.0031217720825225115, 0.0013717783149331808, 0.0018431179923936725, 0.0040620649233460426, 0.0044679166749119759, 0.0030061770230531693, 0.0010289476485922933, 0.0028300175908952951, 0.0044982340186834335, 0.0030951825901865959, 0.0030736946500837803, 0.00058973481645807624, 0.002760379109531641, 0.003453351091593504, 0.00066908670123666525, 0.0046516130678355694, 0.0025926630478352308, 0.0048614609986543655, 0.0035839027259498835, 0.0037036400754004717, 0.0021198512986302376, 0.0051323287189006805, 0.00079799367813393474, 0.0017832840094342828, 0.0025613247416913509, 0.00089363066945225, 0.0043151346035301685, 0.002385005122050643, 0.0020150484051555395, 0.0058525982312858105, 0.0050673307850956917, 0.0025735602248460054, 0.0040823929011821747, 0.0045898333191871643, 0.005246319342404604, 0.0030312698800116777, 0.0047186152078211308, 0.0034363565500825644, 0.0035740097519010305, 0.0022042952477931976, 0.0039773541502654552, 0.0024596843868494034, 0.0028328984044492245, 0.0017053704941645265, 0.0038591031916439533, 0.004220359493046999, 0.0020758402533829212, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7957, 15157, -4820, 6924, -2121, 4876, -12061, -17912, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00024184255744330585, 0.00012476333358790725, 0.00013701696298085153, 0.00010841469338629395, 0.00017204855976160616, 0.00012925599003210664, 0.00020539404067676514, 0.00015110443928278983, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -40,15,27,4,-34,-13,2,6,-39,2,-65,-57,-23,-58,-8,-33,42,-41,40,48,-22,28,-41,12,3,-32,54,-14,-3,-21,21,4,76,33,41,-127,15,-9,-22,-29,6,-18,44,46,38,-1,30,1, 
  /* [1][0][][] */ 2,19,56,-28,-16,47,-50,-23,2,25,-12,-90,8,86,-21,66,-21,19,-29,-53,12,-63,-23,30,-71,-15,-5,-106,-27,-18,23,-52,50,71,-46,-2,127,-33,-4,47,-37,30,-78,-32,106,-12,-35,-22, 
  /* [2][0][][] */ -8,-48,-60,19,-18,55,30,3,-8,45,5,32,54,-95,20,-50,39,-95,24,25,-24,61,-8,26,-20,57,-25,-73,7,-2,22,-77,-39,-90,33,-28,109,29,-7,-62,4,27,85,27,127,25,16,21, 
  /* [3][0][][] */ 1,23,-74,46,16,-35,-71,-111,21,-21,-46,0,2,27,36,81,-18,25,-44,27,-5,-111,21,-63,-79,-15,127,-12,-39,2,-61,14,-7,-84,8,-9,-18,-48,-27,105,-59,-22,-2,21,42,7,-47,44, 
  /* [4][0][][] */ -22,-56,-8,10,27,-35,-11,-7,25,-28,64,-69,5,29,11,14,-13,-28,9,-17,1,-48,5,-22,14,-7,39,49,34,19,-12,19,-7,-5,3,-2,-64,87,33,-24,33,-24,-16,-24,-72,14,127,7, 
  /* [5][0][][] */ 44,-25,-8,19,35,-39,40,-127,30,-38,-12,116,-74,69,22,-62,-8,-98,24,4,-44,59,-48,-42,-72,81,-30,-2,-11,49,-47,-35,17,45,35,5,-36,-3,-49,-48,9,-51,-47,6,-31,59,92,25, 
  /* [6][0][][] */ 49,-31,24,-11,-33,-17,-28,19,-42,2,-38,127,-43,-35,-6,63,12,45,11,28,26,-84,-32,17,18,41,-68,1,14,-37,16,33,5,15,-15,0,20,12,-5,-9,-11,-19,41,62,0,-33,77,-18, 
  /* [7][0][][] */ -30,9,-8,72,31,8,9,30,18,-7,74,-2,120,94,54,46,43,48,-10,2,36,-16,-72,-29,17,-6,-28,55,31,-17,-36,-9,41,6,43,-88,-59,37,55,49,-32,24,78,127,-59,-23,-99,60, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010278308764100075, 0.0053024417720735073, 0.0058232205919921398, 0.0046076243743300438, 0.0073120635934174061, 0.0054933791980147362, 0.0087292464450001717, 0.0064219385385513306, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 12043, 8360, 3315, -2373, -31, -2031, 352, 30631, 2526, 6257, 4771, 65136, -156, 5144, -301, 10015, -3101, 16586, -2678, 7642, 10631, -42, 2654, -8203, 10916, 1645, -774, 12084, -1236, -3686, -12171, 7528, 1584, 765, -3576, 7339, -8319, 7064, -221, 15815, -1290, -2428, 5090, 1607, 1701, 561, 492, -2019, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00010946908150799572, 9.1514149971771985e-05, 0.00017324952932540327, 0.00015254739264491946, 0.00084950635209679604, 0.0001837525051087141, 0.00011112741776742041, 0.00011550643830560148, 0.00016865227371454239, 0.00010184224811382592, 7.8815472079440951e-05, 4.4626682210946456e-05, 8.8701795903034508e-05, 5.1651095418492332e-05, 0.00029169462504796684, 0.00024722886155359447, 0.00010077581828227267, 0.00034876534482464194, 0.00011579541023820639, 0.00014678896695841104, 7.5037518399767578e-05, 0.00047608924796804786, 0.00012032064114464447, 0.00022986876138020307, 0.00013080389180686325, 5.1243496272945777e-05, 6.6077052906621248e-05, 0.00010051335993921384, 0.00013234985817689449, 0.00077675783541053534, 0.00023355105076916516, 8.9546978415455669e-05, 0.00010918633051915094, 0.00013746279000770301, 0.00015869970957282931, 5.5915643315529451e-05, 0.00010216153168585151, 5.9607617004076019e-05, 9.6902760560624301e-05, 6.7508204665500671e-05, 0.00012723510735668242, 0.00015627041284460574, 6.8393906985875219e-05, 7.8076140198390931e-05, 6.955420394660905e-05, 0.00031731161288917065, 7.8002252848818898e-05, 0.00016609441081527621, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -20,-127,-28,-3,127,-55,94,-38,-97,-71,-6,-70,120,64,89,-119,74,-28,16,-38,-74,127,26,32,-28,74,50,-29,92,-64,33,-12,-101,-80,69,58,6,75,114,-50,-127,-10,36,79,49,-127,81,108, -33,-122,-79,65,-94,111,86,-49,-82,15,75,-119,127,101,122,-85,-81,-80,60,-40,-54,108,-58,87,-86,87,97,-127,105,-43,5,-96,-21,-86,98,90,119,125,127,-44,-119,-56,76,93,79,107,84,104, 0,-79,-69,112,-47,-27,23,0,69,8,46,-83,11,61,-45,-7,-90,-34,54,-5,-10,33,-91,-31,-80,43,30,-79,47,63,115,-64,34,-9,6,31,79,87,41,2,-30,90,74,40,40,23,12,-88, 
  /* [0][1][][] */ -81,-116,-8,-55,-91,-67,99,-118,-127,-127,110,-97,102,64,-117,-81,127,-127,-61,-72,-104,109,1,25,-31,110,81,-52,-103,-70,23,-40,-80,-127,-127,70,46,120,-3,-93,68,-22,72,127,63,106,114,-118, -127,-115,-127,-85,-38,127,127,-127,75,36,127,-127,122,127,75,-127,75,-111,-127,-127,-127,123,-127,127,-115,127,127,-111,-127,127,-9,-127,-127,-108,54,127,127,127,-25,-127,84,-78,127,120,127,-14,127,127, -48,-73,-103,127,69,-54,56,-34,61,14,21,-53,16,62,83,-49,-11,1,-2,-60,-83,34,-101,-50,-127,64,48,-87,-44,54,127,-87,-38,6,75,85,82,77,-36,-61,49,127,74,23,55,-44,38,46, 
  /* [0][2][][] */ -93,-26,15,22,-33,-17,35,-37,24,-44,31,-43,12,38,-35,1,-87,-43,117,-45,-24,31,-37,-2,-5,46,59,-13,29,58,3,18,34,-74,-34,48,17,13,-67,-28,20,-11,27,41,32,54,20,-73, -85,-38,-36,-62,106,57,54,-48,73,10,-41,-64,13,45,-127,-56,46,-10,59,-84,-59,9,-29,63,-55,53,71,-48,25,7,-23,-34,-43,-32,-52,71,17,24,-118,-47,23,-32,84,72,65,-113,27,-2, -9,-40,-55,-17,2,-18,15,-28,-83,9,-3,-16,4,8,28,-15,50,28,1,-68,-28,18,-22,-50,-42,24,30,-21,-1,-52,67,-21,-39,7,32,65,26,30,-63,-1,7,65,28,33,43,-22,9,50, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0046524358913302422, 0.0038893513847142458, 0.0073631047271192074, 0.0064832642674446106, 0.036104019731283188, 0.0078094811178743839, 0.0047229151241481304, 0.004909023642539978, 0.0071677216328680515, 0.0043282955884933472, 0.0033496574033051729, 0.0018966338830068707, 0.0037698263768106699, 0.0021951715461909771, 0.012397021055221558, 0.01050722599029541, 0.0042829723097383976, 0.014822526834905148, 0.0049213049933314323, 0.0062385308556258678, 0.0031890943646430969, 0.020233793184161186, 0.0051136272959411144, 0.0097694220021367073, 0.0055591650307178497, 0.0021778484806418419, 0.0028082747012376785, 0.004271817859262228, 0.0056248689070343971, 0.033012207597494125, 0.0099259195849299431, 0.0038057465571910143, 0.0046404190361499786, 0.0058421683497726917, 0.006744737271219492, 0.0023764148354530334, 0.0043418649584054947, 0.002533323597162962, 0.0041183670982718468, 0.0028690986800938845, 0.0054074921645224094, 0.0066414922475814819, 0.0029067411087453365, 0.0033182357437908649, 0.0029560534749180079, 0.0134857427328825, 0.0033150957897305489, 0.0070590125396847725, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1294, -296, -607, 675, 12989, 2511, -447, 5474, 1995, 1031, 138, 2321, 1303, 313, -1005, 416, 2237, 7168, 3123, -695, 785, -1000, -10, 2234, -203, -347, 1418, -23, 1759, 17366, 2019, -39, 381, -173, 1901, -224, 299, -327, 1175, 870, 1642, 1780, 43, -296, 468, 1412, 1089, -261, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00047504753456450999, 0.00047217524843290448, 0.0003265648556407541, 0.0005016512586735189, 7.9276804171968251e-05, 0.00031291472259908915, 0.00064211111748591065, 0.00018300935334991664, 0.00028493453282862902, 0.00073523836908861995, 0.00043445822666399181, 0.00036864960566163063, 0.00025721875135786831, 0.00046771366032771766, 0.00034490498364903033, 0.00042635115096345544, 0.00033623099443502724, 0.00013205588038545102, 0.0002502216084394604, 0.00039267985266633332, 0.00053981365635991096, 0.00024705924442969263, 0.0006150155677460134, 0.00036982749588787556, 0.00058650696882978082, 0.0010536612244322896, 0.0004141295503359288, 0.0010426612570881844, 0.00040518114110454917, 5.8588095271261409e-05, 0.0003852740628644824, 0.00092860369477421045, 0.00049305608263239264, 0.0004605987633112818, 0.00040814178646542132, 0.00038752777618356049, 0.00044938578503206372, 0.00073380919639021158, 0.00043959793401882052, 0.00062045437516644597, 0.00040183140663430095, 0.00037498865276575089, 0.00044129829620942473, 0.00059630098985508084, 0.00056428881362080574, 0.00034919916652143002, 0.0003620986535679549, 0.00045590003719553351, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -43,29,-1,-26,-90,-50,-127,22, 
  /* [1][0][][] */ 70,-73,-52,-78,127,-94,83,26, 
  /* [2][0][][] */ -107,127,-57,-119,77,-3,-46,66, 
  /* [3][0][][] */ 30,12,64,3,89,127,107,10, 
  /* [4][0][][] */ -77,-102,75,20,-42,-127,-2,-41, 
  /* [5][0][][] */ 127,-23,83,63,-90,-7,3,-27, 
  /* [6][0][][] */ 29,37,127,-31,42,-31,-48,34, 
  /* [7][0][][] */ 36,16,-127,-25,-30,109,118,-74, 
  /* [8][0][][] */ 11,125,-38,23,61,127,56,65, 
  /* [9][0][][] */ -6,127,-29,82,18,-92,55,115, 
  /* [10][0][][] */ 4,-94,-14,-35,-73,-127,-85,-81, 
  /* [11][0][][] */ -127,-83,103,48,-20,-76,89,47, 
  /* [12][0][][] */ -41,42,-127,73,17,-49,-74,90, 
  /* [13][0][][] */ 91,-127,88,103,18,44,55,-57, 
  /* [14][0][][] */ -24,78,-32,-127,-52,-120,-24,-59, 
  /* [15][0][][] */ 31,99,27,-18,28,-55,99,-127, 
  /* [16][0][][] */ -85,-127,-57,80,-40,27,-7,72, 
  /* [17][0][][] */ -24,-85,-127,86,-45,73,-42,69, 
  /* [18][0][][] */ -95,-86,-45,114,-9,99,10,127, 
  /* [19][0][][] */ 57,-120,90,-127,10,-84,9,-41, 
  /* [20][0][][] */ -15,49,23,15,37,127,69,0, 
  /* [21][0][][] */ 31,109,42,-37,45,-76,88,-127, 
  /* [22][0][][] */ 20,11,109,20,-12,127,31,-33, 
  /* [23][0][][] */ -93,-80,32,-66,63,85,-50,-127, 
  /* [24][0][][] */ -102,-83,42,-85,127,111,-42,-119, 
  /* [25][0][][] */ 127,15,-58,-18,26,28,-55,-8, 
  /* [26][0][][] */ -127,-28,-115,-31,-37,-26,13,-3, 
  /* [27][0][][] */ 78,34,-5,-55,-127,-22,91,92, 
  /* [28][0][][] */ -127,-64,15,54,-84,-89,-4,3, 
  /* [29][0][][] */ 127,93,30,-121,35,-3,-48,-101, 
  /* [30][0][][] */ -77,-63,48,-73,51,72,-41,-127, 
  /* [31][0][][] */ 49,47,-5,127,5,-70,-1,11, 
  /* [32][0][][] */ -34,127,-7,21,21,63,-16,44, 
  /* [33][0][][] */ -40,127,-88,18,30,-34,-32,0, 
  /* [34][0][][] */ -127,-76,-37,75,-14,10,-3,96, 
  /* [35][0][][] */ -49,127,-33,3,73,121,58,77, 
  /* [36][0][][] */ 70,41,5,-55,-127,-37,116,115, 
  /* [37][0][][] */ -49,105,20,25,-127,98,-34,-104, 
  /* [38][0][][] */ 30,47,33,9,127,73,123,45, 
  /* [39][0][][] */ -25,-73,21,-16,7,36,-99,127, 
  /* [40][0][][] */ -64,-53,-67,127,-23,-6,-7,76, 
  /* [41][0][][] */ 120,18,55,127,-73,-18,-5,-26, 
  /* [42][0][][] */ -47,3,-76,-127,48,-117,9,85, 
  /* [43][0][][] */ 16,-3,79,-7,34,127,91,13, 
  /* [44][0][][] */ -26,-26,-66,127,48,6,-38,-44, 
  /* [45][0][][] */ 75,74,109,-77,20,-55,23,-127, 
  /* [46][0][][] */ -28,-127,-41,36,4,38,-59,115, 
  /* [47][0][][] */ 32,47,85,5,83,127,113,2, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0038590100593864918, 0.0038356774020940065, 0.0026528232265263796, 0.0040751234628260136, 0.00064399867551401258, 0.0025419373996555805, 0.0052161375060677528, 0.0014866616111248732, 0.0023146425373852253, 0.0059726494364440441, 0.0035292862448841333, 0.0029946952126920223, 0.0020894957706332207, 0.0037994340527802706, 0.0028018075972795486, 0.003463428933173418, 0.0027313451282680035, 0.001072745188139379, 0.0020326550584286451, 0.0031899029854685068, 0.0043851323425769806, 0.0020069656893610954, 0.004996029194444418, 0.0030042636208236217, 0.00476444186642766, 0.0085593312978744507, 0.0033641478512436152, 0.008469974622130394, 0.0032914562616497278, 0.00047593563795089722, 0.0031297425739467144, 0.0075434367172420025, 0.0040053012780845165, 0.0037416366394609213, 0.0033155067358165979, 0.0031480505131185055, 0.0036505491007119417, 0.0059610395692288876, 0.0035710381343960762, 0.0050402106717228889, 0.0032642448786646128, 0.0030461899004876614, 0.0035848510451614857, 0.0048440028913319111, 0.0045839543454349041, 0.002836691215634346, 0.0029414789751172066, 0.0037034670822322369, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -6513, -2897, 11644, -9277, 23272, 7784, -7464, 12456, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00021223713702056557, 0.00024741387460380793, 0.00019025961228180677, 0.00026762226480059326, 0.00022071556304581463, 0.00018112384714186192, 0.00017642261809669435, 0.00026601841091178358, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -13,-12,-22,-71,-27,-34,19,-25,30,11,-27,-3,104,127,-26,-81, 
  /* [1][0][][] */ 127,-54,-37,19,-50,70,-69,-48,-44,82,-37,-51,-7,7,-62,-22, 
  /* [2][0][][] */ -39,-103,47,54,52,-62,-81,-15,31,-97,27,-127,50,-20,-71,25, 
  /* [3][0][][] */ 41,7,13,11,-3,76,-62,-21,127,47,12,19,-1,-16,11,19, 
  /* [4][0][][] */ -97,-30,-27,-127,-18,30,56,-113,27,-27,-41,-30,-111,27,-37,-12, 
  /* [5][0][][] */ 82,48,63,-38,43,-45,-116,-127,-15,-70,58,49,-52,45,55,-31, 
  /* [6][0][][] */ 100,44,-127,-72,23,-62,0,-88,-42,17,-97,86,81,-92,11,66, 
  /* [7][0][][] */ -127,0,104,-27,-63,3,-7,-61,-51,62,83,-30,60,-25,27,33, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0090200779959559441, 0.010515089146792889, 0.0080860331654548645, 0.011373945511877537, 0.0093804113566875458, 0.0076977633871138096, 0.0074979611672461033, 0.01130578201264143, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 16939, -400, 294, 3873, -993, 422, 11024, 1376, -1035, 423, -2142, 2584, -130, -1115, -104, -946, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00014407651906367391, 0.0002162092860089615, 0.00014560198178514838, 0.00015842443099245429, 0.001199831604026258, 0.0010135775664821267, 0.00014152887160889804, 0.00063874974148347974, 0.0003895784611813724, 0.0010793370893225074, 0.00022305069433059543, 0.00022541193175129592, 0.00010362954344600439, 0.00020172659424133599, 0.00020506443979684263, 0.00057353876763954759, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,1,8,-3,-18,10,10,16,-2,-11,4,-6,5,-1,2,-3, 6,-14,3,-4,14,-2,13,-24,-11,9,-6,90,-6,23,-7,-3, 4,-6,-1,-4,1,-14,0,11,-1,2,-3,-11,1,-1,-15,-4, 
  /* [0][1][][] */ 8,-11,3,4,127,-25,-127,-19,127,127,-2,-7,108,-20,3,-21, -127,127,127,2,-86,-92,-17,-98,17,-106,127,127,127,127,127,127, 18,-5,-8,3,-12,127,3,-9,-5,-12,-3,-7,10,-1,-8,-12, 
  /* [0][2][][] */ 2,-10,-4,-16,-16,14,59,9,-11,-9,-4,-6,-5,2,-16,-13, 22,-21,-12,-127,8,-16,-7,127,-6,0,-3,-19,-4,-57,-18,-38, 0,-2,-7,-6,0,-5,0,-1,-5,2,-9,-4,-3,-4,-9,-15, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0061232517473399639, 0.0091888941824436188, 0.0061880843713879585, 0.0067330384626984596, 0.050992842763662338, 0.043077047914266586, 0.006014977116137743, 0.02714686281979084, 0.016557084396481514, 0.045871824026107788, 0.0094796540215611458, 0.0095800068229436874, 0.0044042556546628475, 0.0085733802989125252, 0.0087152384221553802, 0.024375397711992264, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1406, 469, 398, 687, 40575, 55098, 4733, 1318, 6159, 4139, 1630, 273, 4552, -6101, 221, 33961, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00017042824765667319, 0.0012362853158265352, 0.00020767324895132333, 0.00012829300248995423, 3.7529036490013823e-05, 2.9273711334099062e-05, 0.00011196790728718042, 3.3401025575585663e-05, 0.00014611489314120263, 4.6785120503045619e-05, 0.00036439349059946835, 0.00096375925932079554, 0.00038568579475395381, 2.1168558305362239e-05, 0.00084751518443226814, 4.9077771109296009e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 104, -95, -11, 
  /* [1][1][][] */ -127, 103, 23, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 120, 126, 59, 
  /* [3][1][][] */ 2, -21, -14, 
  /* [3][2][][] */ -101, -127, -43, 
  /* [4][0][][] */ 26, -57, 14, 
  /* [4][1][][] */ 26, -127, 12, 
  /* [4][2][][] */ 22, -81, -2, 
  /* [5][0][][] */ -69, 30, -7, 
  /* [5][1][][] */ -127, 34, -4, 
  /* [5][2][][] */ -90, 18, -20, 
  /* [6][0][][] */ -15, 79, 127, 
  /* [6][1][][] */ -48, 56, -14, 
  /* [6][2][][] */ -34, -50, -87, 
  /* [7][0][][] */ 34, 19, -18, 
  /* [7][1][][] */ 127, 60, 2, 
  /* [7][2][][] */ 41, 15, -12, 
  /* [8][0][][] */ -20, -30, 53, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -25, -60, 97, 
  /* [9][0][][] */ -20, 50, -11, 
  /* [9][1][][] */ -13, 127, -18, 
  /* [9][2][][] */ -3, 78, -17, 
  /* [10][0][][] */ 25, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 64, -94, 34, 
  /* [11][2][][] */ -85, 127, -46, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 5, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 54, -4, -16, 
  /* [13][1][][] */ 108, 79, 4, 
  /* [13][2][][] */ 93, 127, 58, 
  /* [14][0][][] */ -30, -28, 47, 
  /* [14][1][][] */ 44, 98, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -75, -24, 26, 
  /* [15][1][][] */ -119, -127, 16, 
  /* [15][2][][] */ -23, -74, -5, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.043459199368953705, 0.31525275111198425, 0.052956674247980118, 0.032714713364839554, 0.0095699038356542587, 0.0074647958390414715, 0.028551815077662468, 0.0085172606632113457, 0.037259295582771301, 0.011930204927921295, 0.09292033314704895, 0.24575859308242798, 0.098349869251251221, 0.0053979819640517235, 0.21611635386943817, 0.012514830566942692, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.1231008768081665, } };
const TfArray<1, int> quant46_zero = { 1, { 4 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.073388166725635529, } };
const TfArray<1, int> quant50_zero = { 1, { -23 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.077313318848609924, } };
const TfArray<1, int> quant53_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.080087311565876007, } };
const TfArray<1, int> quant54_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.053941041231155396, } };
const TfArray<1, int> quant58_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.04995138943195343, } };
const TfArray<1, int> quant61_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.071103945374488831, } };
const TfArray<1, int> quant62_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.052268292754888535, } };
const TfArray<1, int> quant65_zero = { 1, { 3 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.088016316294670105, } };
const TfArray<1, int> quant66_zero = { 1, { -1 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.042622119188308716, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.17666380107402802, } };
const TfArray<1, int> quant69_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

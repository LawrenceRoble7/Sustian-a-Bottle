/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.03.2024 10:16:30

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 22778, -26477, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00022524033556692302, 0.00018846181046683341, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 20,-36,-41,127,-13,-10,-33,30,91,-44,-27,-36,-27,33,-14,42,54,-34,-24,-43,89,78,62,-60,-35,-62,16,107,-2,-26,51,35, 
  /* [1][0][][] */ 40,52,52,-57,-60,52,-4,8,-29,-8,23,72,79,29,27,-5,-29,0,-42,-64,-57,21,22,78,59,50,-43,-23,72,-74,-127,-12, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.006068977527320385, 0.0050780004821717739, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 79, -116, -85, 624, 108, -94, -487, -19, 299, -319, -161, -84, -85, 13, -109, 582, 121, -1026, -353, -107, 77, 221, 10, -37, -130, -208, 573, 1328, -67, -80, 2456, -319, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.3132280552526936e-05, 4.7361725592054427e-05, 5.2235209295758978e-05, 9.5587325631640851e-05, 5.1750124839600176e-05, 3.9288504922296852e-05, 4.263224036549218e-05, 4.0840910514816642e-05, 4.5889020839240402e-05, 4.3108801037305966e-05, 4.251872087479569e-05, 4.4244367018109187e-05, 4.4658139813691378e-05, 5.0625141739146784e-05, 4.4179127144161612e-05, 5.8604502555681393e-05, 5.8693829487310722e-05, 4.828518649446778e-05, 4.2378087528049946e-05, 4.1974319174187258e-05, 6.6382584918756038e-05, 4.1152921767206863e-05, 4.0474176785210148e-05, 4.2340816435171291e-05, 4.8027650336734951e-05, 4.3380718125263229e-05, 4.5585369662148878e-05, 0.00010057139297714457, 4.2278417822672054e-05, 5.3319796279538423e-05, 7.6905867899768054e-05, 4.8065357987070456e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -35,-44,109,11,96,-10,-95,-86,43,-98,-99,5,58,13,-32,52,-59,-50,-55,-56,-66,-102,11,110,-111,10,85,-46,112,4,-16,-82,83,-62,-90,66,-100,-80,-81,30,78,-96,-90,104,53,-115,113,-17,14,-64,-25,87,-69,-48,-93,107,33,70,127,-103,-74,85,-51,49,-4,17,76,87,57,100,86,-111,103,-99,46,83,-106,14,-51,33,57,18,101,-13,-58,-85,-77,97,32,112,-11,-108,15,72,38,10, 
  /* [1][0][][] */ -45,28,-58,1,-34,80,23,16,52,-91,-97,105,66,-21,30,56,103,-62,33,107,-45,4,35,31,18,14,-27,100,14,11,93,-63,56,97,-3,27,54,49,-10,-48,-76,-16,-14,-85,-28,20,-16,-52,-27,-94,106,34,13,66,-75,-38,19,96,55,75,-55,111,-78,-72,-49,38,73,32,100,33,15,10,-97,80,-43,36,75,-37,-33,69,-70,76,-42,-127,28,50,-60,-67,69,67,85,31,79,87,25,-20, 
  /* [2][0][][] */ 46,29,-44,80,-16,-42,62,85,-100,73,-31,104,80,-8,75,-95,-43,-44,28,44,-80,-3,93,23,-27,64,95,11,-52,72,68,75,-55,-14,-71,-86,-64,72,89,-12,-113,-82,18,-2,-66,85,-9,-65,76,17,75,-90,-35,44,14,22,-61,83,-52,4,-15,55,-44,57,79,44,43,67,-73,63,7,-59,34,-65,28,17,-44,-16,9,11,34,-78,-4,-51,4,-127,-13,-32,71,87,-19,13,-33,-64,-38,-68, 
  /* [3][0][][] */ 28,6,20,-2,-24,28,-28,15,49,4,44,-4,39,47,27,14,57,60,-11,25,63,-51,-19,-48,38,-43,-42,51,23,-51,42,17,-20,-15,-9,1,-39,32,22,8,11,1,-39,3,39,35,-31,-6,30,-17,32,127,48,34,59,-49,-26,-55,-46,-1,-22,12,6,41,32,-20,-21,11,-15,-30,18,51,5,-5,33,3,33,66,45,-17,-30,-36,12,81,27,86,-13,-20,-28,30,7,-54,38,-20,-31,92, 
  /* [4][0][][] */ 42,87,-2,44,-27,-22,29,10,67,74,-12,31,20,-23,-14,-52,-26,-3,-49,15,90,-73,67,15,33,2,42,-50,-41,26,-65,-46,60,95,11,-82,-39,11,-85,29,-29,-33,-66,-77,28,90,29,69,20,-33,-18,-62,-84,57,-71,14,39,-87,31,8,3,-66,4,-63,-46,44,-1,-26,20,-90,-71,-73,-45,30,82,52,51,3,-8,-40,2,-33,-74,9,5,127,75,7,-85,-20,51,31,26,86,-82,30, 
  /* [5][0][][] */ 110,-101,91,93,44,-120,17,71,90,-125,-4,-66,30,110,45,36,66,38,-78,105,32,63,21,-24,-126,-72,-8,-97,56,40,20,-114,-41,2,-72,20,-117,-46,54,32,-116,-79,52,109,-34,11,48,-59,-125,97,29,12,47,7,34,-19,111,58,-58,-44,32,-69,22,-79,-31,114,-25,23,85,8,110,-76,-47,81,-29,-86,9,-49,18,92,119,43,37,97,-87,25,-3,34,72,-115,127,105,-18,32,80,-106, 
  /* [6][0][][] */ 11,-50,106,68,-93,-68,-10,59,-18,-90,-2,-96,78,49,107,-124,32,-1,-7,94,-86,-126,102,51,-66,-90,-17,-64,-36,-122,38,-84,-98,-127,-54,-114,-16,33,-117,73,85,53,16,-22,-119,102,-95,-51,-81,11,-36,-64,51,-55,87,-35,1,-16,-72,107,-103,-7,62,-80,-60,59,93,-55,71,-14,-113,-13,49,-76,-97,-49,-86,-107,-64,-35,26,-35,36,-32,-75,-89,-47,-99,78,89,90,9,-60,-71,68,-35, 
  /* [7][0][][] */ 96,82,-41,-54,-85,106,-34,15,118,-10,-97,0,45,-102,38,84,22,-2,9,113,62,14,-4,76,-55,102,35,57,-92,109,-30,26,18,10,59,100,-103,100,2,-53,92,-78,91,79,53,1,91,-108,50,-68,-108,-76,-28,93,17,11,127,-106,14,-56,13,-18,89,-125,-78,-74,75,16,-124,8,64,94,79,35,71,64,-69,52,-96,45,96,-55,-12,-80,84,21,-120,106,96,13,85,59,-71,-43,5,-63, 
  /* [8][0][][] */ 0,38,-50,-90,52,20,-59,-24,37,36,47,73,-7,-41,-88,-64,-73,119,-27,19,35,-39,76,93,-65,97,29,65,-71,9,-92,115,87,-33,37,-2,103,23,-15,48,102,123,-117,-113,-10,-15,-41,113,25,-55,-59,18,-67,15,-20,-112,65,90,-90,98,104,31,77,99,-36,-54,-20,102,-89,34,38,-1,62,80,10,28,-44,98,75,66,29,80,-109,-70,15,127,63,-37,44,-20,-73,82,-78,-96,-46,89, 
  /* [9][0][][] */ 3,2,108,42,77,-106,-54,-127,45,46,-21,51,-28,-82,-103,-32,21,10,-106,-72,-3,104,-115,-106,103,-15,-11,24,-15,-63,-95,99,56,-2,23,-21,-85,9,-46,-33,42,-81,50,-100,75,20,-102,49,61,-21,-88,-52,67,-84,-78,101,80,-60,-26,-9,-93,102,84,-84,-89,4,99,45,-42,102,109,-102,5,74,-113,-102,-81,-121,-45,106,27,24,95,27,-44,-71,28,-20,91,27,-31,104,107,-4,46,-43, 
  /* [10][0][][] */ -49,77,102,-63,-15,121,97,36,9,35,19,-56,110,88,-24,6,-24,56,-102,-66,-23,42,56,-61,9,52,-104,-111,-43,89,-90,-83,88,106,127,77,-37,-7,-34,50,-56,92,-102,-36,-93,-76,13,-67,-7,-15,37,-11,67,7,-67,-25,-110,-8,25,-47,-9,89,89,43,122,-68,-95,-28,29,-8,-97,-69,95,54,-84,102,-18,69,70,24,82,3,62,87,-96,6,105,-45,31,-1,-3,-58,-47,-40,-48,-88, 
  /* [11][0][][] */ 115,17,-5,104,114,52,41,39,83,92,-74,119,1,-74,35,-68,-51,-127,61,37,31,83,30,-101,-98,-94,-8,72,82,2,28,-21,-85,-68,57,46,-50,63,-21,-49,-38,83,-62,8,-37,-69,-75,-84,67,87,109,34,-86,-85,14,32,-66,-50,-25,-83,-82,92,73,9,32,91,-52,23,91,65,-78,-70,47,90,-94,43,-64,36,-31,91,-99,-24,-65,-58,53,-123,23,-41,-93,-16,14,-89,-81,-23,-72,-58, 
  /* [12][0][][] */ 19,65,-45,4,85,13,-45,43,-94,59,-15,23,-37,16,54,-79,-94,-57,-45,-78,26,-2,19,100,-72,-49,107,-92,94,21,-31,107,-81,-66,-38,17,6,-77,-13,50,93,18,-99,-34,-17,-93,-26,112,-49,-127,-71,83,40,-7,-82,88,-24,-51,53,65,56,116,-23,53,111,38,-39,106,60,105,39,71,87,107,-13,-11,-33,38,-104,-87,-51,98,51,-4,-31,-23,55,104,-91,-111,89,50,100,-9,29,60, 
  /* [13][0][][] */ 90,-48,93,83,80,95,61,64,49,-90,13,-20,78,61,58,-38,-109,-79,-59,24,59,-25,103,-39,-59,32,9,18,-73,-71,73,26,34,85,-16,32,-62,-26,29,57,-60,57,-39,15,-35,19,-1,-22,24,78,-25,-100,-79,23,85,-70,-42,25,-11,-62,-21,102,-76,13,-43,-54,-74,69,-30,-9,79,2,-76,32,-60,-36,-89,58,75,-50,48,-85,87,8,-68,-127,82,100,-6,-44,-63,50,96,-41,62,-7, 
  /* [14][0][][] */ -61,-103,92,70,79,-31,-25,-107,-90,-43,64,84,-25,-85,-82,-87,-47,-89,7,27,-45,29,-1,68,-118,-76,-22,33,-107,-108,-74,25,103,-26,-30,6,102,109,34,-100,-34,-125,43,89,66,-121,67,-86,93,16,80,38,99,-35,-15,15,-56,13,51,95,-16,-75,-46,70,-84,-7,80,-113,-84,-82,-90,92,6,77,47,-74,56,-97,53,34,49,-27,-110,-45,-122,-127,-110,98,104,1,80,-45,82,103,-16,46, 
  /* [15][0][][] */ -12,-14,-25,52,67,-88,62,-59,62,2,-38,-14,68,8,-76,-74,18,63,-14,28,43,-2,56,62,98,70,11,65,10,37,44,-74,4,2,-50,0,-40,119,106,-82,74,117,-50,-17,15,-50,-49,-32,-5,-17,10,32,-72,-26,-25,-22,72,27,-26,78,-30,-57,49,83,-26,58,-41,11,-48,-20,58,-38,9,15,55,-65,-5,35,77,61,-58,33,-73,-25,-90,89,-66,34,82,67,-74,-43,32,75,-59,127, 
  /* [16][0][][] */ -63,6,69,-48,29,72,-29,24,58,31,-74,41,-18,-40,-47,-39,67,81,55,48,84,45,-28,30,-7,43,-61,44,-79,4,26,11,-79,52,35,41,-30,48,-35,-65,39,-11,47,65,43,90,59,-5,-35,-65,6,100,-33,97,54,22,28,58,53,11,88,72,46,45,37,2,-29,73,26,62,-23,-6,14,74,47,72,-7,67,-82,-11,8,-62,39,29,5,127,73,16,62,18,-10,73,46,-27,-58,36, 
  /* [17][0][][] */ 11,-118,18,56,-58,-110,-84,-96,15,-97,53,38,73,31,-115,29,17,22,70,80,-105,-28,-13,-50,1,38,-77,9,79,-56,-48,47,-48,-44,11,-11,-52,67,-92,-29,-110,-58,-20,-24,-12,-9,62,-114,67,67,-31,10,-33,48,70,-83,-126,65,-95,-117,11,-92,43,67,-95,-82,24,-111,-111,-10,72,5,0,-127,-76,38,84,-53,18,-70,-6,-38,-82,-101,-120,40,48,-45,-2,53,-107,-111,-23,69,-12,-11, 
  /* [18][0][][] */ -102,95,102,-77,-16,-118,-111,-2,-11,69,-115,-54,-44,28,54,-65,15,-30,57,-32,95,-53,16,-87,108,-104,-25,105,23,27,-7,36,39,-35,-116,-115,-40,40,-42,57,-46,-7,-58,-16,-122,10,19,-5,15,-31,64,25,-117,-16,-4,80,-49,28,-21,-124,78,103,9,29,-77,-127,-39,83,62,-86,-79,102,-105,-15,-96,-112,48,51,-8,-81,-64,-14,-32,-74,97,21,64,63,-115,-80,-70,99,82,-62,41,-26, 
  /* [19][0][][] */ 30,34,75,39,58,-68,98,89,109,-48,29,-13,-94,45,-53,59,75,-71,117,58,-17,91,-55,10,85,-72,27,-69,-91,-121,-66,57,85,-76,36,3,5,-71,-59,-108,62,-117,-88,7,-86,33,83,-95,59,51,-43,51,-39,39,4,-5,35,97,-4,-28,52,-58,127,62,-72,0,-29,1,-5,52,84,-52,-62,-124,-58,-82,-23,-116,17,108,57,-103,-32,83,-86,46,13,-6,93,31,0,63,-30,118,70,-47, 
  /* [20][0][][] */ -6,51,44,61,-58,58,14,35,30,4,-50,-2,-5,61,25,-42,-31,-4,-45,-18,20,-28,-41,-49,66,-47,-69,31,13,7,-28,79,64,29,-10,33,26,-16,-8,-73,-39,-10,-58,-65,-17,-27,-48,73,61,-67,-67,40,30,92,34,-1,61,45,68,61,76,-36,-26,-23,-19,-43,-34,13,-54,-51,-33,51,-42,-53,22,18,75,48,74,74,55,5,51,-6,43,127,-4,57,16,69,23,39,11,18,-2,15, 
  /* [21][0][][] */ 92,83,81,-103,108,-93,72,31,-16,-66,-70,49,11,39,-44,-91,-119,-33,35,-6,111,-53,80,-81,59,-87,-23,82,20,14,-3,-35,8,21,-91,-113,127,103,-111,-28,-15,3,35,-6,-100,-91,-77,101,-30,-80,3,73,45,64,-100,28,-61,61,-44,122,62,-73,6,-9,93,35,-26,-76,-105,1,59,88,39,-18,82,70,-114,-28,72,113,19,93,44,-83,20,-119,66,-85,-103,84,112,-113,-55,-73,72,-35, 
  /* [22][0][][] */ 34,-50,-72,-99,97,-50,113,65,-109,81,-77,-117,123,-125,-119,-87,50,84,-127,-64,96,-81,43,38,90,-11,-115,115,-59,-75,-65,-113,49,66,21,17,10,-26,-61,-116,-9,-12,13,107,65,-120,94,-26,-70,-94,12,-17,-62,-114,-53,37,-16,-25,-9,-29,124,-76,-87,-120,-66,26,-116,-48,125,119,-29,1,-70,8,71,-93,55,-57,77,103,119,-105,-77,-123,83,70,110,-36,-62,33,-71,70,25,22,-27,94, 
  /* [23][0][][] */ 74,-93,12,62,100,-102,-5,-93,33,-78,88,86,26,-104,28,-45,98,-58,-102,100,93,-72,107,-28,-30,-15,95,25,77,56,77,-36,-38,48,26,37,105,-13,-110,18,-118,-22,18,-108,-66,-104,127,24,76,-122,-87,-74,86,-71,-55,98,-83,-14,101,49,-116,-85,-67,-10,38,45,-114,-117,70,-6,113,-71,0,-38,-37,-103,44,-18,100,119,-51,-50,28,-121,98,-55,119,-30,-95,34,107,2,112,-47,-31,70, 
  /* [24][0][][] */ -71,-43,-90,-62,-79,-91,-72,-68,38,106,70,38,106,55,-30,-105,-73,30,33,-45,86,-70,-43,-36,35,-27,75,56,98,56,5,-56,-8,8,48,28,-37,-81,64,-9,-79,-105,100,10,23,-41,45,71,-76,-60,-11,-14,67,45,60,-65,-5,75,24,-2,81,-2,21,86,-84,89,-34,-88,-86,54,-52,-20,-32,33,90,84,54,-59,-85,-73,-69,-95,-46,-127,-1,14,-12,-104,22,-101,4,-68,-20,34,-82,20, 
  /* [25][0][][] */ -77,-60,-75,-9,88,-63,-113,50,23,-115,-47,24,75,3,-107,-31,-67,37,22,-115,60,92,-12,-54,-8,-57,-98,40,78,-90,37,111,90,-108,46,71,96,-75,-35,-16,-109,79,-101,1,99,24,77,25,-115,84,-78,-19,40,-33,-68,17,-29,53,-114,72,112,43,35,42,0,75,-21,-11,-88,2,-30,-120,37,-127,68,11,68,66,14,19,49,51,-54,59,-69,-86,-103,-109,-32,-56,101,26,-117,-16,-29,-110, 
  /* [26][0][][] */ 60,-102,-18,-6,-91,13,19,-15,-77,-108,112,77,-79,-29,-2,-5,114,47,-69,-61,25,68,97,3,70,78,5,45,16,3,-76,27,-29,-49,-94,-90,-65,91,-41,90,-27,125,54,28,-62,88,-44,103,-10,67,0,127,13,17,22,-100,122,57,53,32,7,-97,94,-7,110,-23,-52,72,-78,75,90,96,75,-86,-74,30,47,-106,-91,16,-22,103,80,-32,90,56,-32,20,-65,117,24,10,-46,110,55,108, 
  /* [27][0][][] */ -8,12,-24,-34,-31,-39,5,2,48,44,50,-56,-15,26,32,19,17,36,45,-3,-19,-8,-2,-4,-19,35,-59,1,27,-1,-13,8,44,30,-40,-22,-37,30,-37,19,-3,70,25,25,62,46,13,62,37,60,53,32,-28,0,27,-23,63,-11,-32,-14,35,-34,22,35,27,-31,-31,66,18,-1,-31,29,19,24,15,7,48,-27,41,53,59,-1,46,70,-33,71,-18,127,2,31,-12,-26,24,9,82,90, 
  /* [28][0][][] */ 92,-12,89,43,-117,-69,-102,-77,-60,-109,59,69,-80,-87,8,100,90,111,-82,70,-44,25,-109,-74,-122,83,-87,-63,-77,-80,-3,-21,-110,18,82,69,11,-114,-45,30,98,39,-105,52,-113,-15,17,45,20,-62,-89,-57,-92,25,47,41,37,-14,76,51,-38,-41,-109,2,57,74,-23,82,-80,20,-109,-42,71,33,-6,-120,-122,-93,-88,44,-78,-94,102,-64,60,-123,61,-98,-115,-71,-38,-65,-44,48,-127,-105, 
  /* [29][0][][] */ 37,40,42,-43,-71,4,-90,1,88,-14,-73,-81,82,-86,-42,-35,-77,93,23,-49,-62,-32,38,3,-16,6,-39,-25,-84,-8,78,-3,39,-2,-67,-45,-11,86,-9,72,52,92,-38,64,-2,89,-50,-14,26,-4,45,-70,55,-74,91,34,-74,42,-47,86,-93,74,-64,-43,-52,-54,43,75,73,-70,26,-60,87,64,48,24,93,-42,-29,29,-6,-67,-10,-54,50,127,29,69,-30,82,60,61,-83,17,-8,57, 
  /* [30][0][][] */ 17,23,-23,33,-35,24,14,15,115,6,44,-40,-55,25,33,66,0,67,94,-26,67,-59,-33,9,1,49,-48,88,3,-49,-42,30,-16,-19,-58,-10,13,56,35,-3,102,19,6,93,83,27,44,57,-1,88,30,34,70,33,40,57,5,-32,-17,6,12,0,41,5,-53,-42,-23,93,-31,52,56,20,-46,106,67,30,10,-30,4,-9,46,34,-30,56,-48,127,-36,111,63,25,69,26,-4,21,41,43, 
  /* [31][0][][] */ 72,-86,27,82,40,53,-54,-94,-24,-21,-70,-80,83,-113,-48,95,-60,-81,81,34,54,24,-36,89,40,-104,24,30,-71,-72,41,96,13,16,-88,-14,78,-28,-67,-106,64,-61,-38,23,0,-49,-42,15,64,32,79,-25,-109,-51,-71,16,-105,55,-8,101,-40,-8,80,-71,57,96,-48,-74,60,-127,-111,7,-95,-38,-1,2,-58,-53,39,73,-74,-37,43,67,48,96,-88,11,13,-49,-84,-54,6,86,-2,-22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0018331218743696809, 0.0020128733012825251, 0.00221999641507864, 0.0040624612011015415, 0.0021993801929056644, 0.0016697614919394255, 0.0018118702573701739, 0.0017357387114316225, 0.0019502833019942045, 0.0018321239622309804, 0.0018070456571877003, 0.0018803855637088418, 0.0018979709129780531, 0.0021515684202313423, 0.0018776128999888897, 0.0024906913749873638, 0.0024944876786321402, 0.0020521203987300396, 0.0018010686617344618, 0.0017839084612205625, 0.0028212598990648985, 0.0017489991150796413, 0.0017201524460688233, 0.0017994847148656845, 0.0020411750301718712, 0.0018436805112287402, 0.0019373781979084015, 0.0042742840014398098, 0.0017968326574191451, 0.0022660912945866585, 0.0032684993930160999, 0.0020427776034921408, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1340, -15, 4045, 4617, 4565, -1923, 4136, -1254, -1889, -893, 5822, -2162, 4272, 5436, 1611, 1959, -535, -100, -1809, 4011, 1859, -807, 1718, -643, -801, 4492, 1217, 2345, 6029, 2129, 4281, 1040, 1558, 4601, 5402, 2786, -522, 3660, 2393, -4232, 188, 1142, -53, 1621, -1126, 539, -1530, 1052, -8247, 1936, 1206, -3108, 6765, -484, 1912, 1588, 964, 2453, -547, -1906, 276, 1529, 599, 4045, 5636, 2671, 2809, 4717, 3925, -741, 2918, 6511, 3587, -1357, 3733, 6816, 1085, -3172, 554, 1500, 13500, 1688, -643, -1641, 1148, 1828, 1291, -1544, 4002, -358, 3371, 1190, 21, -2696, -93, 1599, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00014343533257488161, 0.00031202155514620245, 0.00013887661043554544, 0.00016305588360410184, 0.00013584808039013296, 0.00020687869982793927, 0.00014145695604383945, 0.00021516080596484244, 0.00017981958808377385, 0.00016558358038309962, 0.00011762067879317328, 0.00020275759743526578, 0.0001269344356842339, 0.00011624216858763248, 0.00019127881387248635, 0.00021281545923557132, 0.00026999934925697744, 0.00018367830489296466, 0.00015577735030092299, 0.00015108160732779652, 0.00024051271611824632, 0.00020709233649540693, 0.00019748507475014776, 0.00018097109568770975, 0.00026590863126330078, 0.00014101120177656412, 0.00022623984841629863, 0.00016059787594713271, 0.00011749067198252305, 0.00019060257181990892, 0.00011905785504495725, 0.00023942426196299493, 0.00018270562577527016, 0.00012619253539014608, 0.00010749740613391623, 0.00017023629334289581, 0.00020457948266994208, 0.0001446718379156664, 0.00015819894906599075, 0.00012754161434713751, 0.00017138003022409976, 0.00025155043113045394, 0.00013625778956338763, 0.00018962558533530682, 0.00018311462190467864, 0.00016040849732235074, 0.00016410031821578741, 0.00017763760115485638, 8.4291772509459406e-05, 0.00015967329090926796, 0.00019799455185420811, 0.00014261224714573473, 0.00011093005014117807, 0.00017145990568678826, 0.00018048072524834424, 0.00015059013094287366, 0.00021262647351250052, 0.00014520836703013629, 0.00028968873084522784, 0.00016894031432457268, 0.00019354156393092126, 0.00016454883734695613, 0.00022449163952842355, 0.00016278165276162326, 0.00011886386346304789, 0.00017195835243910551, 0.00013595558993984014, 0.00016153970500454307, 0.0001635348453419283, 0.00018866446043830365, 0.00016477690951433033, 0.00010853965795831755, 0.00012438486737664789, 0.00017641457088757306, 0.00019791946397162974, 0.00011870811431435868, 0.00011369348067091778, 0.00020286424842197448, 0.00020074595522601157, 0.00013584599946625531, 6.4107167418114841e-05, 0.00017140492855105549, 0.00020258971198927611, 0.00022253739007283002, 0.00018245457613375038, 0.00018718528735917062, 0.00018327809812035412, 0.00019865577633026987, 0.00016167035209946334, 0.00018658011686056852, 0.0001769291702657938, 0.00018091534730046988, 0.00020743077038787305, 0.00016156876517925411, 0.0002144865138689056, 0.00022997538326308131, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -17,98,-81,40,53,-33,94,79,-65,6,38,-101,90,127,-83,31, 
  /* [1][0][][] */ -19,2,-53,-23,-2,50,32,-127,35,-41,-25,-52,-6,-50,-49,1, 
  /* [2][0][][] */ -19,-23,33,77,27,47,-108,127,-18,-5,70,-56,-25,-69,-41,63, 
  /* [3][0][][] */ 80,-92,79,2,-6,-30,-33,127,-34,55,69,40,0,52,-7,17, 
  /* [4][0][][] */ -46,-27,-3,60,-94,14,-37,-117,-12,-4,41,-21,46,57,99,127, 
  /* [5][0][][] */ 127,34,-31,-24,-70,14,19,63,26,-24,49,85,100,20,-68,-5, 
  /* [6][0][][] */ 13,-47,-61,-52,-92,12,-8,-47,-71,-70,-26,25,111,71,127,-1, 
  /* [7][0][][] */ -49,34,-32,-75,11,-47,-63,14,-83,42,-73,-64,-127,-45,19,76, 
  /* [8][0][][] */ 51,56,87,14,57,29,88,21,61,-21,42,-2,-127,-25,-86,9, 
  /* [9][0][][] */ -35,67,28,-52,-27,-14,36,-20,-25,50,-45,17,41,127,32,23, 
  /* [10][0][][] */ 86,63,-63,82,-58,-29,80,-59,-94,-37,-50,-127,-122,-76,24,116, 
  /* [11][0][][] */ 42,3,67,17,-10,-29,6,115,-94,31,-25,-4,-7,-1,47,127, 
  /* [12][0][][] */ -58,-30,11,9,20,-8,124,52,-70,32,10,-14,-10,82,-73,127, 
  /* [13][0][][] */ 10,33,34,59,96,24,127,92,-23,78,-102,-65,21,47,-89,-37, 
  /* [14][0][][] */ -127,115,10,-4,-10,-2,56,10,-47,29,120,-16,-88,15,-64,57, 
  /* [15][0][][] */ -4,-10,-127,-42,81,-35,-87,-28,-19,-25,-17,-60,-7,-77,-43,38, 
  /* [16][0][][] */ 127,-10,3,-10,28,-37,44,-24,-34,7,126,47,51,0,-19,14, 
  /* [17][0][][] */ 8,17,-38,-93,0,-48,127,-126,10,-4,-36,41,50,86,36,40, 
  /* [18][0][][] */ 34,126,-20,-55,69,-78,1,-64,-29,127,-32,-9,-20,58,3,-46, 
  /* [19][0][][] */ -72,-122,127,-79,36,-127,22,-30,39,47,92,94,28,-7,49,-18, 
  /* [20][0][][] */ -14,93,54,6,11,-2,16,-30,65,-5,90,-26,-127,-31,-73,-14, 
  /* [21][0][][] */ -53,25,13,31,55,33,53,59,-127,49,-22,12,-6,35,-68,-13, 
  /* [22][0][][] */ 13,-94,44,14,17,-127,99,12,15,-51,-40,-70,36,-78,-67,-46, 
  /* [23][0][][] */ -60,-84,49,59,21,-16,15,-50,26,-39,72,2,4,68,87,127, 
  /* [24][0][][] */ 3,1,24,78,47,17,-49,-127,69,8,-45,15,1,-3,-20,-34, 
  /* [25][0][][] */ -6,44,14,-65,-29,-2,18,-47,-16,51,-57,-10,36,127,47,-3, 
  /* [26][0][][] */ -69,77,10,23,26,-81,-7,-28,11,25,12,64,13,7,-92,127, 
  /* [27][0][][] */ -15,-127,-65,-2,-61,103,3,-70,35,-60,56,-27,21,-72,-97,-34, 
  /* [28][0][][] */ -38,-1,43,89,25,7,-45,-127,-123,50,108,-15,75,7,-54,-23, 
  /* [29][0][][] */ -127,104,-16,-23,-32,16,-117,-64,-50,-28,3,-11,13,-45,-123,71, 
  /* [30][0][][] */ 48,67,-47,85,-102,-93,-80,-7,-48,3,12,-114,127,34,-24,104, 
  /* [31][0][][] */ 127,38,-68,-35,-53,20,110,32,-42,-13,56,54,31,11,-10,-5, 
  /* [32][0][][] */ -27,-15,127,-5,-17,77,83,13,-12,-14,-13,26,3,72,69,34, 
  /* [33][0][][] */ 3,29,-66,-69,-28,27,119,18,-2,-27,26,-67,85,127,-55,53, 
  /* [34][0][][] */ -83,-23,86,16,31,-48,107,-7,-127,33,39,-47,54,72,-67,-33, 
  /* [35][0][][] */ -4,18,-52,18,-76,127,-49,-14,-24,123,3,96,-71,64,13,38, 
  /* [36][0][][] */ -9,-75,127,-51,-47,18,-33,-8,17,19,-49,83,3,-86,-36,44, 
  /* [37][0][][] */ 90,-17,76,-37,127,-79,-58,24,-58,116,-73,9,-100,-63,118,-31, 
  /* [38][0][][] */ 38,26,17,-89,-3,-47,-113,55,-83,58,-87,-41,-62,-127,-95,61, 
  /* [39][0][][] */ -67,26,-62,-38,-76,-82,62,8,-127,-34,19,88,36,4,10,48, 
  /* [40][0][][] */ 127,40,5,-82,-77,13,16,-33,-31,7,-43,-76,31,62,69,37, 
  /* [41][0][][] */ 78,-79,-49,-48,-13,-11,-68,-27,48,-16,7,-50,127,-73,57,-28, 
  /* [42][0][][] */ -10,-89,-48,127,3,-105,-120,12,9,5,2,50,-83,70,-52,-3, 
  /* [43][0][][] */ -81,-37,-54,-127,-36,14,-12,65,49,-122,-38,41,-24,-52,-6,80, 
  /* [44][0][][] */ -29,61,30,-62,-21,-11,36,106,127,-89,68,107,108,49,13,-11, 
  /* [45][0][][] */ 37,77,-78,77,127,-70,-43,-62,103,-59,60,-48,-36,11,-60,49, 
  /* [46][0][][] */ -26,-38,13,-9,93,-28,27,24,-8,127,-31,-120,28,58,-51,73, 
  /* [47][0][][] */ 86,-37,-34,-12,83,-20,-43,-55,2,127,-32,32,-8,-114,-78,3, 
  /* [48][0][][] */ 12,35,-12,-124,-1,-42,127,-122,13,-1,-44,55,56,64,8,40, 
  /* [49][0][][] */ -44,103,-65,34,35,-62,80,36,-33,39,40,-87,-23,65,127,-97, 
  /* [50][0][][] */ 8,36,-20,5,-127,1,-72,-59,54,73,34,34,-40,-41,-2,41, 
  /* [51][0][][] */ 127,-44,-53,-8,-50,91,-100,-40,42,-20,-39,71,-28,-65,-3,41, 
  /* [52][0][][] */ -32,-69,35,76,-45,-116,-127,-5,-54,-61,-19,-50,20,-66,-5,92, 
  /* [53][0][][] */ 17,80,53,-127,6,108,92,-15,0,-21,-7,-29,71,-109,4,37, 
  /* [54][0][][] */ 37,118,-2,-24,6,-87,-100,44,15,-31,-45,127,73,75,33,53, 
  /* [55][0][][] */ -51,-17,60,36,47,-44,105,99,-94,-7,27,10,127,51,-25,6, 
  /* [56][0][][] */ 127,29,11,17,-44,98,-47,-66,-14,39,-88,-4,-53,92,0,27, 
  /* [57][0][][] */ -44,-32,-45,-33,-63,-97,61,-20,-127,-23,53,51,17,39,-23,49, 
  /* [58][0][][] */ 39,-63,63,30,0,-77,-10,12,26,-15,-127,-29,24,-32,-53,53, 
  /* [59][0][][] */ 76,16,-127,81,16,36,88,-29,-65,-50,25,-86,-112,-61,29,101, 
  /* [60][0][][] */ 1,36,-11,16,-9,-19,-18,5,-28,-76,53,110,-38,-127,-30,-12, 
  /* [61][0][][] */ -37,7,80,-78,-71,42,-6,124,-22,-89,61,55,87,-8,-8,127, 
  /* [62][0][][] */ 92,54,-9,-127,-22,-1,15,-46,-2,38,-44,38,28,-26,-93,-95, 
  /* [63][0][][] */ -1,-26,1,0,-71,-72,-57,12,-68,-9,-33,-21,127,0,51,-14, 
  /* [64][0][][] */ 23,-7,-11,74,-104,-37,-27,-74,50,123,45,-10,51,-43,-65,127, 
  /* [65][0][][] */ -31,4,-11,-8,-75,60,19,-18,41,-95,90,-66,69,57,-127,62, 
  /* [66][0][][] */ -127,98,-100,-95,41,-41,-104,-82,-110,117,96,8,-122,-58,46,62, 
  /* [67][0][][] */ 3,-26,-127,-111,70,76,10,-27,-15,-10,42,-16,18,27,28,38, 
  /* [68][0][][] */ 48,15,-6,-37,-66,32,10,40,-72,69,126,-19,-6,-39,-127,12, 
  /* [69][0][][] */ 66,-105,53,-37,16,-111,-31,127,-3,67,82,71,-15,71,-34,0, 
  /* [70][0][][] */ 48,9,127,47,98,-30,124,21,29,27,-68,32,-85,65,-86,43, 
  /* [71][0][][] */ 11,32,91,-75,-127,-80,20,2,-19,-12,18,-98,-75,-2,18,26, 
  /* [72][0][][] */ -58,-94,22,-112,72,-13,2,49,-73,17,-115,-14,61,120,-70,127, 
  /* [73][0][][] */ 20,15,52,1,127,-94,-59,6,-37,101,-87,36,-94,-57,118,-17, 
  /* [74][0][][] */ -87,2,-127,-77,64,-39,-36,13,-64,-5,-115,-20,-35,-61,-15,57, 
  /* [75][0][][] */ 90,-22,44,-47,21,5,-127,-25,-3,-98,66,6,1,-20,-6,-14, 
  /* [76][0][][] */ 3,-54,-44,104,48,94,112,-66,80,-119,75,127,38,-84,-65,41, 
  /* [77][0][][] */ -24,-33,121,-34,46,-31,-21,-127,36,15,15,84,40,36,34,-15, 
  /* [78][0][][] */ -47,11,20,-38,2,-49,55,-15,28,-18,12,-96,-109,-77,-127,-61, 
  /* [79][0][][] */ -118,-84,-14,51,127,28,-20,35,16,43,-4,55,-31,-69,-84,-5, 
  /* [80][0][][] */ 13,-115,30,127,-23,-29,-122,81,7,8,68,22,-99,-27,1,40, 
  /* [81][0][][] */ 103,58,-16,86,-7,37,22,127,11,15,116,54,122,41,52,-15, 
  /* [82][0][][] */ -43,8,12,-30,28,-127,-116,-87,11,66,-50,-30,-44,88,-68,-26, 
  /* [83][0][][] */ 91,-8,68,-18,-33,-9,-127,8,16,-99,15,-48,-8,-5,1,-23, 
  /* [84][0][][] */ 18,-67,-97,25,127,39,38,28,-111,20,-102,-16,46,-32,-69,12, 
  /* [85][0][][] */ -35,103,75,-77,93,16,96,-121,110,-7,64,-25,127,-53,3,-10, 
  /* [86][0][][] */ 113,-38,127,44,-1,-58,69,39,-70,-56,-92,-49,33,27,-68,15, 
  /* [87][0][][] */ -6,6,12,-62,80,-21,-56,40,33,-37,83,-30,-83,-127,-5,21, 
  /* [88][0][][] */ -57,-30,36,-8,22,32,-63,-52,2,8,-77,-127,-46,-40,-8,-28, 
  /* [89][0][][] */ -73,14,25,-67,28,9,-127,24,86,24,-67,-12,-9,-86,-45,-23, 
  /* [90][0][][] */ -16,-17,-27,-73,127,18,-62,48,39,60,35,-17,40,21,-76,-15, 
  /* [91][0][][] */ -37,-56,11,32,-30,-8,-2,66,-42,-71,27,-40,-10,70,37,127, 
  /* [92][0][][] */ -27,81,4,-8,-28,61,-111,54,-46,-6,71,-1,-39,127,48,29, 
  /* [93][0][][] */ -3,75,-54,-73,74,84,-79,12,67,54,70,58,-127,28,-41,68, 
  /* [94][0][][] */ 17,59,96,17,-127,-30,7,-9,14,-12,27,-20,-50,-18,15,-22, 
  /* [95][0][][] */ -22,29,56,-4,119,-10,-120,85,4,25,-76,127,9,22,109,-53, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0015946488128975034, 0.0034689137246459723, 0.00154396693687886, 0.0018127810908481479, 0.0015102970646694303, 0.002299983287230134, 0.0015726541168987751, 0.0023920598905533552, 0.0019991523586213589, 0.0018408829346299171, 0.0013076531467959285, 0.0022541666403412819, 0.0014111993368715048, 0.0012923275353386998, 0.002126550767570734, 0.002365985419601202, 0.0030017297249287367, 0.0020420518703758717, 0.0017318617319688201, 0.0016796565614640713, 0.0026739109307527542, 0.0023023583926260471, 0.0021955491974949837, 0.0020119543187320232, 0.00295625114813447, 0.0015676983166486025, 0.0025152317248284817, 0.0017854541074484587, 0.0013062078505754471, 0.0021190326660871506, 0.0013236310333013535, 0.0026618100237101316, 0.0020312380511313677, 0.0014029511949047446, 0.0011951072374358773, 0.0018926096381619573, 0.0022744215093553066, 0.001608395716175437, 0.001758783939294517, 0.0014179496793076396, 0.0019053251016885042, 0.0027966231573373079, 0.0015148520469665527, 0.0021081708837300539, 0.0020357850007712841, 0.0017833487363532186, 0.0018243927042931318, 0.0019748939666897058, 0.00093711755471304059, 0.0017751749837771058, 0.0022012132685631514, 0.0015854979865252972, 0.0012332698097452521, 0.0019062132341787219, 0.0020065025892108679, 0.0016741924919188023, 0.0023638843558728695, 0.0016143606044352055, 0.0032206273172050714, 0.0018782014958560467, 0.0021517069544643164, 0.0018293791217729449, 0.0024957959540188313, 0.0018097322899848223, 0.0013214743230491877, 0.0019117547199130058, 0.0015114924171939492, 0.0017959249671548605, 0.0018181059276685119, 0.0020974855870008469, 0.0018319146474823356, 0.0012066945200785995, 0.0013828544178977609, 0.0019612968899309635, 0.0022003785707056522, 0.0013197427615523338, 0.0012639923952519894, 0.002255352446809411, 0.0022318020928651094, 0.0015102740144357085, 0.00071271427441388369, 0.0019056020537391305, 0.0022523002699017525, 0.0024740693625062704, 0.0020284468773752451, 0.0020810407586395741, 0.0020376024767756462, 0.002208564430475235, 0.0017973773647099733, 0.0020743128843605518, 0.0019670180045068264, 0.0020113345235586166, 0.0023061209358274937, 0.0017962480196729302, 0.0023845634423196316, 0.0025567617267370224, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 7723, 11675, -1435, 3004, -68, 7758, -1248, 4338, 14941, -3652, -7302, 11557, -15812, 14205, 1045, 11305, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.748514766106382e-05, 6.1701663071289659e-05, 4.9003374442690983e-05, 9.0435023594181985e-05, 5.8236906625097618e-05, 7.7043223427608609e-05, 6.0512153140734881e-05, 8.275109576061368e-05, 7.7028751547913998e-05, 6.6278029407840222e-05, 5.3563140681944788e-05, 4.7770594392204657e-05, 7.0167203375604004e-05, 6.715442577842623e-05, 8.582427108194679e-05, 6.3988882175181061e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -85,32,40,-39,-55,-10,-64,7,-66,13,6,-6,64,40,22,-49,22,1,82,6,-2,-68,127,56,76,16,9,24,-53,-106,-92,11,-46,-39,27,41,26,39,-12,49,-1,14,-69,2,-76,-26,-16,90,-18,24,-35,-13,-7,7,30,-37,-94,9,-22,61,58,23,11,3,-29,-67,-49,29,-58,-50,14,-18,9,-7,-72,-38,-53,14,-36,4,-47,50,91,-64,13,67,-3,36,43,-4,3,-25,-43,-37,-59,9, 
  /* [1][0][][] */ 41,21,13,-49,-60,-16,-1,22,-18,22,63,-39,30,-19,-81,-44,-18,-3,-69,30,-23,-72,15,52,14,-63,-10,-42,67,-97,98,-54,44,16,-32,54,42,78,-11,-40,41,22,-1,-18,-1,61,-127,-53,-35,-53,2,-28,38,-40,-38,56,21,-8,-35,1,24,45,0,-88,-9,-28,-65,3,-12,5,-85,-12,-33,-11,25,-56,1,11,29,-59,-7,-41,-80,-26,42,-24,-24,17,-68,2,-43,39,23,66,-55,51, 
  /* [2][0][][] */ 85,-32,47,37,7,-87,65,-4,10,-12,-26,-22,-105,-34,27,-25,-113,-56,-40,53,23,-19,-61,40,-38,-71,4,-32,-51,42,-38,127,-61,108,-35,-2,-33,-30,-14,-34,-111,79,74,12,-56,8,-6,-20,39,-8,-49,-47,53,-21,-33,57,44,-11,73,5,1,47,-39,12,78,21,5,-3,46,51,-50,-12,43,50,61,50,41,-80,72,69,82,6,-56,36,-71,22,36,82,0,0,-30,24,-40,56,-16,33, 
  /* [3][0][][] */ 0,-6,-10,15,9,-13,3,-77,-6,55,28,40,7,-8,-24,48,13,-37,24,5,11,127,39,-36,-25,27,-13,-4,53,-38,61,-17,-13,29,-14,-31,-2,33,36,-6,-76,-48,-39,25,-14,34,35,-7,-18,-48,-28,-18,42,-74,-28,-54,8,65,-21,2,-2,-11,-45,-1,25,41,-28,5,-9,-14,6,-63,-27,-44,30,-14,15,11,-33,-29,-32,15,-62,0,-14,-38,32,-8,-3,12,19,-12,49,17,-26,60, 
  /* [4][0][][] */ 35,1,-64,16,29,19,-43,18,-38,87,101,-15,3,9,-6,-64,21,-7,-41,38,10,-64,55,78,-49,-8,-127,16,-33,-56,3,12,-56,-39,11,71,19,36,13,48,-34,-35,43,-29,-14,12,-50,54,-41,63,13,11,39,-15,-69,26,50,-19,-6,-5,54,-8,31,8,-55,7,-47,6,-54,26,-47,63,48,-68,-29,-49,18,-57,-8,2,-38,76,-79,2,-25,28,25,-59,56,6,37,14,-70,-31,29,22, 
  /* [5][0][][] */ -68,40,28,-16,45,-21,63,-31,-21,29,5,-20,58,-19,-32,-46,-6,-38,37,26,-125,-37,-71,42,-23,-10,38,5,41,-76,-28,47,47,127,-13,43,12,23,38,-7,-24,96,73,-30,-8,66,30,3,3,16,-5,26,14,-40,33,-79,32,-41,-66,-64,58,105,-42,-25,74,-46,-79,-69,-64,-17,-51,-17,-14,9,-17,-40,23,-39,-34,-19,125,-39,26,-91,-73,43,29,-15,-29,44,26,-1,-21,40,2,80, 
  /* [6][0][][] */ 26,-10,-68,29,-27,-94,92,96,-39,59,-8,72,-127,-77,51,47,-12,-41,-11,8,-9,-11,-69,-56,-31,37,67,25,24,36,99,-53,16,-5,6,-75,10,24,28,57,28,33,-62,-23,6,-66,-66,19,28,-106,-14,60,30,20,-13,-53,72,43,21,10,-105,43,-96,18,34,7,-1,54,38,37,-8,-41,-36,29,83,24,60,-30,36,-51,5,-49,-66,67,4,-50,49,6,-42,51,30,37,-13,26,-35,95, 
  /* [7][0][][] */ 26,78,-24,-43,-30,-13,21,-7,-42,23,-44,-55,-49,13,28,0,-36,-50,-21,52,7,127,3,30,-32,3,17,25,41,40,75,-25,63,27,-13,-8,-4,-27,14,15,-71,-28,6,-49,25,-39,69,-20,31,-67,-87,-14,-49,-3,-11,-13,11,3,-73,13,-7,91,24,-32,-24,8,-38,13,-30,-26,-85,36,11,59,-34,31,-45,51,14,-73,-22,-23,51,-65,32,-26,-7,11,-11,58,-71,27,48,-37,-30,17, 
  /* [8][0][][] */ -3,74,-64,33,-27,-27,-76,33,-105,-25,22,11,-18,38,12,69,12,-48,-1,-2,18,-30,7,-15,-9,66,2,24,-1,-12,-54,-25,-19,-40,-30,-51,-28,29,38,19,3,-20,32,8,-45,-34,-7,-8,-22,-7,62,63,-1,-15,-62,109,-31,36,-16,-43,-30,8,28,48,-35,-72,-45,-7,-46,12,3,11,-14,-41,-110,-17,-49,22,-56,-44,-21,-18,-34,-32,10,9,16,21,20,75,-47,-10,-91,-127,16,-47, 
  /* [9][0][][] */ -11,17,-51,49,-37,-31,57,47,10,37,-30,81,-39,-19,31,127,6,13,65,18,31,31,25,-79,-57,-1,19,-9,0,-20,49,45,-28,-7,-1,-120,13,-22,-18,-25,-19,8,36,-25,1,9,24,9,32,73,13,-4,-50,-75,0,-13,-5,-19,73,-13,-63,51,-59,-23,75,-3,-17,12,-56,20,34,24,-10,72,-23,-14,-24,21,-45,-4,41,-10,51,-2,18,-22,-8,-23,-61,8,-2,-1,65,33,-35,-2, 
  /* [10][0][][] */ 71,13,-31,4,-48,-30,68,-3,29,-25,-30,-23,-113,-18,15,6,-86,-35,23,28,51,55,25,12,-68,93,43,-11,-63,-92,-22,-18,80,-54,49,-5,72,-107,94,123,3,-75,1,10,-7,-96,-1,60,36,85,-82,-38,-17,17,13,38,18,-71,92,57,-18,54,-70,-32,-2,-59,25,60,19,-36,-17,35,127,37,28,-85,38,-51,54,-16,-53,51,32,14,-45,-22,19,60,-51,-19,25,55,57,80,-29,12, 
  /* [11][0][][] */ -57,-41,34,-58,28,-12,-34,-51,27,-48,-3,-6,-17,10,3,6,-51,-14,55,3,-64,15,-63,-71,9,23,-46,52,40,-55,30,-34,23,-11,14,-15,-64,-17,-110,7,-80,60,-36,58,14,17,-17,-42,20,-24,-60,-50,22,30,63,-61,-42,-72,-4,-63,-12,-57,-15,-127,-1,-63,57,65,106,0,74,-20,-35,-17,54,-37,94,32,22,34,28,-16,-15,68,83,7,-18,-21,-70,-56,-9,28,40,33,65,74, 
  /* [12][0][][] */ 30,-18,23,-30,24,107,-11,29,58,54,-9,42,1,36,26,17,-68,44,20,51,127,21,56,-53,13,19,-68,-57,-22,63,24,0,22,-25,7,-44,32,-11,-28,-47,14,-21,35,43,-11,30,9,-12,-55,16,-3,25,-25,-26,9,7,-27,47,29,54,16,-83,4,-83,-2,97,-8,-31,3,-43,58,16,-13,9,-9,47,-1,38,-66,-2,-25,51,104,21,-14,61,-16,-57,56,0,-80,41,72,15,-11,-85, 
  /* [13][0][][] */ -14,38,8,-38,-39,-4,-5,-38,21,-36,-37,-76,46,-111,-31,-70,-26,-37,-92,-16,-94,-11,13,108,-63,13,110,9,5,-40,75,45,10,-25,-127,93,-41,-54,34,-65,109,4,-4,24,15,-95,73,-38,84,-17,-50,36,24,-3,-13,72,72,-66,-30,-13,46,39,-6,-90,-3,39,-31,42,-69,-28,-89,-4,-71,21,-51,-87,-104,24,26,88,-16,79,38,-99,47,35,24,-3,-30,-14,-15,19,-53,27,-17,-6, 
  /* [14][0][][] */ -5,10,-97,-33,96,100,-82,13,13,-42,89,11,46,-23,-55,-80,-64,29,41,127,-4,-59,-7,-1,47,29,-28,81,20,-6,-34,23,65,14,-36,16,-6,65,58,27,72,29,30,-2,-30,-57,53,-34,22,-1,17,-23,46,25,-28,41,13,70,-105,-16,-16,-74,-35,-97,12,-52,-44,2,-82,56,-9,42,-4,-29,-21,-38,40,-10,-43,-28,43,-14,9,-5,-10,60,-26,-30,-22,74,71,14,-4,-45,-46,-65, 
  /* [15][0][][] */ -81,-27,64,-56,6,-25,-48,-99,18,13,-19,55,-27,-29,51,117,-127,-25,22,-60,40,-2,-12,-71,19,-9,49,-63,-71,-116,-58,22,-41,37,84,-118,-23,-50,31,-40,-34,-26,27,-14,15,5,79,99,-45,-18,2,-47,-43,45,4,-70,-99,-19,125,22,-36,24,-105,18,-64,10,5,21,49,-77,81,-28,60,-38,-38,-45,18,20,45,6,-28,104,50,19,-5,-29,-108,18,-18,-69,-91,34,53,-23,-20,65, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0020181187428534031, 0.0026223207823932171, 0.0020826433319598436, 0.0038434884045273066, 0.0024750684387981892, 0.0032743369229137897, 0.002571766497567296, 0.0035169215407222509, 0.0032737217843532562, 0.0028168160934001207, 0.0022764333989471197, 0.0020302501507103443, 0.0029821060597896576, 0.0028540631756186485, 0.0036475313827395439, 0.002719527343288064, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -278, 195, -2690, -4574, -1158, 3006, -3106, -2073, -1508, -3456, 9033, -2261, -3532, 9338, 10631, -7061, 20370, 1386, -3950, 366, -3536, -2994, 940, -896, 218, -4199, -957, -4409, 1249, -6802, -1923, -649, 11764, -2296, -2293, 127, 1137, -2040, -743, 8963, -131, -1096, 1432, -4911, 12968, 13377, -2127, 13516, -1874, 10173, 19226, -1875, -683, 1176, -13, 10924, -49, -476, 12563, 6840, 6836, 9536, 7156, -7490, 416, -2124, -2826, 368, -2933, -1818, 3157, 2709, 11690, 912, -1957, 9418, -379, 707, 9222, -2635, -836, 14719, 1148, 1876, 19875, 1029, -3106, -2452, 2748, -6168, 12224, -178, -3616, -1914, -6134, -4476, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00032708491198718548, 0.0001888755796244368, 9.866581967798993e-05, 0.00015277854981832206, 0.00030444987351074815, 0.00031093589495867491, 0.00035865386598743498, 0.00027342347311787307, 0.00021493567328434438, 0.00017609845963306725, 0.00013254626537673175, 0.0003181228821631521, 0.00024437310639768839, 0.00012735885684378445, 0.00013201194815337658, 0.0001110600569518283, 9.4748320407234132e-05, 0.00025682334671728313, 0.00015994194836821407, 0.00011848840222228318, 0.00018877830007113516, 0.0003418728883843869, 0.00018122910114470869, 0.00030064032762311399, 0.00050482858205214143, 0.00020555852097459137, 0.00030548937502317131, 0.00013993709580972791, 0.00019601797976065427, 0.00011548887414392084, 0.00037138396874070168, 0.0002407667925581336, 0.000171322186361067, 0.00016760222206357867, 0.0002639555896166712, 0.0005743327783420682, 0.00017220999870914966, 0.00024553961702622473, 0.00037522803177125752, 0.00013249414041638374, 0.00019848150259349495, 0.00028205267153680325, 0.00022712384816259146, 0.0001360141031909734, 9.5866445917636156e-05, 0.00010721415310399607, 0.00022836081916466355, 0.00011067454033764079, 0.00024649378610774875, 9.3389084213413298e-05, 0.00010114916949532926, 0.0001285411708522588, 0.00011238492152187973, 0.00014566144091077149, 0.00027604136266745627, 0.00015083432663232088, 0.00024535131524316967, 0.00018465293396729976, 0.00020166038302704692, 0.00010448334796819836, 0.00018673042359296232, 0.00021624595683533698, 0.00011855625052703544, 0.00011915855429833755, 0.00021546780772041529, 0.00027367862639948726, 0.00019236025400459766, 0.00025748912594281137, 0.00021587233641184866, 0.00022483473003376275, 0.00022303420701064169, 0.00016337180568370968, 8.0468169471714646e-05, 0.00030899801640771329, 0.0003812624781858176, 0.00011741393245756626, 0.00013132630556356162, 0.00015875717508606613, 0.00016955510363914073, 0.00021310686133801937, 0.00031246268190443516, 0.00012440336286090314, 0.00020995771046727896, 0.00015879354032222182, 8.4664527093991637e-05, 0.00020334162400104105, 0.00014906401338521391, 0.00022729294141754508, 0.00018422474386170506, 0.00015083841572050005, 9.7193798865191638e-05, 0.0004002249042969197, 0.00022750641801394522, 0.00038140316610224545, 0.00010569743608357385, 0.00026329440879635513, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 25,109,5,11,-31,-12,51,45,80,-59,-127,59,1,-20,-7,-12,-125,28,13,4,37,70,65,63,17,0,-43,33,-43,4,10,-22,-56,17,-25,127,-17,109,1,11,28,-47,-14,35,-111,-53,4,-4,-19,-52,-54,-21,15,64,-11,-6,-86,-71,-39,-127,-82,-3,-111,-2,-21,70,71,-7,-14,30,37,10,-67,-4,52,14,40,-57,-72,31,19,-61,51,1,-94,-54,-36,-8,-127,25,-99,40,81,14,72,22, -44,-37,12,83,7,86,-1,-19,71,22,-106,60,-15,-84,-78,117,-127,71,37,86,127,15,92,127,20,14,15,53,0,127,-25,-127,68,117,5,40,55,117,-28,-108,127,-9,78,127,-56,-105,127,-42,-2,-116,-77,-45,-12,127,-14,-127,4,23,-100,-94,-25,-127,-17,105,-32,105,127,-27,15,127,127,10,-56,14,-23,-84,51,-63,-25,127,-11,-43,127,-67,-127,-34,74,38,72,127,-80,2,127,-14,127,57, 16,-126,35,15,-23,-9,18,70,60,70,-103,3,9,34,-46,-58,-61,22,20,24,55,66,47,83,24,-24,32,64,22,14,12,-46,-55,-73,-28,57,-16,44,10,24,-12,60,-18,60,-35,-50,5,18,21,-53,-59,-13,24,-6,15,-17,40,-84,-33,-100,-127,28,-120,-12,41,32,-60,-2,-2,-1,17,21,-37,-35,10,17,9,-7,-70,10,13,-112,18,8,-39,-66,-11,-32,-84,45,-25,32,45,51,44,-6, 
  /* [0][1][][] */ 83,2,92,121,4,-38,127,57,-22,-104,-103,127,11,-127,-63,36,-104,-67,66,-4,-106,19,-127,-101,-16,81,-120,127,-86,74,127,77,18,86,22,58,-127,92,-21,-103,64,-127,19,57,-127,-66,17,-107,-104,-77,-88,3,121,-84,89,-30,-127,5,-60,13,-37,-60,-38,51,-88,-18,104,-77,-71,22,-55,-127,-127,57,127,-101,122,58,-99,-31,127,-100,-42,123,-46,1,-9,79,-12,34,-97,27,1,-62,75,-3, -127,28,-92,127,-72,-127,-105,-127,75,0,31,45,-66,-99,-20,127,-101,-127,127,127,42,-127,-125,86,-127,127,8,77,-81,-17,-101,68,-127,108,127,-51,16,127,127,-86,-43,28,25,30,-77,-127,-56,-127,5,-127,-127,127,59,78,50,-70,27,43,76,-28,-4,-47,-125,127,-4,-127,122,127,20,49,-124,-89,-38,49,-105,-127,127,127,87,-56,-83,0,-108,88,-99,-69,127,127,109,121,-127,-127,-104,-50,89,127, 55,-29,116,68,-3,-25,39,77,-46,127,-70,68,24,-4,-127,83,1,-37,15,-17,-105,50,-77,-77,8,14,127,9,127,111,47,-95,-30,-127,-4,64,-119,19,-43,-78,8,111,25,69,-16,-37,14,-95,127,-87,-121,-2,105,-95,-127,21,89,16,-127,103,-33,-36,-8,54,127,-51,-17,-4,-88,-13,-37,-61,-110,-127,8,-63,25,-36,-127,-29,-63,-127,-32,127,-113,15,2,10,-26,16,-9,42,9,127,22,-17, 
  /* [0][2][][] */ 28,-127,31,-33,22,15,25,39,-47,-26,8,-61,32,-15,-42,53,-41,15,-26,55,14,38,22,-33,46,78,-2,7,-48,20,6,28,-20,-18,-19,-14,40,-6,4,-46,-14,14,-20,-29,-10,-33,1,-37,-9,7,-23,31,2,-26,-45,5,-8,-4,16,32,-45,25,59,-19,-34,41,-64,-13,30,13,9,73,-3,13,16,18,-51,-41,-6,21,12,-17,-19,-59,-89,29,-29,-18,-93,81,11,27,4,6,19,-23, -44,29,127,-21,127,67,-43,-9,-127,11,-87,-62,127,-11,-61,54,7,58,-6,-25,41,-10,68,-12,72,-57,-12,42,-29,81,-15,24,-72,36,2,-6,55,38,29,-127,-26,0,-127,7,11,-10,-25,-62,0,-67,-78,84,127,-74,-31,-86,-12,127,-45,13,61,-121,127,64,-34,58,-59,20,127,8,-9,61,-56,10,-20,-63,-29,-91,-49,-36,-12,-59,-39,-68,-80,127,16,-5,75,87,58,22,-43,-2,22,-6, 19,78,52,-41,8,-13,-19,49,2,78,19,-4,22,6,-57,111,-33,11,-32,36,2,32,0,-33,51,44,16,13,1,1,-2,-84,-63,-36,-13,2,25,-42,1,-40,-17,-1,8,-7,-37,-10,-7,-59,21,12,-54,18,69,-28,-1,17,5,2,-3,103,-37,57,38,-9,21,21,-92,29,48,0,2,84,38,-10,-2,11,-48,-31,-14,23,4,-68,-13,-28,-78,16,-33,-24,-78,65,51,22,6,11,20,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.01390110794454813, 0.0080272117629647255, 0.0041932971216738224, 0.006493088323622942, 0.012939118780195713, 0.013214775361120701, 0.015242788940668106, 0.011620497331023216, 0.0091347657144069672, 0.0074841841123998165, 0.0056332163512706757, 0.013520222157239914, 0.010385856963694096, 0.005412751343101263, 0.0056105079129338264, 0.0047200522385537624, 0.0040268036536872387, 0.010914992541074753, 0.0067975325509905815, 0.0050357570871710777, 0.0080230776220560074, 0.014529597014188766, 0.0077022365294396877, 0.01277721393853426, 0.02145521342754364, 0.0087362369522452354, 0.012983297929167747, 0.0059473263099789619, 0.0083307642489671707, 0.0049082771874964237, 0.015783818438649178, 0.010232588276267052, 0.0072811930440366268, 0.007123094517737627, 0.011218112893402576, 0.024409143254160881, 0.0073189246468245983, 0.010435433126986027, 0.015947191044688225, 0.0056310007348656654, 0.0084354635328054428, 0.011987238191068172, 0.0096527636051177979, 0.0057805995456874371, 0.0040743239223957062, 0.0045566014014184475, 0.0097053349018096924, 0.0047036679461598396, 0.010475985705852509, 0.0039690360426902771, 0.0042988397181034088, 0.0054629994556307793, 0.0047763590700924397, 0.0061906110495328903, 0.011731757782399654, 0.0064104590564966202, 0.010427430272102356, 0.0078477496281266212, 0.0085705658420920372, 0.0044405423104763031, 0.0079360427334904671, 0.0091904532164335251, 0.0050386404618620872, 0.005064238328486681, 0.0091573819518089294, 0.011631341651082039, 0.0081753106787800789, 0.010943287052214146, 0.0091745741665363312, 0.0095554757863283157, 0.0094789536669850349, 0.006943301297724247, 0.0034198970533907413, 0.01313241571187973, 0.016203654929995537, 0.0049900920130312443, 0.0055813677608966827, 0.0067471796646714211, 0.0072060916572809219, 0.0090570412576198578, 0.01327966433018446, 0.0052871429361402988, 0.0089232027530670166, 0.0067487251944839954, 0.003598242299631238, 0.0086420187726616859, 0.0063352202996611595, 0.0096599496901035309, 0.0078295515850186348, 0.0064106322824954987, 0.0041307364590466022, 0.017009558156132698, 0.0096690226346254349, 0.016209634020924568, 0.0044921408407390118, 0.011190012097358704, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 6573, 3661, 510, -846, 6617, 6714, 7837, 2206, -221, 8823, 1191, -2827, 2270, 2996, 430, -447, 5334, 11729, -325, 471, 3363, 10989, 9838, -2519, -3814, -879, 8296, -242, 1742, 922, 5080, -1409, 9571, 2168, 3685, -3650, 740, -5891, 328, 1754, 2289, 1295, 1861, -437, 843, 2872, 4489, 3197, 3255, 2524, 6534, 2483, -1959, 1823, 1415, 2540, 1566, 2615, 8227, 1588, -893, 7209, 3791, 3502, 3811, 7975, -4119, 1789, 7294, -1027, 7212, 1524, 3821, 3298, 3452, 2344, -481, 2770, 2162, 2929, 2349, 2621, 7618, 620, 2051, 4692, 1189, -985, 14270, -1000, 481, -1339, 10506, 2621, 252, -818, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00011862193059641868, 0.00010617381485644728, 0.00015968299703672528, 0.00018661131616681814, 0.00010366069909650832, 0.00011602354788919911, 0.000109210675873328, 0.00010727786138886586, 0.00020888268772978336, 8.6700267274864018e-05, 0.0002255070285173133, 0.00014932343037799001, 0.00017252820543944836, 0.00015508627984672785, 0.00016493484145030379, 0.00016711174976080656, 0.00012115018034819514, 7.1226175350602716e-05, 0.00013407347432803363, 0.00018528779037296772, 0.00017755500448402017, 7.7258584497030824e-05, 9.0293418907094747e-05, 0.00013282844156492501, 0.00013596579083241522, 0.00017441700038034469, 0.00010672232019715011, 0.00014875437773298472, 0.00015667373372707516, 0.00016065181989688426, 0.00015935876581352204, 0.00019605320994742215, 8.99197329999879e-05, 0.00020405832037795335, 0.00018954265397042036, 0.00016688245523255318, 0.00018552308029029518, 0.00010975354962283745, 0.00013572203170042485, 0.00019004542264156044, 0.0001663234579609707, 0.00017917892546392977, 0.00019858330779243261, 0.00021262589143589139, 0.00023702366161160171, 0.00014103359717410058, 0.00011886796710314229, 0.00018996228754986078, 0.00017839229258242995, 0.00018804760475177318, 0.00012333384074736387, 0.000169901511981152, 0.00017635754193179309, 0.0001899278286146, 0.00017653053510002792, 0.00018494209507480264, 0.0002085318265017122, 0.00016195850912481546, 0.00010043949441751465, 0.0001290230720769614, 0.00022521741630043834, 0.00010025479423347861, 0.00014961048145778477, 0.0001697369443718344, 0.00014202712918631732, 9.6894516900647432e-05, 0.0001372660044580698, 0.00021398111130110919, 9.9053169833496213e-05, 0.00017348364053759724, 0.00010622592526488006, 0.00015363392594736069, 0.00010325359471607953, 0.00013718532864004374, 0.00014657231804449111, 0.00012826888996642083, 0.00020651573140639812, 0.00013414530258160084, 0.00015623103536199778, 0.0001690578501438722, 0.0001657780958339572, 0.00015153124695643783, 9.9597295047715306e-05, 0.00014911568723618984, 0.00019383836479391903, 0.00014715276483912021, 0.00015613385767210275, 0.00021746776474174112, 6.7663313529919833e-05, 0.00018349844322074205, 0.00023676757700741291, 0.0001614012144273147, 7.9850426118355244e-05, 0.00015219410124700516, 0.00017323707288596779, 0.00012858332775067538, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -84,22,3,-27,-36,-62,-91,-23,59,-37,59,-49,97,-127,-26,-111, 
  /* [1][0][][] */ -94,41,-120,-96,-93,16,12,55,-70,-17,82,-50,56,127,21,68, 
  /* [2][0][][] */ -53,-16,-67,7,-7,-48,25,-7,-118,112,74,6,62,54,-74,127, 
  /* [3][0][][] */ -51,-79,2,-43,-83,14,-50,-127,-3,10,42,-74,-62,-39,-127,-48, 
  /* [4][0][][] */ 97,18,-28,43,-102,-4,-127,43,23,82,0,50,-12,1,-36,-122, 
  /* [5][0][][] */ -56,58,-62,-24,27,-76,-16,-60,89,-15,0,-31,-7,-127,-85,-80, 
  /* [6][0][][] */ -37,-36,1,28,-93,74,29,-14,-21,-23,127,-24,-19,-8,-121,28, 
  /* [7][0][][] */ -9,127,91,-100,83,47,54,-82,71,61,-90,-11,40,30,119,106, 
  /* [8][0][][] */ -38,-4,33,21,30,2,49,127,-49,-12,-32,-66,24,67,-73,-35, 
  /* [9][0][][] */ 9,53,90,15,-109,-61,-102,-127,54,17,111,45,-64,-94,55,-13, 
  /* [10][0][][] */ -12,-127,18,-70,-88,52,12,29,-13,-55,-19,46,-35,26,-115,16, 
  /* [11][0][][] */ 94,-68,-13,97,-80,-24,57,-2,127,106,-50,53,15,-72,-21,102, 
  /* [12][0][][] */ -65,-31,127,-15,60,4,18,59,76,-6,110,60,-38,16,-75,31, 
  /* [13][0][][] */ -13,-42,23,35,3,15,127,40,-114,15,14,7,-32,127,88,-65, 
  /* [14][0][][] */ 127,-56,103,-27,76,28,119,52,88,57,54,17,31,-40,38,-51, 
  /* [15][0][][] */ -20,110,27,-37,31,127,-87,66,-73,-16,-32,-18,-22,115,-30,-16, 
  /* [16][0][][] */ -49,56,118,-50,23,73,11,-12,-6,16,-23,32,84,-4,88,127, 
  /* [17][0][][] */ 12,127,100,-87,-11,-46,-3,-56,-65,62,-19,37,-44,-16,119,-45, 
  /* [18][0][][] */ -88,-11,-66,-78,107,78,-46,-51,41,63,127,64,0,104,-46,-3, 
  /* [19][0][][] */ 46,127,82,69,34,-36,-6,-4,-5,112,56,108,63,64,-51,46, 
  /* [20][0][][] */ 70,-25,10,71,-61,-9,-9,51,-21,-40,-127,-55,74,-68,22,-28, 
  /* [21][0][][] */ -103,-59,21,75,-52,-4,-127,70,-29,44,-13,24,-15,10,-70,0, 
  /* [22][0][][] */ 7,13,-67,-63,127,-6,-33,45,74,73,31,66,-12,15,6,20, 
  /* [23][0][][] */ -59,12,-34,-8,31,72,119,69,-2,127,-45,-17,3,25,-51,-48, 
  /* [24][0][][] */ 27,-65,55,-40,127,5,123,-36,71,22,12,-26,-45,21,22,-20, 
  /* [25][0][][] */ 127,-66,59,38,17,-11,-38,97,106,-47,-41,24,115,-50,102,57, 
  /* [26][0][][] */ 66,46,69,87,56,-13,-57,-6,3,63,16,127,9,-55,39,-47, 
  /* [27][0][][] */ -47,45,-102,14,-17,101,33,-95,74,-99,119,26,42,-46,127,92, 
  /* [28][0][][] */ -37,46,-91,-127,10,-48,22,-53,-109,98,-52,5,-17,51,-20,60, 
  /* [29][0][][] */ 84,102,-84,56,19,66,-58,-40,32,51,15,74,-127,34,-22,84, 
  /* [30][0][][] */ -36,49,-78,-22,41,-42,1,36,-53,49,-25,3,8,34,-23,127, 
  /* [31][0][][] */ 38,-103,119,21,59,-89,-72,17,-13,-25,-2,-36,-93,49,56,127, 
  /* [32][0][][] */ -63,72,15,54,-127,75,8,59,22,-121,14,-91,30,34,43,38, 
  /* [33][0][][] */ -82,-15,77,90,-7,15,-29,-11,-33,-62,3,-16,-8,-5,12,127, 
  /* [34][0][][] */ -11,27,-75,-99,71,-11,7,68,19,-4,-11,-33,-56,-22,-26,127, 
  /* [35][0][][] */ 73,-15,25,9,-2,18,-92,-20,-17,-127,-50,24,1,-26,66,-11, 
  /* [36][0][][] */ 6,34,-122,-33,39,127,3,29,-32,8,37,16,21,19,-75,30, 
  /* [37][0][][] */ 36,27,76,-48,59,-109,44,-7,-87,67,-57,-16,15,28,127,61, 
  /* [38][0][][] */ -45,127,41,-33,37,15,77,-80,6,-5,-100,28,-58,-95,-91,26, 
  /* [39][0][][] */ 91,45,-127,-104,-11,-12,11,-77,-19,-11,-6,-31,81,20,-106,-84, 
  /* [40][0][][] */ -47,32,-79,-91,-53,-20,1,-127,5,6,14,-52,37,95,37,74, 
  /* [41][0][][] */ -51,-67,10,127,-15,-11,-79,6,-23,-17,65,-78,-41,-3,-37,35, 
  /* [42][0][][] */ -32,68,-16,-127,10,22,-2,-38,63,8,-41,7,81,-25,-33,8, 
  /* [43][0][][] */ 6,34,0,22,127,24,19,22,12,24,-3,-79,-115,-52,-15,-14, 
  /* [44][0][][] */ 58,-31,7,50,-24,-6,-8,41,23,-34,51,17,127,17,-45,-10, 
  /* [45][0][][] */ 9,-97,-57,49,-42,-83,-5,56,25,-9,20,23,-82,127,24,-28, 
  /* [46][0][][] */ -45,-99,79,114,3,21,-112,95,65,-42,33,-37,26,54,47,127, 
  /* [47][0][][] */ -30,-38,10,59,-1,-4,63,9,7,-66,-127,-32,50,-21,-46,10, 
  /* [48][0][][] */ -63,94,-8,-23,18,73,-7,-127,28,-25,37,-39,40,-119,-54,-2, 
  /* [49][0][][] */ -59,25,40,-42,-19,-2,127,118,-54,-30,1,22,-43,48,-37,48, 
  /* [50][0][][] */ 42,11,-75,48,33,-107,-50,-4,-83,46,-36,10,21,-74,-127,-33, 
  /* [51][0][][] */ -42,45,-46,127,-33,33,-34,-68,-15,-74,18,-25,-2,25,0,118, 
  /* [52][0][][] */ -127,4,5,-17,41,51,79,18,26,-90,-28,-39,-96,-40,-88,-17, 
  /* [53][0][][] */ -45,-69,-68,-127,-40,-15,-3,87,25,-69,-34,25,-18,40,70,108, 
  /* [54][0][][] */ 5,-65,3,-1,-43,71,74,-15,-15,-101,58,33,-15,-8,-127,53, 
  /* [55][0][][] */ -14,-29,-23,4,63,-22,51,66,-55,-45,-127,-37,50,-34,-41,31, 
  /* [56][0][][] */ 71,-11,-31,-4,-127,18,-90,-3,-17,-21,-18,0,74,-31,35,6, 
  /* [57][0][][] */ -56,2,-13,-36,127,23,50,49,-28,67,20,29,-72,81,-84,-13, 
  /* [58][0][][] */ 35,11,-9,-33,55,-14,-40,-58,78,-127,-67,7,-73,-23,-2,50, 
  /* [59][0][][] */ -81,-25,-9,-3,22,60,-121,-63,81,127,-99,19,-12,19,-31,-3, 
  /* [60][0][][] */ 13,-59,1,24,-127,-43,38,16,-8,54,-20,40,1,-52,26,43, 
  /* [61][0][][] */ 15,22,-103,-31,-55,-22,-127,-112,-13,-8,64,121,75,-48,107,62, 
  /* [62][0][][] */ 40,-40,41,-15,-12,47,47,122,-54,127,45,95,11,46,88,122, 
  /* [63][0][][] */ 27,-114,-17,-18,-63,8,53,-29,-16,-23,-10,-9,-44,127,112,27, 
  /* [64][0][][] */ -15,-11,-127,-53,27,57,21,-19,-29,-95,48,0,81,-35,-70,119, 
  /* [65][0][][] */ -16,-5,79,60,60,-24,87,72,-63,-5,-127,-72,32,101,-72,-32, 
  /* [66][0][][] */ -38,-127,-11,-104,-58,-116,46,-37,12,-53,0,75,-53,-51,-72,53, 
  /* [67][0][][] */ -8,-63,-96,-35,-48,108,-10,-127,-58,-38,-42,-87,25,-5,-44,15, 
  /* [68][0][][] */ 99,41,36,-31,-85,31,-94,-93,-127,-123,-21,-40,70,3,72,-57, 
  /* [69][0][][] */ 45,13,53,-26,-7,-51,-46,28,2,127,-33,10,5,36,89,-32, 
  /* [70][0][][] */ 36,-12,-30,75,-127,26,7,-101,74,119,21,54,59,-55,-6,12, 
  /* [71][0][][] */ 125,-53,54,69,-69,-37,89,-33,127,15,-57,11,64,-53,50,3, 
  /* [72][0][][] */ -25,-73,32,108,72,-8,-127,112,107,20,57,0,-35,-67,-97,103, 
  /* [73][0][][] */ 49,12,53,-127,62,-65,-71,29,-13,106,-41,19,21,-60,15,-33, 
  /* [74][0][][] */ 101,11,51,47,-127,-38,43,-7,-91,-43,11,-45,14,-77,10,26, 
  /* [75][0][][] */ 75,127,-93,31,49,54,-21,-26,-12,-28,52,64,-103,57,62,79, 
  /* [76][0][][] */ -73,-45,0,-46,-58,-12,102,-3,-68,14,120,63,-55,-127,-36,100, 
  /* [77][0][][] */ -78,127,-27,6,-52,-74,41,85,48,-64,-12,88,-29,73,2,103, 
  /* [78][0][][] */ 127,37,-75,10,-57,9,-112,-40,12,-12,-78,24,23,-115,22,53, 
  /* [79][0][][] */ -85,-37,127,79,-8,-67,-48,-41,-15,33,4,16,-76,120,-76,74, 
  /* [80][0][][] */ 51,82,24,-73,0,5,127,-19,39,19,-28,29,60,-55,21,-6, 
  /* [81][0][][] */ 63,-21,-2,-127,90,30,15,89,124,-2,-24,-29,-65,16,-27,-88, 
  /* [82][0][][] */ 98,41,68,14,127,-120,57,45,-21,106,-41,14,-7,-56,45,-127, 
  /* [83][0][][] */ -57,66,9,37,99,70,108,127,-6,67,-13,-52,-88,114,-80,-75, 
  /* [84][0][][] */ -3,-96,17,68,-3,-80,-71,33,-88,51,-74,-15,-127,50,-18,-64, 
  /* [85][0][][] */ -55,78,-34,-28,-20,-56,-19,-38,-4,26,-19,-62,-127,-94,-46,10, 
  /* [86][0][][] */ -8,59,97,112,41,-38,67,3,25,29,-67,-69,26,66,-127,-75, 
  /* [87][0][][] */ -7,52,127,-30,-91,-38,28,4,43,-20,0,39,-54,3,-2,-20, 
  /* [88][0][][] */ -37,-69,-127,11,35,38,-5,29,-33,-81,-83,-82,112,-13,-14,47, 
  /* [89][0][][] */ 16,34,17,-120,11,-64,-38,44,127,4,33,-78,21,-15,60,-57, 
  /* [90][0][][] */ -5,67,37,22,-39,35,36,127,3,-54,-3,107,30,7,-28,79, 
  /* [91][0][][] */ -59,6,0,61,67,36,-28,-108,-41,32,-19,7,-98,-127,-55,-13, 
  /* [92][0][][] */ -54,53,12,-1,-127,6,-69,77,-37,70,83,60,-19,-35,31,3, 
  /* [93][0][][] */ 83,30,92,47,-127,-78,6,61,-31,-51,-5,-70,14,-41,-17,11, 
  /* [94][0][][] */ -26,-127,22,-112,23,35,-19,1,89,-35,-2,65,5,55,-47,36, 
  /* [95][0][][] */ -36,-65,-23,-49,127,120,-24,40,108,46,-80,46,-22,109,-74,51, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0016959626227617264, 0.0015179893234744668, 0.002283021342009306, 0.0026680210139602423, 0.0014820587821304798, 0.0016588129801675677, 0.0015614079311490059, 0.0015337740769609809, 0.0029864395037293434, 0.0012395718367770314, 0.0032241211738437414, 0.0021349084563553333, 0.0024666718672960997, 0.0022173009347170591, 0.0023581080604344606, 0.0023892316967248917, 0.0017321094637736678, 0.0010183355771005154, 0.0019168766448274255, 0.002649098401889205, 0.0025385410990566015, 0.0011045822175219655, 0.0012909439392387867, 0.0018990760436281562, 0.0019439314492046833, 0.0024936764966696501, 0.0015258314087986946, 0.0021267724223434925, 0.0022399972658604383, 0.0022968726698309183, 0.0022783856838941574, 0.0028030138928443193, 0.0012856012908741832, 0.0029174645897001028, 0.0027099309954792261, 0.0023859534412622452, 0.0026524623390287161, 0.0015691694570705295, 0.0019404463237151504, 0.002717119175940752, 0.0023779612965881824, 0.0025617587380111217, 0.0028391871601343155, 0.0030399570241570473, 0.0033887769095599651, 0.0020163869485259056, 0.001699480228126049, 0.002715930575504899, 0.0025505120866000652, 0.0026885559782385826, 0.001763329841196537, 0.0024291174486279488, 0.0025214208289980888, 0.0027154379058629274, 0.0025238939560949802, 0.0026441558729857206, 0.0029814231675118208, 0.0023155547678470612, 0.0014360045315697789, 0.0018446698086336255, 0.003219980513677001, 0.0014333637664094567, 0.0021390123292803764, 0.0024267646949738264, 0.0020305917132645845, 0.0013853212585672736, 0.0019625208806246519, 0.003059332724660635, 0.0014161838917061687, 0.0024803320411592722, 0.0015187342651188374, 0.0021965363994240761, 0.0014762382488697767, 0.0019613674376159906, 0.0020955752115696669, 0.0018338871886953712, 0.0029525987338274717, 0.001917903427965939, 0.0022336677648127079, 0.0024170554243028164, 0.0023701642639935017, 0.0021664740052074194, 0.0014239633455872536, 0.0021319382358342409, 0.0027713477611541748, 0.0021038739942014217, 0.0022322784643620253, 0.0031091822311282158, 0.00096739653963595629, 0.0026235156692564487, 0.003385115647688508, 0.0023075870703905821, 0.0011416382621973753, 0.0021759509108960629, 0.002476806752383709, 0.0018383826827630401, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27278, -6515, 5455, -5826, 7058, -12043, 18100, -1793, 9725, -6499, 14222, 11661, -2220, -29358, -139, 4256, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 9.2323432909324765e-05, 5.276089723338373e-05, 6.7756220232695341e-05, 6.443739403039217e-05, 7.6154399721417576e-05, 0.0001209412221214734, 7.6886200986336917e-05, 7.7198783401399851e-05, 0.0001220166013808921, 0.00011387516133254394, 8.6780746642034501e-05, 8.2965489127673209e-05, 9.1213987616356462e-05, 9.1386908025015146e-05, 9.4026232545729727e-05, 7.4960240453947335e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 22,31,3,15,-41,-75,-12,-17,-19,-60,23,-8,52,-60,53,19,-81,-13,19,19,88,22,-77,8,-11,64,127,65,2,68,46,-31,1,18,15,-26,37,23,18,-4,118,17,62,-25,-7,-2,18,-31,27,-44,88,-4,-45,-19,11,35,-14,-40,-2,28,-9,39,-50,-1,22,9,62,25,10,-23,7,28,-4,31,8,32,62,-43,43,19,-9,37,35,41,-49,8,-18,60,2,13,-99,-12,17,16,107,72, 
  /* [1][0][][] */ 18,40,-65,-8,-20,-54,107,-79,-77,-48,-60,-36,-7,-44,9,-65,-39,-23,-48,-3,8,-111,127,-47,-3,14,3,73,-64,2,-44,24,-44,60,33,16,-13,36,-61,84,50,21,34,-50,69,-68,7,37,-106,-6,62,-115,-18,42,68,71,33,17,-72,20,-39,1,1,-15,36,36,117,7,-36,-126,3,12,26,33,-18,24,-64,-16,126,-44,34,-19,56,-69,-25,-81,-22,9,-40,-26,22,20,67,-64,-33,68, 
  /* [2][0][][] */ 1,-25,11,0,76,50,-48,31,-74,38,12,-12,38,0,24,37,36,-22,-127,-16,-17,-31,-22,26,9,-19,-45,22,-41,-18,-12,78,-26,-41,-19,11,-57,31,-41,-32,66,4,-6,41,11,43,10,-13,-99,15,-30,44,-29,63,23,-64,44,16,48,34,-36,-16,-24,47,32,-16,-34,-9,-13,-1,0,-34,25,52,25,70,-62,1,-22,-38,26,33,44,-20,-15,-52,-18,-43,-30,-35,-21,73,-4,-13,94,-56, 
  /* [3][0][][] */ 33,-34,-15,-124,15,-24,105,-27,12,127,-84,-27,13,-27,-32,70,62,53,-9,14,-62,35,30,21,-33,68,49,3,-31,-9,-57,62,4,-51,26,-30,-3,-43,-56,57,-20,-13,-61,32,54,-56,-11,43,46,-25,25,-14,83,51,44,-18,10,-35,1,-65,-36,25,54,-14,-39,-35,108,-41,-34,-12,-37,8,12,-69,-9,-75,9,-45,115,-9,-15,-57,-67,-56,-40,-47,83,82,-5,48,-60,-9,30,-92,-20,8, 
  /* [4][0][][] */ -25,73,25,24,-28,13,-33,-22,27,-37,10,-24,19,36,-17,12,-9,-51,-26,-56,34,-36,-56,12,-31,-24,-27,10,-35,127,-56,-18,4,-18,3,-55,66,43,-27,7,24,20,37,-45,-46,8,50,-23,23,-10,-44,-26,-52,20,33,28,-14,67,-21,29,-26,-60,-10,21,60,30,-48,2,-2,-3,2,-54,-11,60,59,64,-22,14,-61,38,19,67,54,-53,47,-57,-35,-68,-40,-44,-46,-4,-6,20,25,-28, 
  /* [5][0][][] */ -3,-7,56,-33,-7,-17,-18,9,49,0,-31,0,-8,-34,21,-17,-20,-6,-51,-41,-27,7,-21,9,22,-53,64,-24,1,49,6,81,-8,-90,21,9,-34,-37,-29,4,-47,1,-31,8,-4,34,-87,24,-20,13,50,-20,26,-79,2,18,-31,-60,10,-44,44,26,24,56,-43,11,112,-17,-16,-26,24,21,-10,35,37,7,-2,-18,127,43,-27,-1,-28,33,40,73,5,97,4,-38,-1,5,7,-16,-41,28, 
  /* [6][0][][] */ 10,-51,51,17,-36,87,-34,-89,-4,-67,-79,68,7,20,-22,74,8,37,19,-41,-63,-24,-97,-52,-7,-48,-24,68,-116,47,-23,-25,30,93,-4,-2,-9,-40,24,-28,-39,48,45,-43,27,67,-72,-11,43,16,-66,-127,96,17,-56,-11,20,-31,11,-18,-13,-43,35,2,48,-46,-52,-35,-97,25,-1,-54,-15,-71,32,-98,80,5,-47,38,-37,83,13,-66,62,-41,-24,8,-94,55,-81,60,37,-60,62,-88, 
  /* [7][0][][] */ 2,-14,-49,50,-13,4,21,2,-97,-4,63,35,-1,-48,0,-32,-15,5,14,-10,-71,5,-39,-45,65,31,-4,64,-3,25,21,29,-40,-127,25,81,-10,16,-66,4,-4,-23,-50,-54,18,36,46,71,-7,42,-40,30,1,-30,62,-35,-12,21,-68,-40,42,-3,-9,-34,60,-55,79,-24,-56,-16,73,-7,-7,-15,-74,-26,19,-29,76,-31,-2,-16,-79,-44,35,8,-65,44,19,13,5,23,49,-19,89,-7, 
  /* [8][0][][] */ -10,-58,-5,8,-36,-19,27,-30,-3,-5,52,39,18,40,-46,-21,68,5,12,9,-17,-79,-50,-15,-20,-23,70,1,-31,52,6,-35,-21,11,2,3,-54,-26,41,-25,-3,62,85,-47,14,-6,34,-10,39,-10,66,-23,14,2,-77,10,-34,127,-75,4,-4,-59,-49,-2,-86,-24,-4,13,-2,8,28,-14,-28,-122,46,-109,19,5,-60,15,-28,-8,17,70,71,-68,-53,55,-49,84,11,-11,-55,7,-4,-54, 
  /* [9][0][][] */ -23,-30,-19,16,5,23,-1,42,-43,-3,50,54,-22,38,23,-33,-11,27,-18,-40,1,38,-1,6,-13,21,7,15,32,-12,11,-7,-13,-22,5,47,-16,-14,-1,3,-16,-32,-6,-1,10,25,-13,34,-38,14,-13,25,105,21,5,-1,17,-19,38,10,-30,0,68,1,9,10,52,-2,29,-1,-15,19,10,-127,-37,-110,-28,-2,34,3,-6,25,-3,-44,32,11,-41,0,3,100,35,27,51,37,-12,14, 
  /* [10][0][][] */ 28,43,9,5,-5,19,-37,-16,62,6,-44,29,13,11,-2,-56,-28,-9,18,-5,22,-16,-26,-28,12,-16,-98,47,-19,50,3,14,17,10,-24,9,16,2,-14,-3,34,-15,36,-42,-29,-4,12,22,17,10,9,-22,-27,-12,11,29,2,5,-8,-13,-13,-41,-13,13,-8,-22,-94,-21,-57,-16,42,-20,-11,26,30,19,43,-11,-92,10,-10,28,-2,-9,5,1,-72,-127,-13,26,9,17,57,-35,25,21, 
  /* [11][0][][] */ 22,-42,8,12,-71,32,23,-12,69,-22,-19,-45,27,10,8,-11,-25,53,24,-57,0,38,-6,-31,47,18,66,4,26,-58,-35,23,10,108,-109,4,6,-18,63,14,-55,63,-9,17,-35,0,-18,-12,53,-15,-24,-7,-30,19,-85,93,-28,8,-12,-24,17,1,-13,-77,-13,-61,-127,-93,7,-36,-90,42,58,26,-15,4,26,60,-113,-37,-12,-9,-6,-4,-17,-12,66,84,26,-62,8,15,-43,19,104,38, 
  /* [12][0][][] */ 19,25,-35,-27,26,-12,2,48,45,-40,17,11,-6,-13,-1,13,16,-48,-29,13,18,47,4,49,-49,-38,-127,-5,75,-29,28,4,-20,-77,60,-14,31,-18,-1,11,-8,-65,7,35,45,-19,17,-21,-74,10,-58,89,77,-20,37,-77,24,12,-31,-28,11,44,59,10,-20,-15,31,29,96,27,22,26,4,-22,-20,-2,-40,-44,43,-66,16,-50,20,-43,5,0,-1,-97,-9,27,-47,18,6,65,16,40, 
  /* [13][0][][] */ -20,15,-65,20,40,27,-13,22,26,55,-39,37,-57,-35,67,-56,12,42,58,14,-23,-43,12,20,34,48,-22,28,15,33,54,-13,-17,67,5,29,19,-38,-70,-53,9,-15,-2,19,45,35,-45,41,-50,41,8,3,-23,-37,74,35,11,-51,0,-16,29,25,1,-28,10,76,127,45,17,3,-35,-13,32,45,-77,42,13,-57,127,-41,-17,-28,19,-2,19,50,-38,-13,-5,-17,5,45,38,22,58,50, 
  /* [14][0][][] */ -20,58,12,18,-83,-48,26,28,-62,-21,82,9,-79,-5,69,-26,-34,44,-85,38,-11,7,-105,17,-51,3,-51,-114,2,-8,32,88,-69,40,15,-10,-27,-77,23,-46,28,-24,107,-32,-13,48,-52,32,-19,-42,81,18,20,11,-58,31,-70,41,-15,38,46,66,10,52,20,-31,10,-71,50,63,48,44,-58,32,8,10,30,-18,32,19,-84,102,9,-115,86,0,-12,3,-127,-13,-25,13,-34,20,39,50, 
  /* [15][0][][] */ 82,-34,30,39,51,8,-4,2,11,28,-62,-14,57,71,-3,-13,-4,-3,-82,45,3,-41,4,21,58,-33,80,30,47,-24,-40,67,60,45,-15,-91,62,66,54,51,80,30,-46,6,-31,-122,22,-41,-29,-8,-28,1,-23,-48,-8,42,1,3,-5,25,-13,-57,-46,30,34,30,-72,41,-13,-37,-7,-5,6,-127,-49,-95,-25,34,-111,35,76,-32,52,23,-54,-8,-13,-24,37,84,19,-55,-32,-40,45,-38, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0039237458258867264, 0.0022423381451517344, 0.0028796393889933825, 0.0027385891880840063, 0.0032365620136260986, 0.0051400018855929375, 0.0032676635310053825, 0.003280948381870985, 0.0051857056096196175, 0.0048396941274404526, 0.0036881815176457167, 0.0035260331351310015, 0.0038765943609178066, 0.0038839434273540974, 0.0039961147122085094, 0.0031858100555837154, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 9050, 955, -3318, 9675, -1859, 2768, 654, -2894, 1707, -4449, 736, -957, 7242, -2922, -1822, -6639, -476, 761, -7853, -1055, -2235, 2148, -3681, -427, -21, 7192, -7704, -5723, -1761, -4643, -620, -1513, 17238, 33, -2648, -4227, 633, 13969, 1902, 9214, 923, 1957, -1007, 9111, -617, 172, 9197, 4015, -6960, -175, -3823, -957, -1764, -3733, -1183, 2206, -496, 6498, -1463, 2464, -669, -1744, -4406, 7086, 7603, -1211, 12303, 11941, -1470, -419, 6760, -2051, 51, 1777, -1598, -524, 20149, 6933, 9707, 11622, 11672, -1602, 9902, 12849, 5, -3316, 13416, -4559, 9418, -1567, -3788, -4720, -1650, -1033, 16937, -2178, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012749445158988237, 0.00029515352798625827, 0.00021231852588243783, 0.00013050192501395941, 0.00025407140492461622, 0.00060659722657874227, 9.5899609732441604e-05, 0.00019701769633684307, 0.00033101628650911152, 0.00024131403188221157, 0.00026076630456373096, 0.00021385954460129142, 8.935263758758083e-05, 0.00016579161456320435, 0.00022318182163871825, 0.00015791549230925739, 0.00032004830427467823, 0.00039662115159444511, 0.00014200118312146515, 0.00032982672564685345, 0.00020894590124953538, 0.00029769298271276057, 0.00019702037388924509, 0.00011641373566817492, 0.0026999262627214193, 0.00015377554518636316, 0.00027796285576187074, 0.00013251065684016794, 0.00031094768201000988, 0.00012419912673067302, 0.00016029429389163852, 0.00026936843642033637, 6.3973275246098638e-05, 0.00062386493664234877, 0.00011980041745118797, 0.00024323689285665751, 0.00032069359440356493, 0.00010178905358770862, 0.00037951237754896283, 0.00010959677456412464, 0.00069151865318417549, 0.00021685419778805226, 0.0002355604519834742, 0.00011493200872791931, 0.00015243288362398744, 0.00032255597761832178, 0.00011977495887549594, 0.00023431239242199808, 0.00013018582831136882, 0.00051257270388305187, 0.00027181909536011517, 0.0002255211875308305, 0.00013510670396499336, 0.00023791306011844426, 0.00061212043510749936, 0.00028705334989354014, 0.00029145483858883381, 0.00038167138700373471, 0.00037808300112374127, 0.00039572693640366197, 0.00022440589964389801, 0.00023760943440720439, 0.00015658710617572069, 0.00013680971460416913, 0.00027568085351958871, 0.00034696111106313765, 0.00012682758097071201, 0.00013221865810919553, 0.0002218166773673147, 0.00035278560244478285, 0.00013040741032455117, 0.0002687003870960325, 0.00041660727583803236, 0.00019260728731751442, 0.00019512900325935334, 0.00024212432617787272, 5.8566351071931422e-05, 0.00018431807984597981, 0.00012651795987039804, 0.00015490119403693825, 0.00010861900227610022, 0.0002956794633064419, 0.00011809839634224772, 0.00023114330542739481, 0.0001325224875472486, 0.00025132516748271883, 0.000120634249469731, 0.00024261878570541739, 0.00012649327982217073, 0.00027514633256942034, 0.00019388073997106403, 0.00024845477310009301, 0.00044506802805699408, 0.00018333882326260209, 0.00010771529196063057, 0.00027279724599793553, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -36,-20,-22,-59,99,-8,25,6,-1,-3,-16,-9,-11,-2,-8,-17,-13,2,-28,-16,-10,21,-15,48,3,-20,-37,8,22,1,28,11,-8,-3,12,1,1,-87,-43,11,-3,-52,64,-46,-22,39,-60,-25,-8,5,-11,56,-59,16,47,-25,5,-39,25,-34,-20,-13,9,-71,-4,-11,-35,-39,-10,33,-12,16,31,1,-26,-2,-2,4,127,-54,-34,3,-127,-23,-31,-13,-8,1,-22,-9,-27,-17,4,45,-5,16, -11,35,36,-81,-41,2,125,-39,1,-2,-34,19,-30,-5,-88,105,-7,75,53,-19,-8,127,32,122,35,7,40,70,127,54,127,-26,-88,-15,-61,-16,-17,-109,127,-53,-26,-127,-11,-91,58,-37,-25,-20,56,-3,18,127,-85,57,-66,-3,-75,-26,10,17,-19,-122,-109,-53,-46,5,-3,-113,-5,18,-55,107,-127,-20,6,-28,-127,-72,3,-127,-24,9,14,-74,95,84,-99,21,-127,9,27,-6,16,127,-32,-94, -24,-1,14,-9,85,-4,34,-45,-15,20,-17,-3,-44,0,-9,-25,-11,-4,-29,-26,-28,19,-25,58,-2,-4,-7,-5,32,58,26,22,7,-1,4,80,2,-65,-38,12,1,34,25,-29,-1,-36,-40,-37,3,-6,-8,28,7,4,24,-20,57,-29,14,-32,-9,-7,-26,-49,-11,-26,127,-51,16,25,28,-3,4,0,-7,22,-78,37,-27,-37,-40,-3,-125,-46,2,-31,-11,-29,-25,-21,-51,52,17,54,-12,2, 
  /* [0][1][][] */ -106,-16,16,-55,58,75,-44,5,1,-11,-33,-11,-107,31,15,44,-16,37,105,11,34,-25,44,-22,41,9,66,34,-5,-10,-17,-12,-117,-23,57,14,-1,-127,-50,-127,-30,7,107,-34,-55,127,-92,-88,65,71,21,-35,-91,83,53,-34,60,-41,46,-16,15,-1,107,-74,-18,22,-21,-73,-17,2,-127,33,82,127,-10,-72,-74,-46,-59,-59,-105,-1,-16,-46,13,33,-102,44,-104,127,121,-62,127,0,-31,12, 53,127,127,113,-127,-127,127,-40,127,127,-70,-58,-103,127,-22,97,127,-127,127,127,127,-91,51,-127,-127,-127,127,127,-118,127,-27,127,-127,127,127,-74,127,99,11,-32,127,-21,-127,-127,127,-30,127,115,127,-127,127,-95,120,127,-127,127,-127,127,-127,127,-96,127,127,-127,127,127,-17,127,-99,-127,-5,-127,29,125,127,74,11,-127,95,-124,19,127,94,127,127,80,-127,127,-77,56,7,-12,-82,-21,-127,-33, -127,-34,51,-63,33,46,-50,1,-31,-4,-3,127,-127,29,29,52,-24,42,105,13,20,-23,9,-13,41,3,48,18,13,18,20,-2,-96,-34,78,127,-11,-89,-70,-82,-30,34,33,-35,-42,-67,-85,-127,62,70,3,-40,127,9,87,-51,93,-28,53,-50,2,-30,-111,-50,-63,-4,-64,-77,-15,9,-121,0,50,-100,-6,127,-127,-32,-45,33,-127,-2,-43,-100,-19,41,-88,38,-76,-58,127,127,-25,-22,-60,-6, 
  /* [0][2][][] */ -13,-49,-51,6,23,-8,-20,58,-11,21,25,-49,94,2,-19,-37,-4,-13,-78,-28,2,-27,47,-46,4,4,-17,3,-12,-6,-16,8,31,-6,-7,-7,-8,-32,-16,-14,-40,35,41,-22,27,5,-61,-5,-20,10,-17,-7,6,-49,29,-13,19,-32,22,-23,14,27,-2,10,-49,-24,126,25,9,12,11,11,-34,-25,-22,-29,-1,18,-21,-30,-38,-4,-75,-17,-24,7,34,-23,-41,6,-24,-4,-10,2,-12,6, -10,-64,8,-127,-49,-14,54,127,-59,56,127,-50,-35,11,127,127,-9,-39,52,-43,-19,-54,127,0,17,-1,26,4,-22,15,-91,-45,-65,-26,-101,12,-101,-102,60,-57,-24,-91,-35,86,10,-23,-69,-15,40,-12,-5,-3,63,22,-44,-30,-59,-56,52,-44,127,30,103,37,-98,-65,-20,-47,127,15,-33,21,-11,-42,22,-17,4,-20,0,80,-89,-26,-71,-82,22,-127,-14,0,-46,-5,20,13,6,-74,-81,127, -18,0,-45,-17,42,-16,5,25,-25,0,15,18,68,6,-6,-27,-7,0,-47,-13,6,-18,36,-34,-2,-1,-33,-7,12,44,-33,5,-8,3,-5,11,-19,-81,-23,-7,-26,108,6,-10,35,-2,-77,2,-15,7,-7,-14,7,-52,36,-20,60,-15,11,-14,2,37,10,31,-39,-27,-24,15,28,2,-32,9,-61,-59,-23,-12,-39,28,92,28,-35,-9,-50,-33,-38,23,36,-9,-37,-2,-61,29,5,4,-25,-1, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0054185143671929836, 0.012544024735689163, 0.0090235369279980659, 0.0055463314056396484, 0.010798034258186817, 0.025780381634831429, 0.0040757334791123867, 0.0083732521161437035, 0.01406819187104702, 0.010255846194922924, 0.011082567274570465, 0.0090890303254127502, 0.0037974871229380369, 0.0070461435243487358, 0.0094852270558476448, 0.0067114084959030151, 0.013602052815258503, 0.016856398433446884, 0.0060350503772497177, 0.014017635956406593, 0.0088802007958292961, 0.012651951983571053, 0.0083733657374978065, 0.00494758365675807, 0.11474686115980148, 0.0065354607068002224, 0.011813420802354813, 0.0056317029520869255, 0.013215276412665844, 0.0052784625440835953, 0.0068125072866678238, 0.011448157951235771, 0.0027188640087842941, 0.026514258235692978, 0.005091517698019743, 0.010337567888200283, 0.013629477471113205, 0.0043260348029434681, 0.016129275783896446, 0.0046578627079725266, 0.02938954159617424, 0.0092163030058145523, 0.010011319071054459, 0.0048846104182302952, 0.0064783971756696701, 0.013708628714084625, 0.0050904355011880398, 0.0099582765251398087, 0.0055328975431621075, 0.021784339100122452, 0.011552311480045319, 0.0095846503973007202, 0.005742034874856472, 0.010111304931342602, 0.026015117764472961, 0.012199766933917999, 0.012386830523610115, 0.016221033409237862, 0.016068527474999428, 0.016818394884467125, 0.0095372507348656654, 0.01009840052574873, 0.0066549521870911121, 0.0058144126087427139, 0.011716436594724655, 0.014745847322046757, 0.0053901723586022854, 0.0056192926131188869, 0.0094272084534168243, 0.014993387274444103, 0.0055423150770366192, 0.011419766582548618, 0.017705809324979782, 0.0081858094781637192, 0.00829298235476017, 0.010290283709764481, 0.0024890699423849583, 0.0078335180878639221, 0.005377013236284256, 0.006583300419151783, 0.0046163075603544712, 0.012566376477479935, 0.0050191818736493587, 0.0098235905170440674, 0.0056322054006159306, 0.010681319981813431, 0.0051269554533064365, 0.010311298072338104, 0.005375964567065239, 0.01169371884316206, 0.0082399314269423485, 0.010559327900409698, 0.018915390595793724, 0.0077918996103107929, 0.0045778998173773289, 0.01159388292580843, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1704, 10471, 1233, 1314, 6291, 19281, 258, 2138, 14499, -1033, 16669, 4902, 2831, 758, 5466, 5, 3620, 5608, 53, 9222, 545, 11844, -1348, 1900, -9354, 1221, 2654, 1793, 7786, 1766, 4213, 3277, 1587, 15647, 3919, 4381, 3557, 2005, 8293, 2794, 18661, 2032, 2743, 1189, 2762, 8217, 6678, 8986, 1353, -1098, 2055, 5523, 2873, -2817, 14138, 482, 2448, 19996, 795, 3135, 1819, 17277, 2937, -369, 13260, 9797, 1790, 4233, 6702, 4944, 1694, 1922, -3190, 5519, 3024, 3441, 713, 9365, 3939, 8296, 3743, 1465, 6526, 21181, 580, 9189, 6694, 2078, -1483, 2631, 1789, 11152, 4328, 3297, 6221, 5483, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00019091485592070967, 7.8773213317617774e-05, 0.00015951898240018636, 0.00027023241273127496, 0.00010977560305036604, 4.842075941269286e-05, 0.00019231549231335521, 0.00013089603453408927, 5.9204678109381348e-05, 0.00016104138921946287, 5.221765604801476e-05, 0.00010092466982314363, 0.00011609963257797062, 0.00027531880186870694, 0.00010164122068090364, 0.0001673112710705027, 0.00016394120757468045, 0.00011623136379057541, 0.0001892117434181273, 9.7499105322640389e-05, 0.00025340862339362502, 7.177452789619565e-05, 0.00018548886873759329, 0.00013416638830676675, 8.3523445937316865e-05, 0.0001700882421573624, 0.00017998328257817775, 0.0001873721630545333, 0.00011242619075346738, 0.00017683792975731194, 0.00014066186849959195, 0.00015978359442669898, 0.00023729726672172546, 5.7049317547352985e-05, 0.00012630959099624306, 0.00014031481987331063, 0.00014983542496338487, 0.00019436722504906356, 7.6360811362974346e-05, 0.00014422529784496874, 5.0822734920075163e-05, 0.00014752220886293799, 0.00012058727588737383, 0.0001192563067888841, 0.00013813155237585306, 0.00010403439227957278, 0.00010310227662557736, 7.9802215623203665e-05, 0.00016998124192468822, 0.00021114866831339896, 0.00018713031022343785, 0.00012892308586742729, 0.00016231658810283989, 0.00014249635569285601, 6.3869498262647539e-05, 0.00019954411254730076, 0.0001409154647262767, 4.9219412176171318e-05, 0.00016595002671238035, 0.00012292576138861477, 0.00023636799596715719, 5.0586128054419532e-05, 0.00018827537132892758, 0.00020092824706807733, 7.054819434415549e-05, 8.9590939751360565e-05, 0.00023395486641675234, 0.00013239066174719483, 0.00010905669478233904, 0.00010566366836428642, 0.00027236851747147739, 0.00012586437514983118, 0.00018496665870770812, 0.00012025822070427239, 0.00013348554784897715, 0.0001902155636344105, 0.00018237587937619537, 8.52118173497729e-05, 0.00014188299246598035, 0.00010726727487053722, 0.00010385211498942226, 0.00011066791194025427, 8.0665122368372977e-05, 4.7112156607909128e-05, 0.00011275993892922997, 7.7729324402753264e-05, 0.00011709641694324091, 0.0002047020971076563, 0.00018353604536969215, 0.00020345467783045024, 0.00015013355005066842, 7.5781041232403368e-05, 0.00011939042451558635, 0.00010920225031441078, 9.7199736046604812e-05, 0.00011840092338388786, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 52,15,18,54,-127,-14,116,37,64,86,-47,30,33,3,26,72, 
  /* [1][0][][] */ -37,16,-103,22,127,117,-17,6,-46,9,-56,15,-63,110,-56,-53, 
  /* [2][0][][] */ -51,72,95,-16,76,86,22,41,38,-6,34,-30,64,-127,-9,9, 
  /* [3][0][][] */ 127,-25,8,2,14,29,-9,15,35,19,-49,-6,-30,29,-15,36, 
  /* [4][0][][] */ -84,-10,-7,1,-125,-18,-83,-45,-46,57,-14,-71,-46,22,-21,127, 
  /* [5][0][][] */ -127,-8,17,49,115,28,-25,48,-75,30,7,9,-71,59,-108,-5, 
  /* [6][0][][] */ -127,17,-46,34,-15,-62,69,14,-14,-23,-43,39,15,-13,-53,14, 
  /* [7][0][][] */ 24,113,111,-84,51,53,127,38,110,-32,5,70,81,25,-10,-8, 
  /* [8][0][][] */ -39,-27,-78,72,-48,85,-61,-64,35,-39,92,47,127,47,-105,17, 
  /* [9][0][][] */ -32,-127,-4,75,-26,-71,-4,64,52,57,0,75,-96,20,15,-33, 
  /* [10][0][][] */ -48,-79,-112,68,-120,127,40,-95,-6,-62,60,-49,38,119,-87,98, 
  /* [11][0][][] */ -34,-113,-33,59,-8,72,25,9,-2,-10,49,-76,10,116,-100,127, 
  /* [12][0][][] */ -52,-103,-62,121,-125,-127,-1,66,49,58,-25,68,-22,-41,-35,4, 
  /* [13][0][][] */ -68,-28,-27,-2,-17,2,28,16,-21,127,-11,-22,40,38,22,-5, 
  /* [14][0][][] */ -126,-45,-67,-60,-15,90,-19,-77,127,-72,94,-4,88,-38,-111,-78, 
  /* [15][0][][] */ -4,-127,83,-46,-42,-27,17,58,16,-49,-83,-24,88,-29,-33,-41, 
  /* [16][0][][] */ -15,-14,20,-40,26,18,-13,-26,64,-127,30,-23,-16,-9,-75,-92, 
  /* [17][0][][] */ -9,26,18,-87,27,-21,-47,-6,86,-25,26,79,121,-103,-1,-127, 
  /* [18][0][][] */ 69,25,-45,-114,0,-31,127,-56,7,55,-6,46,-14,69,-1,-104, 
  /* [19][0][][] */ -39,-36,-20,-68,-89,47,-17,1,47,-32,18,-127,-38,-23,-41,-38, 
  /* [20][0][][] */ 8,62,79,-106,83,9,-55,92,-127,-123,38,-90,-25,127,-19,-20, 
  /* [21][0][][] */ 26,-77,-93,-40,102,59,106,60,-65,-71,-62,-3,126,-127,-16,9, 
  /* [22][0][][] */ 54,-41,72,-2,28,18,63,46,44,127,57,57,9,9,118,7, 
  /* [23][0][][] */ -127,-89,-12,95,61,50,-12,10,-26,20,-9,-82,-13,59,68,119, 
  /* [24][0][][] */ 18,-33,32,41,18,-95,8,-56,27,127,-120,90,-18,-60,75,-88, 
  /* [25][0][][] */ 127,-47,114,87,69,10,3,35,-95,91,39,-45,11,34,64,-18, 
  /* [26][0][][] */ -17,31,10,38,-53,100,-17,36,-57,-28,-80,36,2,13,41,-127, 
  /* [27][0][][] */ 40,-2,-2,-57,-60,-1,-96,-3,-105,-15,-86,-58,-97,35,-17,127, 
  /* [28][0][][] */ -65,17,15,12,18,-20,-127,8,-34,-29,6,-11,1,-58,-77,-33, 
  /* [29][0][][] */ -44,-100,-13,82,-24,-2,127,11,69,63,-116,61,30,-7,-59,82, 
  /* [30][0][][] */ 43,-71,-99,13,-127,36,54,-20,9,4,23,-16,-17,63,0,86, 
  /* [31][0][][] */ -127,-19,17,89,-23,23,-56,-14,-27,-40,3,-37,-34,-67,-24,80, 
  /* [32][0][][] */ -127,-74,-93,-8,-103,-51,6,-27,111,55,-51,-84,30,40,28,-18, 
  /* [33][0][][] */ -30,-10,-74,31,-127,-74,37,2,-122,9,-37,-68,-17,99,51,61, 
  /* [34][0][][] */ 19,43,-11,44,-50,-35,26,23,3,-127,2,37,-45,19,19,92, 
  /* [35][0][][] */ 27,-23,-102,-25,-127,17,98,-22,-10,48,-7,-40,17,75,38,62, 
  /* [36][0][][] */ -18,4,-73,77,127,-10,42,83,-90,4,-85,-92,27,-7,15,50, 
  /* [37][0][][] */ -106,50,0,-73,48,-93,-34,-37,-8,-14,-35,36,55,-94,2,-127, 
  /* [38][0][][] */ 20,127,10,-118,-81,-52,-106,-59,-39,-59,36,33,-92,-108,69,-12, 
  /* [39][0][][] */ 8,-37,-26,69,9,86,93,-42,-22,43,37,-6,-12,127,22,108, 
  /* [40][0][][] */ 91,51,82,94,-68,-51,-19,24,-99,85,-9,-16,-52,-34,127,-8, 
  /* [41][0][][] */ -29,-20,29,67,-103,127,14,62,-58,17,-118,5,27,39,64,-126, 
  /* [42][0][][] */ 14,-64,79,-14,127,24,58,13,-26,-81,-126,0,22,32,22,29, 
  /* [43][0][][] */ -33,-82,-22,14,109,-3,4,103,-79,-90,-127,-78,120,-3,-92,47, 
  /* [44][0][][] */ -29,-86,-70,-96,21,114,62,13,-40,-127,-44,90,-49,38,52,118, 
  /* [45][0][][] */ -9,-47,-74,-12,-127,56,-27,-37,64,-35,31,-32,-11,7,-53,25, 
  /* [46][0][][] */ 38,-76,-11,-16,99,-76,-10,84,17,-10,33,73,-53,-66,58,-127, 
  /* [47][0][][] */ -77,-40,-19,88,4,25,44,45,1,127,94,108,-25,77,-30,95, 
  /* [48][0][][] */ 41,-13,-75,-83,31,-64,3,46,43,-69,-5,25,-60,3,-43,-127, 
  /* [49][0][][] */ 50,25,-29,38,-21,-32,47,73,-37,127,-27,41,-41,-24,59,79, 
  /* [50][0][][] */ 14,3,13,15,-127,-18,-14,-34,68,16,23,60,-22,-81,12,-11, 
  /* [51][0][][] */ 28,-2,4,-127,-43,79,65,-63,15,-12,19,-68,69,55,-17,-11, 
  /* [52][0][][] */ 24,-32,-10,-95,97,-110,-15,-43,46,-5,127,-52,34,14,-26,102, 
  /* [53][0][][] */ -51,-65,70,-23,-54,-127,28,-107,-17,82,-99,75,-31,-14,41,-75, 
  /* [54][0][][] */ 23,32,3,-17,-127,-36,-96,-70,-25,5,61,53,-95,-37,42,17, 
  /* [55][0][][] */ 4,-4,-61,101,-47,42,35,-7,-13,127,35,42,10,16,-3,61, 
  /* [56][0][][] */ 4,-127,-77,40,-63,24,-39,37,66,31,38,48,-26,-20,48,51, 
  /* [57][0][][] */ 27,41,91,-114,63,12,-26,11,97,-12,25,81,46,-59,127,-36, 
  /* [58][0][][] */ 102,-50,0,-75,-1,3,-15,127,55,81,-2,75,27,12,121,-11, 
  /* [59][0][][] */ -73,24,35,-41,-27,-82,-17,23,-22,19,-81,-103,-127,-32,87,16, 
  /* [60][0][][] */ 30,-30,9,20,14,-26,8,-46,-5,127,-9,54,-22,-22,-27,-13, 
  /* [61][0][][] */ 87,54,58,-34,-92,-127,-9,-69,-34,-33,-28,39,-47,-58,90,100, 
  /* [62][0][][] */ -10,66,-45,37,-38,127,-34,19,-42,-1,-46,36,-26,46,67,-89, 
  /* [63][0][][] */ 47,-6,-86,-127,-33,-52,68,-30,-2,-101,-27,28,-59,55,33,-52, 
  /* [64][0][][] */ -35,0,-20,-4,61,-66,2,93,-127,-3,-71,-23,-40,79,47,51, 
  /* [65][0][][] */ -55,-10,-52,1,53,35,-43,-61,-127,-61,0,-28,-109,86,-39,39, 
  /* [66][0][][] */ -17,45,-14,21,-31,127,-19,28,-45,14,-24,51,-15,54,53,-63, 
  /* [67][0][][] */ 42,-8,-30,-56,19,-80,81,-113,14,34,-8,105,-54,-56,-5,-127, 
  /* [68][0][][] */ 14,-127,-31,45,-9,14,39,69,43,25,48,12,-52,28,-31,0, 
  /* [69][0][][] */ -18,75,107,-107,59,15,-40,98,6,127,60,93,122,-76,39,-95, 
  /* [70][0][][] */ 47,16,43,-28,89,22,-101,-51,-127,-97,-2,49,-25,65,-96,-11, 
  /* [71][0][][] */ -31,-58,52,-36,44,-21,19,38,-80,87,-127,-56,2,64,4,59, 
  /* [72][0][][] */ 1,-8,58,28,-72,-38,-127,-62,-24,67,-25,42,43,120,-99,7, 
  /* [73][0][][] */ -5,-36,-22,-33,40,-114,24,-44,82,83,123,-2,14,-17,-57,127, 
  /* [74][0][][] */ 1,3,-36,100,-94,-19,89,38,69,71,37,120,127,36,-69,13, 
  /* [75][0][][] */ -27,49,-17,28,-47,127,-17,26,-26,36,-36,42,-17,44,31,-71, 
  /* [76][0][][] */ -77,94,-62,49,-127,1,-14,9,41,48,-27,-46,29,-53,-116,44, 
  /* [77][0][][] */ 98,109,-121,127,65,59,61,51,33,12,111,-41,62,50,64,35, 
  /* [78][0][][] */ 25,-47,4,-43,64,-122,17,-44,48,49,118,-15,12,-17,-20,127, 
  /* [79][0][][] */ -34,64,-2,27,-13,-46,-29,-13,-127,-16,42,4,96,29,-67,-41, 
  /* [80][0][][] */ -51,32,78,1,78,43,-9,-127,-57,88,-76,-21,-7,-88,-7,35, 
  /* [81][0][][] */ 86,64,-7,-3,23,-32,80,107,-116,105,-69,-41,-18,38,127,118, 
  /* [82][0][][] */ 47,91,21,-86,-8,-30,114,-89,39,11,-95,45,127,-31,89,-62, 
  /* [83][0][][] */ 2,-30,34,26,-3,24,-50,-116,79,-26,109,11,30,-86,-36,-127, 
  /* [84][0][][] */ -127,-75,-26,-33,-19,74,79,5,64,50,87,66,52,86,-92,15, 
  /* [85][0][][] */ 88,11,66,-79,84,-10,-30,58,24,127,-65,-15,-43,40,104,7, 
  /* [86][0][][] */ -88,67,-22,3,16,78,15,13,76,37,127,-36,-29,71,-6,-11, 
  /* [87][0][][] */ 13,-54,20,-52,47,-127,30,-36,49,-8,61,-38,35,-43,-36,66, 
  /* [88][0][][] */ -57,31,19,-24,110,-25,49,29,-42,-75,66,-47,80,113,77,-127, 
  /* [89][0][][] */ -22,35,-17,21,-23,127,-20,31,-27,12,-39,20,-7,42,27,-79, 
  /* [90][0][][] */ 37,-69,10,-2,127,-2,44,8,2,-72,-113,-24,-7,-26,-47,30, 
  /* [91][0][][] */ -1,44,-1,-44,4,-82,-68,6,-67,16,-96,-127,-85,-59,3,28, 
  /* [92][0][][] */ 66,52,44,32,-127,-90,16,8,-10,29,-28,-47,-34,-77,29,-11, 
  /* [93][0][][] */ 20,-75,-127,60,-73,-61,3,79,74,34,25,64,-54,39,-13,-33, 
  /* [94][0][][] */ 122,10,118,-35,39,-32,21,46,34,98,-1,76,25,9,127,-25, 
  /* [95][0][][] */ -49,-60,-39,-21,127,-10,34,71,-31,1,-83,-41,28,26,-64,23, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0038239082787185907, 0.0015777794178575277, 0.0031950681004673243, 0.0054125906899571419, 0.0021987385116517544, 0.00096983829280361533, 0.0038519620429724455, 0.0026217678096145391, 0.0011858335928991437, 0.0032255609985440969, 0.0010458878241479397, 0.0020214596297591925, 0.0023254049010574818, 0.0055144676007330418, 0.0020358117762953043, 0.0033511428628116846, 0.003283642465248704, 0.0023280433379113674, 0.0037897960282862186, 0.0019528476987034082, 0.0050756204873323441, 0.0014376000035554171, 0.0037152289878576994, 0.0026872709859162569, 0.0016729236813262105, 0.0034067637752741575, 0.00360495550557971, 0.0037529501132667065, 0.0022518280893564224, 0.0035419559571892023, 0.0028173716273158789, 0.0032003680244088173, 0.0047529195435345173, 0.0011426630662754178, 0.0025299040134996176, 0.0028104202356189489, 0.0030011122580617666, 0.0038930571172386408, 0.0015294605400413275, 0.0028887446969747543, 0.001017948379740119, 0.0029547798912972212, 0.0024152896367013454, 0.0023886312264949083, 0.0027666909154504538, 0.0020837455522269011, 0.0020650757942348719, 0.0015983898192644119, 0.0034046208020299673, 0.0042291791178286076, 0.0037481060717254877, 0.0025822508614510298, 0.0032511022873222828, 0.0028541150968521833, 0.0012792671332135797, 0.0039967470802366734, 0.002822450827807188, 0.00098583486396819353, 0.0033238779287785292, 0.0024621281772851944, 0.004734307061880827, 0.0010132093448191881, 0.0037710410542786121, 0.0040244702249765396, 0.0014130373019725084, 0.0017944519640877843, 0.0046859732829034328, 0.0026517042424529791, 0.0021843391004949808, 0.0021163788624107838, 0.0054553751833736897, 0.0025209865998476744, 0.0037047695368528366, 0.0024086988996714354, 0.0026736340951174498, 0.0038099018856883049, 0.0036528776399791241, 0.0017067408189177513, 0.0028418297879397869, 0.0021484980825334787, 0.0020800945349037647, 0.0022166108246892691, 0.0016156731871888041, 0.00094362779054790735, 0.0022585128899663687, 0.0015568709932267666, 0.0023453698959201574, 0.0041000582277774811, 0.0036761150695383549, 0.0040750731714069843, 0.0030070834327489138, 0.0015178481116890907, 0.002391317393630743, 0.0021872546058148146, 0.0019468514947220683, 0.0023714983835816383, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5157, 11145, -19838, 1391, 7573, -16376, -40737, -10129, -4043, 9039, -14098, -15343, 6461, -12188, -3601, -1624, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0001332471874775365, 0.00013903682702220976, 0.00015702948439866304, 0.00014269346138462424, 0.00010108837159350514, 0.00014017800276633352, 0.00010532998567214236, 0.00014405616093426943, 8.8491928181611001e-05, 8.8110944489017129e-05, 0.00016778311692178249, 0.00013577625213656574, 0.00011969296610914171, 9.6938158094417304e-05, 0.00011977723625022918, 0.0001375548163196072, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 16,44,17,-42,69,67,-41,50,-18,116,7,47,-42,43,-17,36,25,85,50,-70,-63,90,-11,62,66,51,43,58,-45,-56,-14,91,-23,20,-74,58,46,-127,-29,30,15,-32,64,-4,-8,-55,-59,-9, 
  /* [1][0][][] */ -51,10,-84,-41,7,88,-58,26,-17,-38,-35,28,58,-16,-31,-27,-35,-26,-4,16,-55,44,-103,-45,-45,-43,55,67,-12,-36,47,-44,17,-43,-30,47,9,-63,127,-40,-25,38,-49,-19,32,49,34,23, 
  /* [2][0][][] */ -2,-3,62,-26,-9,-78,19,17,95,75,-59,18,114,-56,127,80,-67,-23,-41,33,82,-81,-30,-100,5,-37,34,-65,39,54,-45,10,40,-38,57,32,-63,15,-1,-32,30,29,65,-13,29,-81,88,-61, 
  /* [3][0][][] */ 41,-1,-25,-22,37,115,17,-16,50,-53,25,-27,-53,12,11,43,-42,-67,28,-127,-16,-9,-21,-17,-48,91,127,66,-17,-36,32,43,58,-35,99,36,-43,-56,-1,37,31,11,-22,5,29,24,-10,-28, 
  /* [4][0][][] */ 84,2,-1,-50,83,81,60,10,66,-17,-104,36,60,-18,14,-14,-88,-109,-5,-99,-15,33,-38,-34,-74,127,-91,114,-59,-54,17,88,38,-39,14,-17,-10,19,-15,38,-44,-11,6,48,-33,95,-34,-46, 
  /* [5][0][][] */ -3,-7,-53,7,-18,50,25,-22,69,51,30,88,51,-19,37,1,-42,127,-15,37,9,2,-65,-14,37,3,-65,-35,-23,27,14,-19,-35,1,41,15,-43,5,-83,6,90,-20,23,53,-10,7,-42,31, 
  /* [6][0][][] */ 41,16,7,56,0,-35,113,-62,13,64,125,106,38,68,-48,51,28,-37,-50,76,68,-70,-39,72,-89,95,84,-3,127,35,-33,12,82,-50,-115,2,87,38,19,9,-4,61,53,-32,72,119,48,-10, 
  /* [7][0][][] */ -100,-8,-16,40,-54,-56,25,51,87,115,-58,-77,-102,14,-12,-16,-80,106,-6,125,-54,42,31,38,-24,-93,-33,-78,21,42,-3,4,-18,16,17,-11,1,-54,127,17,9,44,20,-5,69,70,-32,0, 
  /* [8][0][][] */ -14,-91,63,-75,69,-72,76,-52,-28,-124,26,14,-38,1,32,22,-5,4,-40,106,-1,41,-24,33,68,-12,-68,-31,-125,-27,-64,-120,-3,-81,-1,90,-8,43,118,14,7,-3,71,127,-14,-73,-43,85, 
  /* [9][0][][] */ 15,-54,23,-73,44,89,-48,53,13,-40,-35,-23,19,-54,126,-21,8,-123,55,51,-72,44,65,-41,-28,-86,-35,87,72,79,-43,-37,-58,40,-4,127,-33,-49,-63,-33,-34,5,43,110,54,88,-85,9, 
  /* [10][0][][] */ -8,14,-24,-9,23,27,-67,-40,52,35,66,-7,-35,-8,45,-52,-60,127,-4,53,-1,-14,24,32,-47,40,3,95,33,7,-29,-12,65,10,-5,24,-5,-47,-38,18,-85,-8,23,-22,6,44,27,31, 
  /* [11][0][][] */ -45,51,-14,35,34,57,3,8,22,12,-127,-75,68,19,-10,-58,-5,38,-37,-47,-17,0,111,10,57,18,-10,39,-5,24,-4,46,31,-12,-44,-9,44,90,108,27,34,-30,60,5,-57,-18,90,5, 
  /* [12][0][][] */ -68,-3,28,22,-68,-64,13,-2,-26,-38,-120,14,73,-85,25,29,45,108,96,-127,-19,36,-44,-75,-9,-19,32,-27,10,7,-16,83,56,79,40,-34,-62,-27,39,0,-45,13,52,-4,41,-14,-36,-41, 
  /* [13][0][][] */ -60,-115,-55,-104,-1,35,62,21,-119,23,124,-69,54,54,127,3,116,30,13,-98,88,-80,126,7,-80,7,-19,6,-43,-110,-111,14,50,-5,-71,65,28,-57,86,-71,-7,54,72,34,57,-41,113,-64, 
  /* [14][0][][] */ 54,22,-56,2,-41,13,-79,-29,-39,60,59,45,-8,-58,16,-53,44,-110,34,-2,95,-57,19,-2,-11,127,-91,7,-39,-27,-92,9,118,53,85,-32,-90,19,-17,61,-22,-46,115,-26,-54,-41,-55,48, 
  /* [15][0][][] */ -55,7,31,20,85,8,-2,31,20,74,-11,49,51,-13,-33,-18,13,35,0,-36,33,-49,-44,-49,36,-64,-44,58,-33,6,22,5,-59,6,127,-7,-85,14,55,-19,-45,-19,15,-5,-34,-27,-12,4, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0056630056351423264, 0.0059090647846460342, 0.0066737532615661621, 0.0060644722543656826, 0.0042962557636201382, 0.0059575652703642845, 0.0044765244238078594, 0.0061223870143294334, 0.0037609068676829338, 0.0037447151262313128, 0.0071307821199297905, 0.0057704905048012733, 0.005086950957775116, 0.0041198716498911381, 0.0050905323587357998, 0.0058460794389247894, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 12709, 93, 19971, -94, 13593, -3240, 41311, 309, 12726, 37739, 4406, 27592, 55, 13893, 27456, 28752, 183, -2879, 896, 50197, -21, 22959, 1592, 19672, 18832, 44090, 717, -742, -1519, 16445, 23885, 61, 1202, -2734, 2372, 13713, 12011, 31313, 2680, 23542, 24708, -913, 715, 12895, -319, 545, 27118, 23619, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.6380288596265018e-05, 7.500292849726975e-05, 6.9639929279219359e-05, 0.00012083438195986673, 0.00010274257510900497, 0.00010192691115662456, 5.2632763981819153e-05, 0.00026124148280359805, 0.00010600627138046548, 5.4180261940928176e-05, 5.5510721722384915e-05, 7.0019210397731513e-05, 0.00010269974882248789, 9.1379079094622284e-05, 6.2967046687845141e-05, 7.4031304393429309e-05, 9.4530209025833756e-05, 7.4929092079401016e-05, 0.00015320241800509393, 4.3743038986576721e-05, 6.6721855546347797e-05, 5.5099117162171751e-05, 0.00011536229430930689, 0.00011203325266251341, 5.5884331231936812e-05, 5.34123792022001e-05, 6.508593651233241e-05, 4.4435095333028585e-05, 0.00028693859349004924, 0.00010180217213928699, 6.0636928537860513e-05, 0.00036765218828804791, 0.00012116444122511894, 0.00015808884927537292, 9.6471107099205256e-05, 7.9980884038377553e-05, 7.8304641647264361e-05, 5.4248444939730689e-05, 9.633206354919821e-05, 9.6242612926289439e-05, 5.611506276181899e-05, 0.00024804691202007234, 0.00025030144024640322, 8.909201278584078e-05, 0.00017518048116471618, 6.7488399508874863e-05, 8.1297381257172674e-05, 5.8021407312480733e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -88,88,-119,109,-96,106,-63,39,-80,-78,59,-62,70,-83,-19,-84,75,70,77,-100,85,-118,60,-90,-125,-64,67,102,-84,-73,-82,48,71,-88,51,-121,-98,-92,77,-95,-5,-70,71,-69,103,57,-50,-79, -98,121,-52,127,-78,127,-38,75,-127,-111,100,-95,69,-127,-34,-104,95,93,127,-94,127,-127,84,-127,-119,-109,62,127,28,-103,-98,13,103,-127,79,-93,-124,-84,102,-88,-94,91,87,-72,-29,90,-56,-76, -52,90,-13,40,-39,59,-67,51,-68,-33,56,-50,18,-30,-14,-40,43,49,83,-9,67,-111,35,-47,-82,-73,24,49,88,-32,-49,34,28,-80,34,-20,-41,-64,34,-71,-127,-25,13,-38,-71,52,1,-51, 
  /* [0][1][][] */ -99,78,-94,101,-78,116,-127,113,-99,-107,65,-75,97,-98,-75,-125,110,91,-50,-121,114,-110,106,-82,-127,-83,104,71,-127,-82,-109,127,93,38,105,-127,-117,-127,104,-87,-83,-92,105,-116,127,71,-127,-127, -127,127,-127,99,-127,105,-115,127,-124,-127,127,-127,127,-124,-127,-127,127,127,-67,-127,122,-121,127,-124,-123,-127,127,80,6,-113,-127,120,127,54,127,-105,-127,-110,127,-127,-99,127,127,-127,-65,127,-114,-121, -67,85,-112,18,-63,26,-87,86,-75,-20,86,-64,54,-34,-64,-17,83,59,-29,-47,50,-76,54,-43,-116,-70,71,54,104,-47,-84,96,25,36,69,-31,-22,-44,46,-65,-59,-59,48,-76,-92,65,-20,-89, 
  /* [0][2][][] */ -24,53,4,75,-1,60,-88,10,-63,-40,40,-65,30,-58,-15,-68,60,36,-74,-53,33,-51,25,-57,-64,-45,43,-8,-69,-82,-60,101,34,65,38,-48,-68,-35,24,-63,-88,-44,54,-41,86,33,-47,-48, -56,80,-84,74,-44,39,-66,11,-79,-50,52,-82,41,-97,-42,-49,66,48,-81,-39,40,-52,28,-68,-43,-56,50,24,7,-127,-101,64,39,77,41,-42,-78,-15,32,-73,-45,82,47,-59,-31,67,-45,-23, -25,37,-59,25,-39,5,-72,10,-30,3,30,-30,15,-56,-15,6,58,26,-42,-9,29,-22,2,-41,-61,-51,30,24,59,-66,-54,15,2,69,23,-21,-39,-2,-2,-44,9,-15,10,-12,-54,44,9,-33, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0040961620397865772, 0.00318762450478971, 0.0029596970416605473, 0.0051354612223803997, 0.0043665594421327114, 0.0043318937532603741, 0.002236892469227314, 0.011102763004601002, 0.004505266435444355, 0.0023026610724627972, 0.002359205624088645, 0.002975816372781992, 0.0043647391721606255, 0.003883610712364316, 0.0026760995388031006, 0.0031463303603231907, 0.0040175337344408035, 0.0031844864133745432, 0.0065111028961837292, 0.0018590791150927544, 0.002835678867995739, 0.0023417123593389988, 0.0049028974026441574, 0.0047614132054150105, 0.0023750839754939079, 0.0022700261324644089, 0.0027661523781716824, 0.0018884915625676513, 0.012194889597594738, 0.0043265921995043755, 0.0025770694483071566, 0.01562521792948246, 0.005149488802999258, 0.0067187757231295109, 0.0041000219061970711, 0.0033991874661296606, 0.0033279473427683115, 0.0023055588826537132, 0.0040941126644611359, 0.0040903110057115555, 0.002384890103712678, 0.010541993193328381, 0.010637811385095119, 0.0037864104378968477, 0.0074451705440878868, 0.0028682569973170757, 0.0034551387652754784, 0.0024659098125994205, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 2107, -1346, 947, -1935, 3632, -649, 5878, -4056, 1253, 943, 2443, 3001, 258, -428, 559, 4891, -1595, 4884, 7443, 827, -758, 2528, -990, 5866, 2211, 2334, 1415, -1024, 8851, -273, 1849, -3039, -836, 3037, -1399, 1949, 2217, 1095, 51, 5950, 2472, 9041, -4339, 1788, 6842, 341, 3499, 3150, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00020177529950160533, 0.00025524583179503679, 0.00025227080914191902, 0.00023203607997857034, 0.00020010740263387561, 0.00018348409503232688, 0.00013434907305054367, 0.00014167289191391319, 0.00025028295931406319, 0.00026036828057840466, 0.00018896472465712577, 0.00022541834914591163, 0.00028048569220118225, 0.00024324427067767829, 0.00024069359642453492, 0.00016515159222763032, 0.00023289379896596074, 0.00016462522034998983, 0.00011977244139416143, 0.00022941698262002319, 0.00033441407140344381, 0.00022144847025629133, 0.00021951613598503172, 0.00013886808301322162, 0.00021380296675488353, 0.00019149234867654741, 0.00022856426949147135, 0.0002116774267051369, 0.00010431434930069372, 0.00031124529778026044, 0.00020025101548526436, 0.00012333074118942022, 0.00020433234749361873, 0.00024200134794227779, 0.00018878403352573514, 0.00023563473951071501, 0.00019393437833059579, 0.00023082597181200981, 0.00023643819440621883, 0.00013798310828860849, 0.0002150794753106311, 0.00010132444003829733, 0.00012422542204149067, 0.00020458301878534257, 0.00012296637578401715, 0.00018733207252807915, 0.00016879633767530322, 0.00018412155623082072, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 56,25,127,-37,63,103,-59,-49, 
  /* [1][0][][] */ 12,-93,-127,3,60,28,31,0, 
  /* [2][0][][] */ -127,-17,-44,-32,62,26,-69,-57, 
  /* [3][0][][] */ 48,72,127,-76,-12,-110,-10,-5, 
  /* [4][0][][] */ -127,30,-51,-25,57,18,-39,-47, 
  /* [5][0][][] */ -99,26,-50,-5,7,34,-82,-127, 
  /* [6][0][][] */ -39,-127,-112,41,100,9,9,46, 
  /* [7][0][][] */ -62,-127,-87,-69,-59,-65,26,80, 
  /* [8][0][][] */ 83,35,1,-2,112,-69,-127,17, 
  /* [9][0][][] */ -32,50,-57,89,-60,-43,127,-31, 
  /* [10][0][][] */ -26,127,37,61,119,-15,-12,65, 
  /* [11][0][][] */ -63,-39,-7,5,-56,86,127,-14, 
  /* [12][0][][] */ 65,38,-127,33,-21,-28,-75,-18, 
  /* [13][0][][] */ 64,-22,-63,14,-2,-127,-29,-17, 
  /* [14][0][][] */ 11,-77,57,15,127,-98,-56,22, 
  /* [15][0][][] */ -40,-46,-3,127,54,64,-63,25, 
  /* [16][0][][] */ 111,13,-44,12,83,-95,-127,-25, 
  /* [17][0][][] */ 58,127,60,76,46,66,30,-90, 
  /* [18][0][][] */ 31,-26,-4,-5,127,6,15,-12, 
  /* [19][0][][] */ 3,127,31,11,-104,22,27,-33, 
  /* [20][0][][] */ -39,11,38,-127,13,37,-24,94, 
  /* [21][0][][] */ -29,66,54,-127,21,43,-16,111, 
  /* [22][0][][] */ -75,-76,-84,20,-127,127,115,-23, 
  /* [23][0][][] */ 104,48,-127,28,3,-59,-80,-19, 
  /* [24][0][][] */ -52,34,9,12,-26,80,-127,109, 
  /* [25][0][][] */ -109,-71,-127,11,-44,-80,75,93, 
  /* [26][0][][] */ 43,-5,-40,-32,110,-19,127,-38, 
  /* [27][0][][] */ 127,-77,31,99,6,35,-16,95, 
  /* [28][0][][] */ 46,62,47,-17,127,-49,51,-20, 
  /* [29][0][][] */ -18,-3,-24,-58,-83,6,127,-44, 
  /* [30][0][][] */ 42,-127,-38,-68,-125,16,6,-50, 
  /* [31][0][][] */ 7,36,-9,-15,-127,3,-30,-5, 
  /* [32][0][][] */ 46,-64,-51,80,-3,-85,119,-127, 
  /* [33][0][][] */ 71,127,48,30,51,-43,-34,-38, 
  /* [34][0][][] */ -127,-36,120,4,-26,100,82,11, 
  /* [35][0][][] */ -32,95,127,1,-68,-63,-31,32, 
  /* [36][0][][] */ -88,0,100,-19,-23,127,70,28, 
  /* [37][0][][] */ -27,-90,-8,-127,-38,-85,79,51, 
  /* [38][0][][] */ 47,-8,88,-50,58,66,-127,13, 
  /* [39][0][][] */ -12,93,-127,-46,-38,-18,-1,74, 
  /* [40][0][][] */ 59,-48,21,33,13,1,11,127, 
  /* [41][0][][] */ -17,72,127,1,42,80,-52,24, 
  /* [42][0][][] */ 71,-123,-120,-41,-127,0,2,-115, 
  /* [43][0][][] */ -9,-89,20,-69,127,-50,17,38, 
  /* [44][0][][] */ 2,109,127,36,9,62,-75,7, 
  /* [45][0][][] */ -34,50,15,85,-123,62,-127,17, 
  /* [46][0][][] */ -41,-28,51,40,-127,-97,-34,-3, 
  /* [47][0][][] */ -22,77,46,-98,-127,57,-16,69, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0026994941290467978, 0.0034148611593991518, 0.0033750592265278101, 0.0031043444760143757, 0.0026771798729896545, 0.0024547814391553402, 0.0017974179936572909, 0.0018954011611640453, 0.0033484641462564468, 0.0034833927638828754, 0.0025281051639467478, 0.0030158078297972679, 0.0037525382358580828, 0.0032542957924306393, 0.0032201709691435099, 0.0022095160093158484, 0.0031158197671175003, 0.0022024738136678934, 0.0016024013748392463, 0.0030693043954670429, 0.0044740303419530392, 0.0029626959003508091, 0.0029368437826633453, 0.0018578765448182821, 0.0028604089748114347, 0.0025619214866310358, 0.0030578961595892906, 0.0028319719713181257, 0.0013955918839201331, 0.0041640619747340679, 0.0026791011914610863, 0.0016500067431479692, 0.0027337041683495045, 0.0032376670278608799, 0.0025256876833736897, 0.0031524898950010538, 0.0025945927482098341, 0.0030881548300385475, 0.0031632392201572657, 0.0018460366409271955, 0.0028774868696928024, 0.0013555907644331455, 0.0016619764501228929, 0.0027370578609406948, 0.00164513208437711, 0.0025062623899430037, 0.0022582779638469219, 0.0024633097928017378, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 2382, 801, 22411, -1757, 5230, -13968, 1879, -13969, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 8.6112180724740028e-05, 0.00012886016338597983, 0.00012019355926895514, 9.6910895081236959e-05, 0.00010755259427241981, 0.00016459685866720974, 9.4022834673523903e-05, 8.3396167610771954e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -35,-54,-8,-92,14,7,105,91,-101,-85,-34,0,-71,-8,-63,42,-103,10,10,127,72,-11,18,105,92,85,38,7,-110,-75,-98,-58,-51,121,41,-75,41,-21,97,-5,39,12,-1,-106,41,-49,-36,-94, 
  /* [1][0][][] */ -25,48,-22,-22,-72,73,-20,-49,-33,71,-12,5,52,41,-53,-2,-12,-119,80,-47,127,20,-55,28,68,-3,-75,53,39,-21,65,32,-39,-14,12,-21,-1,97,-13,-25,62,31,-7,17,104,3,-30,53, 
  /* [2][0][][] */ -30,-37,109,7,87,-27,-22,26,-38,1,-15,37,8,-40,-45,-127,-44,-106,-22,22,-97,20,-30,-33,-40,17,-5,-50,-49,6,-31,-12,-10,-7,38,-8,26,-36,-47,17,32,-43,28,-40,-47,-48,-62,-48, 
  /* [3][0][][] */ 50,22,64,-8,18,-41,22,86,-58,-39,40,-16,-81,58,-14,42,68,22,-32,25,-111,-80,121,1,6,12,-64,-47,-55,61,114,-82,-1,-127,-22,40,-11,-91,-18,75,-67,-73,74,-10,-109,-72,69,-13, 
  /* [4][0][][] */ 18,-19,67,-25,4,-6,-2,1,-56,-8,-24,16,49,-79,44,-101,46,48,-2,-34,20,22,17,6,-10,-3,73,-6,24,27,-127,-27,-28,-23,2,22,60,-5,37,2,-50,-10,-82,37,-24,-97,10,19, 
  /* [5][0][][] */ 25,-42,56,33,33,15,10,5,-75,-17,-45,20,27,6,7,-43,90,74,0,-16,79,-57,127,-85,-22,43,-7,35,15,12,-31,-46,-22,-42,-33,13,34,15,60,-4,-66,19,35,22,41,-9,75,-7, 
  /* [6][0][][] */ -47,55,-111,81,36,9,14,26,-18,-14,52,-65,-80,-19,-27,28,-104,31,-11,75,5,23,-74,-83,-22,-20,11,53,-33,-23,-35,3,35,69,-29,-30,-19,-10,71,11,62,55,-103,-56,-26,127,-42,-41, 
  /* [7][0][][] */ 54,79,-103,37,15,72,121,77,49,73,-106,3,-38,2,-68,-51,27,44,115,112,79,-6,127,38,113,109,-43,113,-80,44,8,-87,21,-76,-33,23,7,97,-58,87,-83,65,-14,-75,78,-21,58,-22, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0036597675643861294, 0.0054765567183494568, 0.005108226090669632, 0.0041187130846083164, 0.0045709852129220963, 0.006995366420596838, 0.003995970357209444, 0.0035443371161818504, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -513, 12910, -380, 99, 613, -1161, 2495, -2132, -3300, -86, -3504, -228, -1703, -788, -3676, 4015, 8291, 1894, 404, -4482, -8250, 3215, 16346, -4023, -5473, -494, 4510, -4840, -2025, -543, -8737, 9261, 6849, 122, 2819, 59, -30, -274, 9358, 420, 8351, -2190, 3532, 6034, -207, 8738, -1605, -2487, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00033905351301655173, 0.00014730062684975564, 0.00075388269033282995, 0.00028245538123883307, 0.00021186686353757977, 0.00024000702251214534, 0.00019387142674531788, 0.00029892570455558598, 0.00012460502330213785, 0.00030660183983854949, 0.00029679492581635714, 0.0016571325249969959, 0.0004622804990503937, 0.00056121108355000615, 0.00031246396247297525, 0.00073385448195040226, 0.0001354124688077718, 5.8964717027265579e-05, 0.00028633562033064663, 0.00026247327332384884, 0.00022180013183970004, 0.00025932365679182112, 9.385619341628626e-05, 0.00042945099994540215, 0.00020895767374895513, 0.00044567309669218957, 0.00043444512994028628, 0.00019260325643699616, 0.00026275377604179084, 0.00059604173293337226, 0.00013873734860680997, 0.00012555281864479184, 0.00011508756142575294, 0.00022758806881029159, 0.00018672351143322885, 0.00033434128272347152, 0.0015609727706760168, 0.00031723993015475571, 0.00016160658560693264, 0.00016622622206341475, 0.00016570711159147322, 0.00015906935732346028, 0.00034679303644225001, 0.00018617097521200776, 0.00054830161388963461, 7.2220980655401945e-05, 7.6993914262857288e-05, 0.00018384809663984925, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 21,-53,8,7,-22,-110,-39,32,-38,7,-11,9,55,-7,-6,2,98,34,35,5,7,-37,-58,14,12,-18,9,-42,-53,81,-24,-127,51,-6,-57,-42,-12,-45,3,-12,-20,44,3,-6,-10,85,127,-22, -127,-94,-24,127,-72,103,-100,127,26,32,3,3,62,17,-5,-45,-23,67,29,3,12,117,16,127,127,-31,-34,40,69,-125,-19,-82,61,-7,-30,-127,24,12,-63,-41,-125,1,-102,-127,37,75,50,127, -15,-5,11,7,-26,57,38,73,-6,-32,-20,11,-18,-3,-3,2,-51,52,-67,-28,-1,-35,127,19,-37,-2,11,1,19,44,-5,-5,0,-16,-28,73,6,14,17,95,23,-8,23,-31,-12,46,-14,-8, 
  /* [0][1][][] */ 1,-39,-29,-5,32,-118,127,-75,-7,14,5,37,127,13,9,-34,-15,-25,18,46,76,-84,50,9,-52,127,-75,-35,127,-99,48,-125,-38,4,-80,30,7,-74,-42,-16,114,127,9,-114,-67,-48,-2,97, 78,-127,127,-7,127,64,-74,-49,23,127,127,-127,-89,127,127,127,127,127,101,127,127,112,-5,7,103,-102,-127,120,37,127,127,21,-127,127,127,113,-127,127,-127,-127,41,31,-127,-40,127,-127,-24,89, 20,27,-40,-12,-40,127,-125,79,83,-81,5,69,-39,10,21,-61,23,24,-127,25,22,-127,-51,-4,67,-15,-27,127,-63,-31,28,-30,-21,10,96,-40,35,-2,5,-78,104,0,32,45,-58,97,90,-83, 
  /* [0][2][][] */ 11,2,5,-33,0,-84,-17,3,4,-2,-4,8,-9,-16,9,-2,-50,24,0,-34,3,-38,77,-12,-78,9,39,-46,16,1,4,36,-20,-6,-68,45,6,-19,17,28,-48,-5,11,3,-24,36,-15,29, 39,-27,-37,-40,27,4,114,-83,127,-34,-17,15,-65,-26,-14,-69,-18,118,0,25,12,17,-37,-28,-42,58,73,-31,-83,13,-27,-1,-36,-2,-23,-6,61,-21,6,106,-127,-21,-7,48,30,73,2,-116, -1,23,4,-23,-9,-37,-12,-36,-26,-29,-12,11,14,-14,2,21,48,56,-40,-14,-8,-26,-60,-14,48,-24,19,-27,-4,8,-7,16,14,-20,-12,-64,-4,13,39,22,-25,-26,17,10,-25,29,56,-44, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.014409773983061314, 0.0062602763064205647, 0.032040014863014221, 0.012004353106021881, 0.0090043414384126663, 0.010200298391282558, 0.0082395356148481369, 0.012704342603683472, 0.0052957134321331978, 0.013030577450990677, 0.012613783590495586, 0.070428133010864258, 0.019646920263767242, 0.023851471021771431, 0.013279718346893787, 0.031188813969492912, 0.0057550300844013691, 0.0025060004554688931, 0.012169263325631618, 0.011155113577842712, 0.0094265053048729897, 0.01102125458419323, 0.0039888881146907806, 0.01825166679918766, 0.0088807009160518646, 0.018941106274724007, 0.018463917076587677, 0.0081856381148099899, 0.011167035438120365, 0.025331772863864899, 0.0058963373303413391, 0.0053359949961304665, 0.0048912214115262032, 0.0096724927425384521, 0.0079357493668794632, 0.01420950423926115, 0.0663413405418396, 0.013482696376740932, 0.006868280004709959, 0.0070646144449710846, 0.0070425523445010185, 0.0067604472860693932, 0.014738703146576881, 0.0079122660681605339, 0.023302817717194557, 0.0030693914741277695, 0.0032722412142902613, 0.007813544012606144, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2897, 4334, 12797, 2130, 1444, -1308, 3887, 9634, 3295, -498, 3672, -2304, 16328, -1092, 1981, 20911, -260, 2386, 378, 2833, 3563, 4856, 378, 17942, 5457, 3338, 13289, 1897, 4704, 5676, 651, 1250, 638, 1208, -457, 346, -2990, -343, 2515, 1899, 4625, 1503, 4394, 4316, 5826, 2026, 2428, 5837, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00022938400798011571, 0.00018480009748600423, 7.5053241744171828e-05, 0.0001927395787788555, 0.00032063887920230627, 0.0002986774779856205, 0.00019096843607258052, 9.2489142843987793e-05, 0.0001675855164648965, 0.00028179542277939618, 0.00023770633561071008, 0.00022709339100401849, 5.7962559367297217e-05, 0.00028192580793984234, 0.00025132577866315842, 5.2550385589711368e-05, 0.00038027917617000639, 0.00020851461158599705, 0.00027182954363524914, 0.00023123703431338072, 0.00021272462618071586, 0.00016527525440324098, 0.00039224119973368943, 5.7904147979570553e-05, 0.00015348599117714912, 0.00017530241166241467, 7.4305455200374126e-05, 0.00026769214309751987, 0.0001617631787667051, 0.00014461613318417221, 0.00045928393956273794, 0.00037537605385296047, 0.00030049565248191357, 0.00030336176860146224, 0.00030063284793868661, 0.00033204458304680884, 0.00019031144620385021, 0.0003253915929235518, 0.00023650498769711703, 0.00027614081045612693, 0.00016808329382911325, 0.00028359272982925177, 0.00018499419093132019, 0.00018558959709480405, 0.00014564613229595125, 0.00031412547104991972, 0.00029947797884233296, 0.00014194693358149379, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 59,127,-86,-86,-4,93,14,58, 
  /* [1][0][][] */ 59,-82,54,-127,-73,84,-87,-48, 
  /* [2][0][][] */ -31,127,121,54,91,6,58,3, 
  /* [3][0][][] */ 94,66,-63,78,17,-102,-127,-15, 
  /* [4][0][][] */ -37,21,6,-59,-29,81,127,27, 
  /* [5][0][][] */ 20,100,-127,-71,65,106,43,-19, 
  /* [6][0][][] */ -10,127,44,50,69,11,26,-99, 
  /* [7][0][][] */ 127,-20,-21,51,36,-7,96,38, 
  /* [8][0][][] */ 57,127,53,89,104,60,75,-85, 
  /* [9][0][][] */ 72,103,-127,-88,7,107,2,56, 
  /* [10][0][][] */ -61,-35,35,-50,-7,-30,-52,127, 
  /* [11][0][][] */ 15,-127,-114,-21,19,-1,45,-17, 
  /* [12][0][][] */ -22,-110,-127,-37,-119,24,-86,33, 
  /* [13][0][][] */ -5,16,-100,99,-127,-31,-3,-17, 
  /* [14][0][][] */ -59,-41,-127,-10,30,-6,-16,-59, 
  /* [15][0][][] */ 9,-102,-127,14,-107,-28,-33,8, 
  /* [16][0][][] */ 127,-64,-11,65,-80,20,32,106, 
  /* [17][0][][] */ -21,116,127,-39,-45,-24,-40,-20, 
  /* [18][0][][] */ -2,-127,63,95,8,-75,64,-82, 
  /* [19][0][][] */ 127,-44,-64,30,-103,9,42,102, 
  /* [20][0][][] */ -29,-127,87,77,-15,-91,-1,-76, 
  /* [21][0][][] */ -9,-54,-16,-38,127,-8,54,26, 
  /* [22][0][][] */ -127,29,-67,49,54,49,-83,-98, 
  /* [23][0][][] */ -86,-44,68,-3,-84,127,119,-34, 
  /* [24][0][][] */ -59,57,5,-34,-35,115,127,5, 
  /* [25][0][][] */ -42,-87,-127,-61,-56,-7,-23,-41, 
  /* [26][0][][] */ -8,70,-24,127,-105,36,-58,-8, 
  /* [27][0][][] */ 17,-114,32,74,17,-52,7,-127, 
  /* [28][0][][] */ 9,115,64,37,127,-20,9,-55, 
  /* [29][0][][] */ 94,26,-30,-1,87,-127,-89,37, 
  /* [30][0][][] */ 26,-14,28,-127,22,-32,13,-25, 
  /* [31][0][][] */ 38,-40,6,59,-6,23,19,127, 
  /* [32][0][][] */ -82,-72,2,-53,-68,127,63,72, 
  /* [33][0][][] */ -35,52,43,-39,48,127,-117,76, 
  /* [34][0][][] */ 34,127,-78,-40,36,51,-54,60, 
  /* [35][0][][] */ 8,-127,50,84,-20,-61,52,-67, 
  /* [36][0][][] */ -10,-35,-88,-14,-127,-68,-18,10, 
  /* [37][0][][] */ -54,-127,69,84,-51,-100,-19,-69, 
  /* [38][0][][] */ -63,13,55,-72,-127,-82,-58,75, 
  /* [39][0][][] */ 73,-127,62,33,-2,-89,-13,-68, 
  /* [40][0][][] */ 2,49,12,40,-127,-18,-66,13, 
  /* [41][0][][] */ 107,127,-55,-87,66,16,-7,19, 
  /* [42][0][][] */ -7,-35,-15,12,127,14,41,18, 
  /* [43][0][][] */ 127,37,80,21,-72,-22,60,109, 
  /* [44][0][][] */ 63,30,-36,23,69,-127,-120,15, 
  /* [45][0][][] */ 39,31,20,23,66,-127,-20,-58, 
  /* [46][0][][] */ 54,-28,2,127,37,52,19,71, 
  /* [47][0][][] */ -81,-101,40,59,-44,7,127,-85, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0030939087737351656, 0.0024925654288381338, 0.001012310734950006, 0.0025996523909270763, 0.004324745386838913, 0.004028532188385725, 0.002575763501226902, 0.0012474844697862864, 0.0022603769320994616, 0.0038008289411664009, 0.0032061596866697073, 0.0030630133114755154, 0.00078179326374083757, 0.0038025875110179186, 0.0033898572437465191, 0.00070879439590498805, 0.0051291678100824356, 0.0028124244417995214, 0.0036664099898189306, 0.0031189022120088339, 0.0028692088089883327, 0.0022292162757366896, 0.0052905105985701084, 0.00078100542305037379, 0.0020702038891613483, 0.0023644615430384874, 0.0010022246278822422, 0.0036106051411479712, 0.0021818457171320915, 0.0019505680538713932, 0.006194776389747858, 0.0050630350597202778, 0.0040530557744204998, 0.0040917135775089264, 0.0040549063123762608, 0.0044785845093429089, 0.0025669019669294357, 0.0043888497166335583, 0.0031899558380246162, 0.0037245599087327719, 0.0022670908365398645, 0.0038250708021223545, 0.0024951833765953779, 0.0025032141711562872, 0.0019644605927169323, 0.0042368932627141476, 0.0040393294766545296, 0.0019145661499351263, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 6910, 15213, -5242, 7276, -1626, 3643, -10885, -17295, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025170340086333454, 0.00012732538743875921, 0.00014771826681680977, 0.00010862344061024487, 0.00018501724116504192, 0.00015388416068162769, 0.00017782574286684394, 0.00014092399214860052, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -43,-1,31,8,-32,-11,11,6,-43,1,-63,-55,-24,-56,-6,-30,49,-42,42,43,-17,31,-42,11,1,-33,53,-18,-5,-23,15,5,81,39,40,-127,16,-3,-18,-35,6,-19,43,50,39,4,31,3, 
  /* [1][0][][] */ 9,24,58,-33,-9,46,-57,-32,4,26,-17,-84,9,86,-19,52,-21,18,-23,-54,13,-71,-18,30,-74,-12,-2,-106,-29,-17,25,-47,45,72,-42,1,127,-35,-3,51,-33,30,-76,-32,107,-14,-37,-25, 
  /* [2][0][][] */ -1,-35,-60,11,-5,49,18,1,-11,47,-2,33,65,-95,20,-63,34,-93,23,27,-22,52,-1,28,-17,61,-24,-69,15,2,23,-73,-45,-88,39,-29,105,19,-10,-59,1,25,87,28,127,21,16,24, 
  /* [3][0][][] */ -2,17,-71,41,21,-38,-70,-105,14,-24,-41,1,6,26,33,84,-11,14,-40,25,4,-104,27,-55,-81,-12,127,-18,-40,7,-62,14,-5,-86,13,-11,-16,-40,-27,99,-54,-26,-1,21,41,6,-38,48, 
  /* [4][0][][] */ -24,-61,-11,6,32,-31,-14,-8,31,-25,61,-74,7,30,15,10,-16,-26,11,-17,-2,-52,7,-21,15,-10,46,52,37,20,-12,24,-12,-7,1,-3,-68,84,33,-21,30,-26,-12,-28,-75,12,127,8, 
  /* [5][0][][] */ 45,-19,1,11,29,-44,36,-127,30,-34,-10,119,-74,65,23,-63,-5,-95,18,2,-42,53,-37,-46,-66,82,-27,-1,-12,53,-42,-36,23,48,39,2,-35,-6,-48,-45,15,-42,-46,-2,-32,53,91,15, 
  /* [6][0][][] */ 52,-32,23,-9,-35,-22,-33,22,-39,6,-37,127,-46,-38,-4,65,11,41,10,25,33,-97,-27,16,21,38,-66,0,17,-42,18,35,2,13,-16,-2,18,10,-1,-11,-9,-15,43,62,-3,-36,78,-17, 
  /* [7][0][][] */ -23,-5,-7,66,34,20,10,30,17,2,68,-6,118,102,58,48,42,48,-10,2,24,-19,-81,-32,16,-7,-29,62,32,-26,-32,-13,32,3,43,-93,-67,42,49,51,-32,30,80,127,-60,-26,-106,57, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010697394609451294, 0.0054113287478685379, 0.0062780263833701611, 0.0046164961531758308, 0.0078632328659296036, 0.006540076807141304, 0.0075575942173600197, 0.0059892698191106319, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 14154, 6752, 4733, -1979, 1119, -507, -870, 31111, -1106, 4944, 5965, 62121, 1472, 5816, -36, 10641, -2288, 14214, -307, 7986, 9909, -783, 2910, -9679, 10327, 1767, 3453, 11649, -1580, -1986, -11514, 8091, 3279, 1681, -747, 7629, -8301, 11258, -1055, 16002, -3138, -811, 5810, 1825, 1859, -1873, 1789, -1164, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 9.3704256869386882e-05, 0.00012005393364233896, 0.00014746344822924584, 0.00015040001017041504, 0.0010305991163477302, 0.00017202564049512148, 0.00013662718993145972, 0.00010300955909769982, 0.00013452918210532516, 9.0628804173320532e-05, 7.5388707045931369e-05, 4.5255445002112538e-05, 9.0551824541762471e-05, 5.3606385336024687e-05, 0.00024004760780371726, 0.00025728545733727515, 9.6142917755059898e-05, 0.00036300334613770247, 0.00011578011617530137, 0.00013201075489632785, 8.0951547715812922e-05, 0.00040890352101996541, 0.00012311196769587696, 0.00022922690550331026, 0.00012780044926330447, 6.3933337514754385e-05, 5.384350151871331e-05, 0.00010131391900358722, 0.00014994690718594939, 0.0007671669009141624, 0.00022432467085309327, 8.9727684098761529e-05, 7.6465817983262241e-05, 0.00013489283446688205, 0.00018470980285201222, 5.0676822866080329e-05, 0.00010218573152087629, 4.7401968913618475e-05, 8.3819657447747886e-05, 7.3181639891117811e-05, 0.00010860855400096625, 0.00015132450789678842, 6.9052992330398411e-05, 7.763272151350975e-05, 7.5689800723921508e-05, 0.00030658664763905108, 7.3649382102303207e-05, 0.00020255688286852092, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -29,-89,-26,-7,127,-50,74,-44,-93,-80,-12,-60,102,56,80,-127,60,-22,3,-45,-58,104,5,31,-16,56,61,-34,88,-66,37,-29,-116,-102,45,67,19,79,111,-65,-126,-15,44,80,51,-126,92,94, -36,-102,-80,55,-81,118,57,-59,-73,27,75,-105,127,96,119,-89,-96,-81,42,-57,-33,95,-29,102,-84,75,97,-109,101,-48,9,-121,-43,-84,75,106,108,115,127,-56,-127,-54,79,89,86,125,91,75, 0,-50,-87,98,-42,-34,22,-1,81,15,49,-59,16,53,-35,-2,-89,-17,42,-20,-4,38,-70,-20,-70,36,24,-84,50,57,127,-54,4,9,2,37,70,75,43,-5,-25,92,78,42,39,32,21,-116, 
  /* [0][1][][] */ -113,-90,-10,-59,-75,-80,108,-118,-127,-127,102,-91,80,69,-114,-79,127,-127,-64,-63,-106,127,-37,30,-13,98,103,-48,-103,-73,22,-29,-104,-127,-127,72,37,91,1,-92,77,-32,65,127,74,127,122,-118, -127,-127,-109,-90,-32,127,127,-127,96,50,127,-127,105,127,68,-110,69,-105,-127,-127,-127,121,-127,127,-127,127,127,-127,-127,127,-25,-127,-127,-99,44,127,127,127,-15,-127,111,-98,127,119,127,3,127,127, -75,-48,-127,127,69,-60,46,-27,69,20,18,-50,3,63,69,-58,-6,6,-8,-62,-83,54,-80,-44,-125,51,30,-89,-42,42,126,-68,-75,8,63,87,77,76,-29,-38,55,127,80,21,53,-47,22,34, 
  /* [0][2][][] */ -98,-43,20,33,-48,-32,11,-31,57,-55,7,-40,0,35,-49,-17,-78,-27,105,-39,-26,32,-67,-1,-7,60,67,-11,34,56,7,9,1,-78,-37,50,12,4,-62,-30,37,-18,13,48,20,55,19,-59, -81,-48,-48,-60,78,45,51,-49,115,15,-49,-64,0,41,-127,-77,45,1,54,-78,-57,19,-66,74,-82,56,86,-48,33,10,-47,-39,-73,-23,-57,67,20,25,-107,-45,32,-46,68,73,47,-114,21,9, -42,-36,-66,-16,-19,-18,6,-30,-70,8,-19,-14,-6,14,19,-19,44,31,3,-54,-36,1,-22,-54,-58,19,30,-14,10,-58,51,-12,-64,17,24,53,20,22,-57,-15,7,55,25,26,19,-8,3,48, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0039824307896196842, 0.0051022921688854694, 0.006267196498811245, 0.0063920002430677414, 0.043800462037324905, 0.0073110894300043583, 0.0058066551573574543, 0.0043779062107205391, 0.0057174898684024811, 0.0038517240900546312, 0.0032040199730545282, 0.0019233563216403127, 0.0038484523538500071, 0.0022782713640481234, 0.010202023200690746, 0.010934631340205669, 0.0040860739536583424, 0.015427641570568085, 0.0049206549301743507, 0.0056104571558535099, 0.0034404408652335405, 0.017378399148583412, 0.0052322582341730595, 0.0097421435639262199, 0.0054315188899636269, 0.0027171669062227011, 0.0022883487399667501, 0.004305841401219368, 0.0063727432861924171, 0.03260459378361702, 0.0095337983220815659, 0.0038134264759719372, 0.0032497972715646029, 0.0057329456321895123, 0.0078501664102077484, 0.0021537649445235729, 0.0043428936041891575, 0.0020145836751908064, 0.0035623353905975819, 0.0031102197244763374, 0.0046158633194863796, 0.0064312913455069065, 0.002934752032160759, 0.0032993906643241644, 0.0032168163452297449, 0.013029932044446468, 0.0031300985720008612, 0.008608667179942131, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 1240, -261, -353, 681, 11583, 1924, -352, 4312, 1156, 984, 146, 2583, 880, 350, -577, 358, 2090, 7970, 2881, -648, 887, -641, -64, 2153, -274, -449, 996, -35, 1635, 9741, 2083, 1, 282, -132, 1779, -105, 374, -292, 892, 955, 1466, 1918, 97, -212, 590, 1920, 1042, -202, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00048409780720248818, 0.00045487468014471233, 0.00036505176103673875, 0.00051494949730113149, 8.5012288764119148e-05, 0.00037022627657279372, 0.00066769332624971867, 0.00021998220472596586, 0.00035275961272418499, 0.00074209441663697362, 0.00041640832205303013, 0.00033370242454111576, 0.00029794906731694937, 0.00045755106839351356, 0.00040547069511376321, 0.00041810297989286482, 0.00034166147815994918, 0.0001192648196592927, 0.00026235176483169198, 0.00040120619814842939, 0.0005336024914868176, 0.00025712986825965345, 0.00070010212948545814, 0.00037882220931351185, 0.00055422354489564896, 0.0010092279408127069, 0.00049938983283936977, 0.0010563400574028492, 0.00044581331894733012, 9.92969362414442e-05, 0.00038107711588963866, 0.00093454023590311408, 0.00049911189125850797, 0.00047559835365973413, 0.00041700410656630993, 0.00041650424827821553, 0.00049891561502590775, 0.00072474562330171466, 0.0005235466524027288, 0.00060686661163344979, 0.00039040102274157107, 0.00036353786708787084, 0.00045627047074958682, 0.00070587079972028732, 0.00049797579413279891, 0.00028575249598361552, 0.00036351816379465163, 0.0004997568903490901, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -42,19,16,-24,-89,-43,-127,18, 
  /* [1][0][][] */ 69,-77,-42,-73,127,-102,88,12, 
  /* [2][0][][] */ -92,127,-55,-113,63,-11,-36,44, 
  /* [3][0][][] */ 43,7,87,12,83,127,120,-8, 
  /* [4][0][][] */ -88,-121,86,0,-53,-127,-2,-37, 
  /* [5][0][][] */ 127,-19,76,63,-77,-8,6,-25, 
  /* [6][0][][] */ 23,32,127,-30,38,-35,-44,27, 
  /* [7][0][][] */ 32,12,-127,-33,-35,102,96,-68, 
  /* [8][0][][] */ 13,126,-42,18,75,127,63,58, 
  /* [9][0][][] */ -4,127,-43,88,8,-102,47,118, 
  /* [10][0][][] */ -7,-117,-11,-30,-76,-127,-64,-84, 
  /* [11][0][][] */ -127,-85,111,55,-16,-77,97,47, 
  /* [12][0][][] */ -39,49,-127,72,29,-50,-68,84, 
  /* [13][0][][] */ 95,-127,96,91,12,37,48,-60, 
  /* [14][0][][] */ -31,80,-31,-127,-30,-113,-34,-57, 
  /* [15][0][][] */ 43,101,20,-21,34,-60,90,-127, 
  /* [16][0][][] */ -95,-127,-45,85,-42,27,-21,74, 
  /* [17][0][][] */ -16,-103,-127,73,-46,65,-45,60, 
  /* [18][0][][] */ -115,-85,-43,111,-20,87,-5,127, 
  /* [19][0][][] */ 49,-115,96,-127,8,-75,18,-39, 
  /* [20][0][][] */ -11,71,32,1,47,127,61,-2, 
  /* [21][0][][] */ 25,109,45,-41,41,-78,91,-127, 
  /* [22][0][][] */ 22,14,102,7,-3,127,27,-32, 
  /* [23][0][][] */ -95,-71,36,-73,76,91,-49,-127, 
  /* [24][0][][] */ -98,-96,34,-91,124,125,-48,-127, 
  /* [25][0][][] */ 127,12,-64,-20,22,31,-64,-4, 
  /* [26][0][][] */ -126,-30,-127,-24,-44,-25,15,0, 
  /* [27][0][][] */ 82,34,-6,-63,-127,-25,87,90, 
  /* [28][0][][] */ -127,-62,8,34,-70,-87,5,6, 
  /* [29][0][][] */ 115,96,33,-127,45,17,-54,-92, 
  /* [30][0][][] */ -83,-64,43,-77,59,70,-52,-127, 
  /* [31][0][][] */ 51,43,-5,127,2,-81,-3,5, 
  /* [32][0][][] */ -22,127,-15,35,25,73,-20,46, 
  /* [33][0][][] */ -31,127,-91,19,31,-26,-20,2, 
  /* [34][0][][] */ -127,-87,-51,84,-15,8,6,99, 
  /* [35][0][][] */ -52,127,-33,-5,68,110,58,77, 
  /* [36][0][][] */ 72,43,2,-50,-127,-33,111,114, 
  /* [37][0][][] */ -63,109,18,26,-127,105,-25,-100, 
  /* [38][0][][] */ 34,38,37,22,127,74,111,46, 
  /* [39][0][][] */ -26,-72,30,-20,11,36,-101,127, 
  /* [40][0][][] */ -71,-60,-82,127,-28,-3,4,79, 
  /* [41][0][][] */ 127,10,62,102,-73,-5,8,-25, 
  /* [42][0][][] */ -42,-1,-68,-127,51,-115,5,82, 
  /* [43][0][][] */ 16,-2,82,-9,37,127,92,12, 
  /* [44][0][][] */ -25,-27,-67,127,45,15,-38,-38, 
  /* [45][0][][] */ 74,87,105,-97,41,-76,11,-127, 
  /* [46][0][][] */ -30,-127,-45,31,0,33,-62,112, 
  /* [47][0][][] */ 34,41,102,9,101,127,106,-20, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0039102085866034031, 0.0036741641815751791, 0.0029486366547644138, 0.0041594072245061398, 0.00068667071172967553, 0.0029904327820986509, 0.0053931665606796741, 0.0017768646357581019, 0.0028493490535765886, 0.0059941275976598263, 0.0033634596038609743, 0.0026954181957989931, 0.0024066271726042032, 0.0036957822740077972, 0.0032751129474490881, 0.0033771477174013853, 0.0027597059961408377, 0.00096333905821666121, 0.0021190966945141554, 0.0032406672835350037, 0.0043100733309984207, 0.0020769177936017513, 0.0056549427099525928, 0.0030598647426813841, 0.004476635716855526, 0.0081518478691577911, 0.0040337271057069302, 0.0085323872044682503, 0.0036009727045893669, 0.00080205220729112625, 0.0030780783854424953, 0.0075485720299184322, 0.0040314821526408195, 0.0038415556773543358, 0.0033682717476040125, 0.0033642342314124107, 0.0040298965759575367, 0.005853995680809021, 0.0042288489639759064, 0.0049018501304090023, 0.003153390483930707, 0.0029364083893597126, 0.0036854385398328304, 0.0057015381753444672, 0.0040223053656518459, 0.0023081118706613779, 0.0029362491331994534, 0.0040366919711232185, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -6907, -2550, 11717, -10379, 24001, 8032, -7815, 11704, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00020367171964608133, 0.00023781831259839237, 0.00018334793276153505, 0.00026138717657886446, 0.00021066848421469331, 0.00016685490845702589, 0.00018368655582889915, 0.00025998655473813415, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -14,-15,-19,-68,-25,-35,21,-23,33,9,-33,-5,109,127,-22,-98, 
  /* [1][0][][] */ 127,-58,-42,20,-51,75,-66,-47,-46,87,-36,-53,-11,5,-64,-22, 
  /* [2][0][][] */ -38,-100,39,50,47,-56,-76,-17,31,-96,24,-127,48,-29,-73,23, 
  /* [3][0][][] */ 46,11,12,15,-10,70,-60,-21,127,49,11,22,3,-11,8,20, 
  /* [4][0][][] */ -105,-30,-32,-127,-16,33,59,-116,31,-25,-42,-36,-116,27,-46,-21, 
  /* [5][0][][] */ 85,52,66,-36,40,-46,-126,-127,-20,-68,62,47,-58,51,59,-39, 
  /* [6][0][][] */ 97,37,-127,-70,21,-66,6,-86,-41,21,-111,86,84,-82,9,63, 
  /* [7][0][][] */ -127,-5,104,-29,-64,7,-8,-60,-51,65,85,-33,61,-28,26,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0086560482159256935, 0.010107277892529964, 0.007792287040501833, 0.01110895536839962, 0.0089534102007746696, 0.0070913336239755154, 0.007806678768247366, 0.011049428023397923, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 17519, -421, 536, 3174, -517, 455, 10250, 1994, -1505, 15, -2383, 2800, -112, -938, -3, -737, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00013757342821918428, 0.00020929584570694715, 0.00014697923325002193, 0.00015743357653263956, 0.0013314025709405541, 0.0010194295318797231, 0.00015188197721727192, 0.00063615775434300303, 0.00038332186522893608, 0.001114891842007637, 0.00023524861899204552, 0.00019719317788258195, 0.00010616983490763232, 0.00023090292233973742, 0.00021287654817570001, 0.00074639258673414588, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ -1,-3,4,1,-21,10,7,14,-2,-10,1,-3,1,-5,-2,-4, 4,-11,2,0,13,-3,14,-27,-6,10,-4,98,-7,21,-2,-4, 1,-4,-3,0,0,-15,-3,9,0,3,-3,-9,2,-3,-9,-4, 
  /* [0][1][][] */ 8,-8,0,7,127,-25,-127,-22,127,127,-1,-5,111,-22,-3,-22, -127,127,127,4,-89,-92,-14,-102,20,-104,127,127,127,127,127,127, 18,-3,-4,4,-13,127,3,-11,-4,-11,-2,-2,5,-3,-13,-11, 
  /* [0][2][][] */ 0,-4,-1,-14,-18,15,54,6,-8,-8,-3,-4,-1,1,-8,-14, 19,-22,-6,-127,7,-16,-8,127,-2,1,-1,-17,-7,-57,-17,-39, -3,-5,-5,-6,0,-5,0,-3,-1,3,-4,-4,1,-5,-14,-15, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0058468705974519253, 0.0088950730860233307, 0.0062466170638799667, 0.0066909268498420715, 0.056584607809782028, 0.043325755745172501, 0.006454983726143837, 0.027036704123020172, 0.01629117876291275, 0.047382902354001999, 0.0099980663508176804, 0.0083807101473212242, 0.0045122178271412849, 0.0098133739084005356, 0.0090472530573606491, 0.031721685081720352, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 1321, -271, 987, 135, 49677, 55909, 4259, 3042, 6098, 4390, 1669, -276, 4685, -2222, -471, 33566, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00017483759438619018, 0.0011916793882846832, 0.00020280304306652397, 0.00012789573520421982, 3.009590545843821e-05, 2.864010093617253e-05, 0.00010844162170542404, 3.1040137400850654e-05, 0.00015355444338638335, 3.9666309021413326e-05, 0.00037719725514762104, 0.00097800663206726313, 0.00040396396070718765, 1.8220254787593149e-05, 0.00083405058830976486, 4.3728246964747086e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -85, -109, -30, 
  /* [0][1][][] */ 67, -36, 16, 
  /* [0][2][][] */ 32, 127, 19, 
  /* [1][0][][] */ 106, -95, -10, 
  /* [1][1][][] */ -127, 105, 24, 
  /* [1][2][][] */ 14, -1, -12, 
  /* [2][0][][] */ -25, -4, -49, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -13, -96, -81, 
  /* [3][0][][] */ 121, 127, 60, 
  /* [3][1][][] */ 2, -21, -13, 
  /* [3][2][][] */ -101, -127, -42, 
  /* [4][0][][] */ 17, -51, 10, 
  /* [4][1][][] */ 16, -127, 8, 
  /* [4][2][][] */ 18, -72, -2, 
  /* [5][0][][] */ -70, 21, -9, 
  /* [5][1][][] */ -127, 32, -2, 
  /* [5][2][][] */ -89, 21, -9, 
  /* [6][0][][] */ -14, 80, 127, 
  /* [6][1][][] */ -47, 57, -13, 
  /* [6][2][][] */ -33, -48, -85, 
  /* [7][0][][] */ 37, 16, -20, 
  /* [7][1][][] */ 127, 63, -3, 
  /* [7][2][][] */ 44, 15, -9, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -55, -88, 127, 
  /* [8][2][][] */ -26, -61, 97, 
  /* [9][0][][] */ -15, 58, -9, 
  /* [9][1][][] */ -12, 127, -14, 
  /* [9][2][][] */ -6, 85, -10, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 17, 
  /* [11][0][][] */ 7, -18, 10, 
  /* [11][1][][] */ 65, -93, 35, 
  /* [11][2][][] */ -84, 127, -46, 
  /* [12][0][][] */ -41, 48, -10, 
  /* [12][1][][] */ -127, 113, 5, 
  /* [12][2][][] */ -79, 78, 4, 
  /* [13][0][][] */ 61, -2, -20, 
  /* [13][1][][] */ 124, 98, 1, 
  /* [13][2][][] */ 94, 127, 57, 
  /* [14][0][][] */ -30, -27, 48, 
  /* [14][1][][] */ 45, 100, -127, 
  /* [14][2][][] */ -15, -70, 81, 
  /* [15][0][][] */ -74, -14, 30, 
  /* [15][1][][] */ -119, -127, 15, 
  /* [15][2][][] */ -27, -85, -18, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.044583585113286972, 0.30387821793556213, 0.05171477422118187, 0.032613411545753479, 0.0076744556427001953, 0.0073032253421843052, 0.027652611956000328, 0.0079152341932058334, 0.039156381040811539, 0.010114908218383789, 0.096185296773910522, 0.24939168989658356, 0.10301080346107483, 0.0046461648307740688, 0.21268288791179657, 0.011150701902806759, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.12380357831716537, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.0741405189037323, } };
const TfArray<1, int> quant50_zero = { 1, { -25 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.07887442409992218, } };
const TfArray<1, int> quant53_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.074745595455169678, } };
const TfArray<1, int> quant54_zero = { 1, { -21 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.049926631152629852, } };
const TfArray<1, int> quant58_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.04651341587305069, } };
const TfArray<1, int> quant61_zero = { 1, { -9 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.069943718612194061, } };
const TfArray<1, int> quant62_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.045543380081653595, } };
const TfArray<1, int> quant65_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.089947916567325592, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.037113390862941742, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.1427457332611084, } };
const TfArray<1, int> quant69_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

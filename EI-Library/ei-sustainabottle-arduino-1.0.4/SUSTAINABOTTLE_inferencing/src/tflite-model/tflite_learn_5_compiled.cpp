/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.03.2024 11:39:49

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 44133, -41086, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00011299928883090615, 0.0001213663854287006, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ 43,-48,-59,127,-40,-6,-81,53,121,-59,-46,-39,-30,61,-39,56,91,-55,-38,-60,118,106,80,-77,-82,-102,-4,107,-16,-65,39,50, 
  /* [1][0][][] */ 51,66,65,-60,-71,67,-9,12,-37,-14,31,94,100,38,34,-7,-37,-1,-55,-84,-72,30,31,98,77,64,-49,-14,95,-94,-127,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0037729025352746248, 0.004052269272506237, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { 142, 65, 75, 291, 0, 73, -52, 84, 108, 49, 68, 124, 100, 71, 16, 312, -56, -903, -128, 171, 13, 181, 54, 146, 144, 78, 185, 1284, 172, -65, 1645, -174, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 4.1759543819352984e-05, 4.2577670683385804e-05, 4.5052100176690146e-05, 4.1335340938530862e-05, 3.8333681004587561e-05, 4.0219118091044948e-05, 4.3391122744651511e-05, 4.0103666833601892e-05, 4.0938051824923605e-05, 4.0156439354177564e-05, 4.2275078158127144e-05, 4.1798124584602192e-05, 4.2126390326302499e-05, 4.1805324144661427e-05, 4.1104638512479141e-05, 5.2761472034035251e-05, 4.8389287258032709e-05, 4.7087702114367858e-05, 4.0691211324883625e-05, 4.171628097537905e-05, 5.2104442147538066e-05, 4.1911989683285356e-05, 3.9407241274602711e-05, 4.0950639231596142e-05, 4.352548421593383e-05, 4.1760289605008438e-05, 4.1064780816668645e-05, 4.5359953219303861e-05, 4.4626336602959782e-05, 4.7078603529371321e-05, 6.3336716266348958e-05, 4.2650492105167359e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -33,-47,111,12,101,-10,-92,-97,52,-101,-107,3,60,12,-34,59,-54,-33,-61,-56,-69,-105,9,113,-119,10,85,-47,116,3,-17,-82,85,-62,-93,69,-111,-80,-88,31,72,-92,-95,106,55,-112,116,-13,16,-60,-29,94,-73,-54,-96,111,27,72,127,-109,-76,87,-56,51,-4,18,77,97,59,104,91,-116,106,-101,46,88,-109,14,-57,34,58,21,101,-9,-59,-63,-83,105,32,120,-9,-113,16,75,34,14, 
  /* [1][0][][] */ -51,36,-66,2,-36,86,34,16,69,-102,-105,114,72,-23,32,69,116,-45,38,121,-46,0,40,33,25,18,-33,113,16,12,106,-66,62,109,-4,33,58,60,-8,-58,-80,-5,-16,-94,-31,32,-21,-49,-25,-94,121,47,16,77,-80,-45,22,106,64,85,-57,122,-79,-77,-53,40,83,42,112,36,20,13,-109,92,-46,47,85,-43,-38,78,-77,86,-47,-127,32,83,-65,-70,80,80,97,31,88,98,30,-16, 
  /* [2][0][][] */ 50,38,-52,94,-17,-52,80,96,-105,83,-33,118,92,-11,85,-104,-49,-29,34,54,-90,-9,109,25,-31,76,107,13,-61,82,81,90,-64,-16,-83,-98,-77,89,106,-19,-127,-84,19,-2,-76,107,-15,-68,93,29,91,-96,-40,53,21,22,-71,96,-58,6,-15,62,-44,69,92,49,51,84,-84,71,11,-66,37,-72,34,27,-50,-20,9,14,40,-90,-5,-48,4,-125,-15,-33,86,105,-20,12,-39,-74,-43,-74, 
  /* [3][0][][] */ 77,5,43,-18,-70,58,-108,40,72,22,76,2,96,107,75,13,116,106,-51,23,127,-92,-61,-124,1,-113,-85,113,50,-102,94,14,-54,-35,-16,-10,-92,-10,48,43,-9,-74,-99,2,81,42,-53,-69,73,-81,53,21,104,46,108,-105,-100,-125,-112,-60,-89,38,-22,82,64,-34,-62,-27,-32,-76,17,109,22,-96,62,-36,41,111,103,-55,-88,-111,40,122,39,93,-37,-106,-80,55,8,-115,99,-91,-86,73, 
  /* [4][0][][] */ 57,112,-2,57,-35,-28,34,14,79,99,-13,46,28,-37,-16,-73,-30,-10,-70,14,119,-99,87,22,9,-2,63,-67,-55,37,-84,-59,78,127,13,-109,-56,1,-127,46,-51,-66,-87,-106,35,119,36,72,25,-46,-21,-82,-110,62,-96,18,52,-114,19,14,6,-88,-25,-85,-59,59,1,-36,28,-122,-104,-100,-63,31,111,65,69,-14,-14,-57,3,-45,-111,-15,6,106,95,8,-127,-57,60,43,35,117,-111,9, 
  /* [5][0][][] */ 108,-95,88,92,45,-119,24,65,101,-123,-1,-67,29,107,43,41,69,61,-76,105,35,58,21,-25,-120,-68,-10,-94,55,37,21,-107,-41,4,-71,21,-118,-40,54,29,-111,-66,49,106,-33,20,44,-50,-116,104,30,22,45,9,37,-20,108,57,-56,-42,34,-68,29,-75,-29,111,-24,30,84,7,112,-73,-47,81,-27,-78,11,-50,16,91,117,43,35,106,-85,53,-3,37,73,-108,127,100,-17,32,78,-98, 
  /* [6][0][][] */ 40,-49,120,84,-75,-35,-4,66,-16,-66,2,-73,100,67,127,-117,66,1,-6,108,-75,-94,109,70,-68,-79,6,-40,-12,-97,55,-70,-80,-107,-32,-91,0,34,-104,104,68,46,30,-13,-103,98,-65,-38,-80,11,-22,-69,64,-48,91,-4,-1,6,-67,108,-92,18,59,-63,-40,85,104,-39,93,10,-99,-4,70,-73,-86,-42,-71,-89,-55,-13,38,-15,47,-34,-55,-114,-36,-93,81,90,107,27,-41,-59,72,-33, 
  /* [7][0][][] */ 121,84,-40,-48,-78,121,-21,3,127,-1,-98,11,56,-97,47,85,49,23,5,120,60,30,0,88,-64,109,43,60,-86,114,-20,38,23,26,68,105,-114,100,-7,-37,102,-76,93,77,56,3,104,-116,60,-59,-115,-73,-26,93,20,26,127,-99,10,-56,10,-9,88,-121,-75,-61,74,24,-118,17,71,94,88,34,67,66,-66,54,-101,45,99,-42,-17,-78,93,45,-113,104,91,11,91,69,-63,-44,1,-67, 
  /* [8][0][][] */ 8,36,-52,-98,60,23,-72,-26,25,45,48,92,-2,-43,-95,-75,-79,107,-47,19,33,-26,84,110,-95,105,39,75,-76,14,-100,124,98,-35,46,-2,118,15,-23,65,106,125,-123,-127,-14,-20,-31,119,25,-79,-70,14,-71,3,-29,-119,68,107,-101,110,116,39,68,111,-38,-54,-24,110,-95,47,38,-4,76,84,10,25,-50,110,85,80,34,89,-119,-83,27,89,75,-39,43,-29,-82,99,-86,-104,-51,89, 
  /* [9][0][][] */ 10,7,124,54,93,-111,-48,-127,49,61,-14,62,-22,-80,-102,-27,20,9,-108,-66,6,117,-119,-106,117,-6,-5,36,-6,-59,-92,112,69,6,35,-16,-77,14,-36,-27,56,-72,61,-99,86,24,-102,59,63,-13,-87,-51,82,-78,-75,119,91,-54,-21,-5,-91,119,95,-77,-87,12,116,57,-37,118,119,-97,15,85,-111,-101,-81,-119,-43,122,38,31,112,33,-41,-95,37,-16,105,32,-25,120,122,-1,62,-37, 
  /* [10][0][][] */ -54,85,102,-62,-12,115,105,36,24,34,24,-59,109,88,-26,15,-24,78,-99,-61,-16,37,60,-64,18,55,-108,-109,-43,89,-89,-81,89,106,127,81,-35,3,-28,45,-53,103,-104,-35,-93,-67,9,-54,-3,-6,44,-7,68,12,-64,-28,-110,-8,32,-45,-3,88,100,46,126,-71,-92,-21,31,-10,-93,-65,95,63,-80,109,-15,70,72,27,84,2,64,96,-98,31,107,-32,36,5,-1,-62,-48,-40,-45,-83, 
  /* [11][0][][] */ 121,18,-5,113,125,51,48,45,104,96,-73,127,1,-81,38,-59,-51,-110,68,44,39,83,35,-105,-113,-98,-8,79,89,3,34,-20,-91,-70,61,52,-55,76,-17,-51,-47,93,-64,11,-38,-68,-81,-79,76,98,122,39,-87,-100,18,33,-75,-49,-21,-88,-79,97,77,14,38,96,-50,31,99,69,-78,-68,50,104,-95,54,-66,37,-33,98,-102,-26,-63,-55,54,-112,25,-30,-94,-8,16,-95,-84,-24,-70,-56, 
  /* [12][0][][] */ 19,74,-49,5,93,12,-39,43,-87,62,-13,22,-40,17,56,-76,-96,-36,-47,-80,31,-5,22,104,-73,-49,111,-96,100,21,-31,118,-86,-68,-41,20,3,-76,-11,50,101,30,-106,-36,-17,-88,-31,127,-46,-124,-73,96,43,-6,-84,93,-25,-54,58,70,62,121,-15,59,120,39,-40,120,64,110,46,77,91,117,-12,-5,-34,39,-112,-90,-54,105,55,6,-32,3,60,116,-93,-110,98,50,107,-9,31,68, 
  /* [13][0][][] */ 115,-55,110,101,98,119,80,72,69,-108,15,-26,96,75,72,-44,-121,-74,-71,30,73,-29,126,-47,-71,41,10,22,-88,-88,89,38,41,108,-19,39,-83,-28,31,72,-75,73,-49,17,-41,29,0,-27,36,101,-33,-118,-98,26,104,-82,-53,31,-17,-74,-25,123,-87,16,-52,-62,-91,89,-35,-10,101,2,-92,41,-75,-41,-106,69,89,-64,57,-100,103,17,-83,-127,100,122,-9,-52,-76,59,118,-51,72,-9, 
  /* [14][0][][] */ -56,-105,98,77,85,-28,-22,-114,-93,-41,73,93,-27,-85,-88,-90,-52,-77,11,27,-43,36,-2,69,-127,-76,-27,34,-115,-117,-77,36,112,-23,-32,10,105,121,40,-114,-19,-127,43,95,73,-123,73,-88,115,32,86,46,106,-26,-14,17,-54,12,53,101,-16,-81,-45,78,-92,-9,86,-116,-88,-89,-91,101,6,84,53,-76,57,-108,59,38,52,-20,-118,-45,-126,-126,-116,109,115,5,92,-51,94,113,-13,57, 
  /* [15][0][][] */ 5,-16,-26,60,77,-80,65,-73,69,6,-46,2,82,5,-78,-84,60,27,-47,30,46,12,66,84,96,68,24,72,15,41,52,-81,7,5,-52,-2,-53,121,96,-65,49,119,-44,-18,19,-51,-44,-51,2,-38,1,39,-79,-59,-28,-12,71,38,-31,93,-31,-59,29,89,-29,73,-53,9,-54,-3,61,-52,13,20,54,-77,0,48,89,69,-65,49,-81,-37,-96,24,-73,47,81,74,-85,-38,43,89,-73,127, 
  /* [16][0][][] */ -69,2,85,-58,34,95,-42,30,58,41,-94,54,-18,-46,-54,-54,88,77,64,56,97,63,-35,41,-15,49,-69,52,-95,6,31,12,-95,65,45,48,-36,52,-49,-70,40,-26,58,78,52,99,79,-16,-47,-88,1,111,-40,113,61,33,32,73,60,12,103,90,44,52,43,7,-37,82,32,79,-29,-11,21,86,53,80,-9,83,-99,-16,8,-73,46,22,7,127,88,14,70,16,-15,93,58,-33,-74,37, 
  /* [17][0][][] */ 16,-119,20,59,-58,-111,-82,-95,16,-98,60,46,80,35,-112,33,19,24,75,84,-105,-21,-9,-49,1,41,-78,11,83,-56,-46,51,-47,-43,15,-10,-53,72,-91,-27,-108,-57,-22,-20,-17,-8,71,-114,59,73,-30,14,-31,49,72,-81,-125,70,-93,-117,14,-91,48,72,-95,-83,27,-112,-111,-8,78,9,5,-127,-74,43,85,-60,23,-69,-5,-38,-83,-100,-119,42,54,-43,1,55,-108,-109,-20,79,-9,-8, 
  /* [18][0][][] */ -101,100,112,-73,-10,-119,-111,4,-8,75,-115,-47,-40,35,63,-64,21,-30,60,-25,105,-47,18,-83,33,-105,-19,114,30,34,-1,42,47,-32,-114,-113,-34,34,-37,65,-46,-3,-56,-12,-122,11,29,-4,18,-29,72,31,-116,-11,1,91,-48,35,-26,-126,87,114,13,37,-74,-127,-35,91,70,-78,-75,112,-103,-39,-95,-111,54,57,-5,-78,-60,-8,-31,-71,104,-35,72,71,-115,-79,-67,110,92,-59,49,-22, 
  /* [19][0][][] */ 25,43,80,45,67,-64,114,94,110,-48,34,-10,-91,42,-51,67,85,-82,118,68,-16,90,-51,18,91,-68,32,-57,-86,-116,-62,66,91,-72,40,9,13,-65,-55,-92,66,-104,-81,17,-79,42,81,-92,-17,46,-38,61,-32,38,15,-3,39,108,1,-22,64,-50,127,70,-67,9,-23,13,-1,60,83,-46,-56,-117,-52,-72,-11,-105,20,117,64,-106,-26,91,-82,31,13,2,98,37,6,69,-25,121,76,-36, 
  /* [20][0][][] */ -8,61,56,77,-71,75,20,46,27,11,-67,-1,-7,74,32,-57,-42,-23,-54,-24,22,-36,-59,-60,74,-57,-87,39,18,10,-34,97,84,38,-12,45,34,-22,-13,-91,-53,-19,-74,-82,-21,-41,-60,86,53,-90,-84,44,39,100,46,-1,82,59,82,77,95,-45,-43,-27,-24,-54,-42,15,-70,-65,-51,65,-52,-66,26,20,93,64,92,90,70,7,68,-9,52,127,-9,67,19,84,25,52,18,19,-2,15, 
  /* [21][0][][] */ 101,84,77,-102,103,-76,77,23,-7,-63,-70,46,9,40,-47,-88,-103,-23,34,-11,113,-49,77,-82,59,-86,-28,79,18,8,-3,-19,7,25,-91,-113,116,102,-115,-28,-14,6,34,-9,-95,-81,-79,99,-19,-69,-3,84,41,63,-93,29,-60,59,-49,127,59,-73,9,-10,87,35,-31,-69,-104,1,63,83,37,-18,78,71,-112,-29,68,109,17,96,40,-75,26,-110,69,-85,-105,81,112,-112,-43,-62,71,-33, 
  /* [22][0][][] */ 41,-50,-77,-103,98,-50,121,62,-109,87,-76,-119,127,-123,-125,-86,51,100,-124,-68,98,-86,44,36,94,-7,-121,115,-63,-81,-64,-111,49,72,22,12,5,-20,-61,-122,4,-9,9,110,68,-121,99,-24,-65,-90,8,-17,-67,-107,-49,39,-19,-28,-15,-28,124,-80,-89,-121,-70,26,-126,-48,127,120,-26,1,-71,8,74,-95,54,-59,78,101,120,-105,-80,-126,89,82,117,-37,-64,32,-73,70,21,24,-31,99, 
  /* [23][0][][] */ 74,-90,12,65,105,-111,2,-99,45,-82,92,87,25,-109,27,-39,101,-36,-106,107,100,-80,111,-31,-27,-14,95,27,79,57,81,-36,-40,49,25,41,107,-8,-111,14,-123,-10,16,-111,-68,-99,127,35,82,-119,-86,-65,90,-72,-53,99,-89,-15,106,51,-116,-90,-65,-8,41,45,-116,-113,73,-8,119,-72,-1,-36,-36,-99,48,-20,103,125,-52,-51,29,-119,102,-28,122,-27,-95,41,114,-2,115,-47,-32,78, 
  /* [24][0][][] */ -62,-45,-92,-59,-77,-96,-71,-78,49,121,86,59,125,71,-27,-110,-66,42,33,-47,101,-69,-48,-28,39,-26,87,65,116,65,17,-54,-1,18,58,38,-43,-86,72,-9,-83,-112,114,9,29,-39,60,84,-87,-50,-9,-1,79,51,72,-62,-6,87,31,9,92,4,25,102,-86,106,-36,-86,-89,66,-49,-19,-29,39,101,101,64,-70,-95,-75,-70,-84,-51,-127,12,31,-4,-107,28,-111,13,-67,-9,42,-86,15, 
  /* [25][0][][] */ -78,-56,-73,-3,100,-67,-110,67,24,-114,-38,35,82,4,-104,-19,-64,61,36,-112,72,94,-8,-54,-5,-55,-93,46,87,-83,50,122,95,-108,52,81,108,-72,-11,-9,-101,91,-97,7,106,36,82,50,-107,88,-63,-11,52,-29,-63,19,-30,62,-107,79,123,51,38,52,10,85,-9,-6,-83,9,-25,-113,43,-127,79,22,74,76,21,25,57,54,-37,75,-72,-80,-99,-102,-25,-49,111,31,-114,-5,-20,-114, 
  /* [26][0][][] */ 59,-120,-21,-10,-99,4,4,-15,-91,-123,118,89,-85,-43,7,-12,121,35,-80,-67,21,73,106,12,65,76,10,48,15,6,-90,10,-28,-59,-104,-104,-68,95,-50,108,-68,127,60,33,-72,88,-47,109,-21,51,-1,121,14,-24,10,-113,117,65,60,31,6,-100,87,-16,122,-19,-58,67,-90,83,95,105,83,-97,-88,21,50,-112,-99,13,-27,100,88,-57,87,40,-43,22,-79,127,18,17,-48,121,62,106, 
  /* [27][0][][] */ 13,29,-60,-85,-87,-64,-22,-13,76,108,77,-111,-26,64,76,-6,64,22,83,-44,-67,8,-3,-22,-60,68,-111,-4,64,21,-16,11,80,77,-82,-68,-86,-13,-99,67,-32,76,26,31,107,60,56,102,100,97,80,-29,-69,-46,41,-33,127,-24,-62,-47,1,-60,3,74,51,-45,-93,119,46,2,-89,35,58,-5,8,-39,71,-52,90,104,95,2,115,14,-65,5,-21,114,-21,25,-21,-54,63,21,125,116, 
  /* [28][0][][] */ 94,-4,92,50,-106,-61,-96,-67,-61,-97,62,82,-67,-74,14,99,94,109,-71,73,-27,32,-92,-62,-116,81,-70,-54,-64,-67,6,-15,-93,23,86,71,20,-107,-34,38,90,36,-90,53,-98,-11,25,50,20,-59,-71,-42,-75,23,43,48,41,-4,84,51,-28,-31,-97,10,62,77,-17,81,-68,32,-90,-33,76,20,2,-106,-112,-67,-72,50,-65,-89,105,-66,65,-127,72,-106,-98,-67,-30,-53,-42,51,-121,-83, 
  /* [29][0][][] */ 44,47,50,-47,-79,8,-104,6,100,-11,-82,-86,96,-94,-44,-42,-92,94,28,-55,-67,-30,48,5,-21,9,-41,-26,-93,-7,91,-5,50,0,-73,-48,-8,98,-9,85,49,101,-42,74,-2,97,-50,-20,19,-5,53,-81,65,-84,104,42,-78,50,-46,97,-104,87,-77,-46,-56,-59,49,83,86,-77,33,-65,101,75,55,25,105,-48,-28,33,-5,-75,-7,-67,58,127,37,75,-32,92,67,72,-91,19,-2,64, 
  /* [30][0][][] */ 25,5,-32,39,-36,21,-1,13,127,5,55,-30,-65,27,41,47,4,70,99,-46,57,-67,-57,12,-27,47,-38,86,1,-58,-42,22,-36,-31,-74,-21,23,21,30,7,127,12,-1,86,81,16,69,64,-19,81,45,-9,84,25,31,71,-10,-37,-25,1,-37,3,5,6,-53,-50,-41,87,-36,75,50,6,-54,98,56,-13,-11,-25,-14,-24,41,40,-46,40,-52,82,-57,113,17,-26,72,37,-7,10,57,-4, 
  /* [31][0][][] */ 80,-96,35,99,49,61,-60,-102,-26,-19,-79,-88,98,-124,-50,111,-66,-92,55,48,65,35,-32,105,49,-114,34,37,-76,-77,47,109,19,19,-95,-10,96,-26,-68,-117,75,-66,-35,30,3,-52,-42,24,73,33,95,-22,-118,-53,-77,21,-112,65,3,115,-40,-5,96,-77,69,110,-47,-81,71,-127,-119,11,-102,-38,2,5,-61,-50,49,89,-78,-40,57,80,55,111,-96,20,19,-51,-89,-58,10,103,-1,-20, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0017747805686667562, 0.0018095509149134159, 0.0019147142302244902, 0.0017567520262673497, 0.0016291814390569925, 0.0017093124333769083, 0.0018441226566210389, 0.0017044057603925467, 0.0017398671479895711, 0.0017066486179828644, 0.0017966907471418381, 0.0017764202784746885, 0.0017903714906424284, 0.0017767262179404497, 0.001746947062201798, 0.002242362592369318, 0.0020565446466207504, 0.0020012273453176022, 0.0017293763812631369, 0.0017729419050738215, 0.0022144387476146221, 0.0017812595469877124, 0.0016748077468946576, 0.0017404021928086877, 0.0018498330609872937, 0.0017748123500496149, 0.0017452532192692161, 0.0019277979154139757, 0.0018966192146763206, 0.0020008406136184931, 0.0026918104849755764, 0.0018126459326595068, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1084, -25, 3563, 4333, 4175, -1800, 3436, -1123, -1680, -618, 4424, -1983, 3615, 4402, 1514, 1729, -534, -307, -1498, 4322, 1542, -520, 1879, -509, -690, 2991, 1194, 1664, 4760, 1822, 3889, 1071, 1106, 3557, 4606, 2746, -388, 2801, 2100, -3431, -101, 910, -84, 1174, -973, 407, -1229, 647, -6249, 1362, 1007, -2517, 6076, -528, 1685, 1297, 801, 2335, -535, -1739, 186, 1372, 350, 3266, 4883, 2572, 2908, 4671, 3514, -592, 2102, 4513, 3197, -1258, 4088, 4977, 775, -3029, 440, 1274, 10074, 1365, -426, -2022, 1024, 856, 1104, -1445, 3001, -361, 2928, 1117, 41, -2302, -111, 1170, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00018187740352004766, 0.00031936829327605665, 0.00015914526011329144, 0.0001757222053129226, 0.00015081230958458036, 0.00022678558889310807, 0.00017192473751492798, 0.00022270549379754812, 0.00021861409186385572, 0.00023425364634022117, 0.00014889157318975776, 0.00021927777561359107, 0.00015365223225671798, 0.00013881009363103658, 0.00020508069428615272, 0.00022989040007814765, 0.00028614277835004032, 0.00023340978077612817, 0.00019175358465872705, 0.00014311597624327987, 0.00028465816285461187, 0.00023122808488551527, 0.00018902991723734885, 0.00022061206982471049, 0.00032377129537053406, 0.00020470483286771923, 0.00024053550441749394, 0.00021052410011179745, 0.00015044007159303874, 0.00023055411293171346, 0.00013460640911944211, 0.00023063049593474716, 0.0002644911000970751, 0.0001682182919466868, 0.00013577616482507437, 0.00017767067765817046, 0.00022933026775717735, 0.00016731642244849354, 0.00018031118088401854, 0.00015311756578739733, 0.0002401267847744748, 0.00024725153343752027, 0.00024668732658028603, 0.00022757760598324239, 0.00023791825515218079, 0.00018155410361941904, 0.00019958105986006558, 0.00023572104691993445, 0.00011287072265986353, 0.00018577674927655607, 0.0002449583844281733, 0.00018955119594465941, 0.00012411823263391852, 0.0002538260305300355, 0.00020209657668601722, 0.00019231242185924202, 0.00024405392468906939, 0.00017033616313710809, 0.00028260212275199592, 0.00017574176308698952, 0.00025908404495567083, 0.0001923375966725871, 0.00028822256717830896, 0.00020377893815748394, 0.00013921449135523289, 0.00018302824173588306, 0.00013587904686573893, 0.00015920648002065718, 0.00018831122724805027, 0.00022732697834726423, 0.00022908218670636415, 0.00015314668416976929, 0.00014694333367515355, 0.00019054843869525939, 0.0001745058543747291, 0.00015809865726623684, 0.00014838438073638827, 0.00020940994727425277, 0.00023575556406285614, 0.00017009653674904257, 8.5002102423459291e-05, 0.00021072100207675248, 0.00022850144887343049, 0.00020152346405666322, 0.00020268488151486963, 0.00021550885867327452, 0.00023125461302697659, 0.00023912034521345049, 0.00021074470714665949, 0.00022613987675867975, 0.00020570335618685931, 0.00019736816466320306, 0.0002126161998603493, 0.00018623573123477399, 0.00025640302919782698, 0.000252682832069695, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -14,99,-84,39,51,-39,99,78,-66,5,38,-99,87,127,-75,27, 
  /* [1][0][][] */ -19,2,-55,-25,-5,49,25,-127,33,-47,-25,-53,-13,-45,-52,2, 
  /* [2][0][][] */ -21,-26,33,76,25,47,-104,127,-20,-1,72,-56,-22,-67,-42,64, 
  /* [3][0][][] */ 84,-92,77,-1,-7,-34,-36,127,-33,58,70,45,-4,51,3,14, 
  /* [4][0][][] */ -46,-26,-8,58,-98,12,-38,-127,-7,-6,41,-19,41,55,112,127, 
  /* [5][0][][] */ 127,30,-29,-26,-74,21,27,64,22,-16,54,89,111,27,-77,-3, 
  /* [6][0][][] */ 15,-41,-62,-54,-81,5,-4,-47,-58,-61,-26,26,96,58,127,-5, 
  /* [7][0][][] */ -54,32,-30,-77,4,-56,-73,12,-94,49,-71,-63,-127,-38,16,84, 
  /* [8][0][][] */ 52,43,73,8,55,24,70,11,65,-27,40,5,-127,-26,-78,12, 
  /* [9][0][][] */ -36,63,28,-46,-26,-13,32,-16,-29,49,-42,15,44,127,26,26, 
  /* [10][0][][] */ 81,57,-49,67,-44,-21,55,-51,-89,-35,-54,-119,-127,-71,10,112, 
  /* [11][0][][] */ 47,5,65,16,-9,-30,5,115,-92,30,-28,1,-11,-5,59,127, 
  /* [12][0][][] */ -56,-25,10,7,20,-6,127,49,-71,33,10,-14,-9,82,-62,123, 
  /* [13][0][][] */ 18,38,31,61,113,33,122,117,-46,95,-92,-79,42,93,-127,-28, 
  /* [14][0][][] */ -127,124,8,-7,-8,0,61,7,-47,34,125,-15,-94,19,-60,56, 
  /* [15][0][][] */ -8,-13,-127,-48,82,-40,-84,-39,-18,-26,-21,-64,-9,-83,-48,42, 
  /* [16][0][][] */ 121,-13,6,-14,31,-30,49,-27,-33,5,127,51,48,4,-31,13, 
  /* [17][0][][] */ 13,20,-24,-99,-6,-59,117,-127,3,-15,-48,38,41,76,15,48, 
  /* [18][0][][] */ 31,126,-16,-53,61,-73,-18,-58,-37,127,-29,-2,-26,55,-9,-35, 
  /* [19][0][][] */ -72,-123,125,-87,40,-127,26,-33,43,48,93,99,29,-8,62,-26, 
  /* [20][0][][] */ -17,92,58,7,8,-4,16,-25,60,-5,98,-29,-127,-24,-77,-5, 
  /* [21][0][][] */ -67,36,22,18,65,37,70,50,-127,55,-38,18,-21,19,-63,-25, 
  /* [22][0][][] */ 14,-89,46,14,17,-127,105,10,14,-51,-38,-76,42,-77,-59,-48, 
  /* [23][0][][] */ -59,-98,46,67,30,-19,23,-50,27,-40,77,3,5,74,95,127, 
  /* [24][0][][] */ 0,-1,25,80,47,17,-51,-127,67,13,-43,15,3,0,-22,-29, 
  /* [25][0][][] */ -7,37,15,-58,-24,-2,17,-41,-20,49,-52,-11,38,127,35,1, 
  /* [26][0][][] */ -68,78,6,22,29,-86,-5,-31,14,25,14,70,11,1,-87,127, 
  /* [27][0][][] */ -16,-127,-54,6,-63,99,1,-65,22,-47,57,-32,30,-54,-108,-23, 
  /* [28][0][][] */ -36,1,41,87,25,7,-45,-127,-121,50,107,-16,73,7,-50,-24, 
  /* [29][0][][] */ -127,108,-22,-27,-29,21,-125,-71,-46,-30,1,-7,9,-57,-116,65, 
  /* [30][0][][] */ 51,73,-47,84,-108,-98,-81,-10,-46,2,10,-114,127,32,-17,100, 
  /* [31][0][][] */ 127,32,-64,-36,-63,21,101,35,-56,-21,63,51,36,22,-21,3, 
  /* [32][0][][] */ -30,-19,127,-4,-20,78,78,14,-17,-14,-11,27,6,73,68,38, 
  /* [33][0][][] */ 10,35,-71,-62,-13,29,127,20,7,-25,18,-64,91,121,-41,39, 
  /* [34][0][][] */ -92,-24,90,18,28,-53,110,-12,-127,34,39,-46,53,62,-61,-32, 
  /* [35][0][][] */ -4,18,-50,20,-79,121,-45,-15,-24,127,5,88,-68,66,16,39, 
  /* [36][0][][] */ -11,-76,127,-52,-51,17,-37,-10,15,21,-50,82,4,-84,-37,46, 
  /* [37][0][][] */ 93,-10,79,-38,127,-80,-54,33,-63,127,-78,3,-100,-52,121,-26, 
  /* [38][0][][] */ 47,45,23,-99,-12,-58,-109,67,-92,61,-102,-59,-72,-127,-112,71, 
  /* [39][0][][] */ -78,22,-55,-31,-78,-76,65,13,-127,-30,24,86,34,-1,-1,57, 
  /* [40][0][][] */ 127,36,5,-78,-69,17,11,-36,-33,-15,-44,-76,17,52,44,35, 
  /* [41][0][][] */ 92,-79,-57,-52,-1,-5,-62,-22,61,-20,-2,-56,127,-76,59,-34, 
  /* [42][0][][] */ -9,-84,-45,127,6,-98,-107,12,12,4,3,52,-81,72,-52,-7, 
  /* [43][0][][] */ -84,-43,-47,-122,-49,3,-1,70,46,-127,-43,38,-23,-55,-20,89, 
  /* [44][0][][] */ -35,53,35,-53,-19,-20,37,116,127,-87,74,116,122,49,-15,-4, 
  /* [45][0][][] */ 35,79,-75,87,127,-79,-42,-66,110,-66,62,-58,-31,8,-66,55, 
  /* [46][0][][] */ -23,-40,10,-5,95,-28,27,24,-12,127,-26,-121,34,62,-54,78, 
  /* [47][0][][] */ 81,-41,-34,-15,81,-18,-39,-60,1,127,-32,34,-6,-107,-78,8, 
  /* [48][0][][] */ 11,28,-12,-127,-3,-49,116,-121,7,3,-39,50,50,64,6,38, 
  /* [49][0][][] */ -27,127,-67,38,43,-55,63,57,-30,29,43,-89,-27,77,125,-95, 
  /* [50][0][][] */ 9,37,-17,6,-127,0,-70,-55,50,73,34,32,-37,-39,-4,41, 
  /* [51][0][][] */ 127,-42,-49,-11,-46,86,-94,-41,44,-19,-39,65,-31,-65,0,40, 
  /* [52][0][][] */ -28,-55,45,72,-48,-97,-127,0,-59,-47,-23,-60,25,-54,-5,93, 
  /* [53][0][][] */ 25,101,58,-127,5,115,98,-16,-12,-29,-6,-42,87,-115,2,57, 
  /* [54][0][][] */ 35,123,4,-23,0,-88,-102,48,9,-29,-45,127,78,88,24,57, 
  /* [55][0][][] */ -47,-18,58,36,46,-41,105,98,-94,-4,26,11,127,48,-17,6, 
  /* [56][0][][] */ 127,26,10,21,-43,104,-46,-73,-19,39,-84,0,-53,99,-4,29, 
  /* [57][0][][] */ -48,-36,-46,-30,-69,-96,63,-21,-127,-24,57,51,18,37,-12,52, 
  /* [58][0][][] */ 44,-57,65,25,3,-68,-18,11,24,-14,-127,-28,26,-32,-43,49, 
  /* [59][0][][] */ 77,17,-127,92,11,38,87,-28,-70,-48,29,-99,-116,-58,33,109, 
  /* [60][0][][] */ 1,32,-14,18,-14,-23,-20,2,-31,-81,58,120,-44,-127,-35,-10, 
  /* [61][0][][] */ -36,9,82,-83,-74,45,-3,124,-23,-92,60,59,87,-10,2,127, 
  /* [62][0][][] */ 76,42,-8,-127,-18,1,6,-41,-9,34,-35,43,25,-20,-87,-74, 
  /* [63][0][][] */ -2,-29,3,2,-66,-69,-59,14,-73,-8,-30,-21,127,5,47,-8, 
  /* [64][0][][] */ 26,-2,-15,66,-109,-44,-27,-83,58,127,43,-6,43,-55,-54,121, 
  /* [65][0][][] */ -31,5,-15,-10,-79,67,20,-21,46,-105,97,-67,72,60,-127,63, 
  /* [66][0][][] */ -127,98,-100,-95,44,-33,-105,-75,-104,117,92,10,-123,-62,49,56, 
  /* [67][0][][] */ 3,-31,-127,-116,70,77,8,-27,-25,-6,46,-19,23,36,21,45, 
  /* [68][0][][] */ 51,18,-9,-43,-68,34,12,40,-67,74,127,-15,-12,-52,-126,5, 
  /* [69][0][][] */ 69,-102,53,-35,15,-106,-33,127,-4,67,82,69,-16,69,-32,1, 
  /* [70][0][][] */ 48,5,127,47,99,-28,124,19,30,27,-66,38,-81,66,-84,42, 
  /* [71][0][][] */ 11,33,95,-76,-127,-79,17,5,-20,-14,18,-102,-79,0,15,27, 
  /* [72][0][][] */ -64,-97,25,-116,72,-14,4,46,-71,20,-118,-14,57,116,-66,127, 
  /* [73][0][][] */ 20,16,55,-1,127,-98,-57,11,-39,104,-87,37,-92,-56,118,-15, 
  /* [74][0][][] */ -96,9,-127,-74,68,-38,-34,20,-75,0,-123,-31,-37,-60,-31,70, 
  /* [75][0][][] */ 90,-24,49,-42,18,4,-127,-24,-8,-94,69,1,4,-14,-10,-7, 
  /* [76][0][][] */ 3,-54,-35,113,43,99,107,-64,86,-127,71,125,38,-89,-70,42, 
  /* [77][0][][] */ -32,-28,120,-33,40,-27,-25,-127,26,14,26,92,46,44,25,-8, 
  /* [78][0][][] */ -47,7,14,-40,1,-52,38,-13,26,-19,15,-89,-105,-74,-127,-54, 
  /* [79][0][][] */ -113,-84,-19,35,127,27,-26,28,15,41,-9,51,-42,-69,-81,-9, 
  /* [80][0][][] */ 7,-120,45,127,-33,-30,-107,80,-5,14,71,9,-88,-10,-11,61, 
  /* [81][0][][] */ 109,60,-15,86,-4,34,19,127,15,12,114,52,115,30,57,-17, 
  /* [82][0][][] */ -49,6,12,-32,33,-127,-112,-84,6,71,-47,-37,-31,96,-70,-27, 
  /* [83][0][][] */ 107,-19,80,-30,-37,-11,-127,-4,24,-117,15,-50,-20,-6,6,-23, 
  /* [84][0][][] */ 16,-66,-91,23,127,41,40,30,-110,21,-107,-19,43,-33,-67,11, 
  /* [85][0][][] */ 7,92,45,-46,110,8,53,-101,127,-27,44,-17,100,-77,4,-1, 
  /* [86][0][][] */ 116,-40,127,46,4,-59,81,41,-66,-54,-96,-48,34,21,-69,11, 
  /* [87][0][][] */ -6,7,20,-77,73,-27,-46,17,33,-38,74,-34,-85,-127,-5,22, 
  /* [88][0][][] */ -58,-32,39,-6,22,31,-59,-49,-2,10,-73,-127,-46,-38,-15,-21, 
  /* [89][0][][] */ -74,14,21,-71,29,8,-127,21,88,22,-72,-9,-13,-84,-42,-24, 
  /* [90][0][][] */ -15,-19,-29,-75,127,16,-65,45,39,62,35,-16,38,21,-75,-14, 
  /* [91][0][][] */ -40,-61,16,44,-40,-5,-3,68,-40,-64,26,-43,-6,65,32,127, 
  /* [92][0][][] */ -26,79,3,-9,-24,59,-103,54,-43,-8,69,-1,-36,127,48,27, 
  /* [93][0][][] */ -5,78,-53,-71,72,89,-78,7,68,59,73,57,-127,29,-38,71, 
  /* [94][0][][] */ 23,61,97,12,-127,-37,12,-8,18,-20,29,-19,-55,-19,15,-23, 
  /* [95][0][][] */ -12,25,48,-2,127,-19,-94,79,17,20,-76,98,2,19,98,-42, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0016842582263052464, 0.0029574793297797441, 0.0014737494057044387, 0.001627258607186377, 0.0013965829275548458, 0.0021001261193305254, 0.0015920925652608275, 0.0020623428281396627, 0.0020244547631591558, 0.002169283339753747, 0.0013787960633635521, 0.002030600793659687, 0.0014228817308321595, 0.0012854374945163727, 0.0018991300603374839, 0.0021288779098540545, 0.0026497975923120975, 0.0021614688448607922, 0.0017757156165316701, 0.0013253117213025689, 0.0026360496412962675, 0.0021412654314190149, 0.0017504934221506119, 0.0020429568830877542, 0.0029982528649270535, 0.0018956494750455022, 0.0022274558432400227, 0.0019495382439345121, 0.0013931358698755503, 0.0021350241731852293, 0.0012465097242966294, 0.0021357315126806498, 0.0024492943193763494, 0.001557769370265305, 0.0012573421699926257, 0.0016453021671622992, 0.0021236909087747335, 0.0015494176186621189, 0.001669754390604794, 0.0014179304707795382, 0.0022236709482967854, 0.002289649099111557, 0.0022844241466373205, 0.0021074605174362659, 0.0022032191045582294, 0.0016812642570585012, 0.0018482011510059237, 0.0021828720346093178, 0.0010452284477651119, 0.0017203676979988813, 0.0022684135474264622, 0.0017553205834701657, 0.0011493850033730268, 0.0023505315184593201, 0.0018714958569034934, 0.0017808907432481647, 0.0022600379306823015, 0.0015773816267028451, 0.0026170096825808287, 0.0016274396330118179, 0.0023992229253053665, 0.0017811238067224622, 0.0026690573431551456, 0.0018870752537623048, 0.0012891823425889015, 0.0016949154669418931, 0.0012582947965711355, 0.0014743163483217359, 0.001743837958201766, 0.0021051396615803242, 0.0021213935688138008, 0.0014182002050802112, 0.0013607545988634229, 0.001764555461704731, 0.0016159947263076901, 0.0014640573645010591, 0.0013740992872044444, 0.0019392207032069564, 0.0021831917110830545, 0.0015751626342535019, 0.00078715378185734153, 0.0019513615407049656, 0.0021160156466066837, 0.0018661887152120471, 0.0018769438611343503, 0.0019956990145146847, 0.0021415110677480698, 0.0022143509704619646, 0.0019515811000019312, 0.0020941465627402067, 0.001904896111227572, 0.0018277089111506939, 0.001968911848962307, 0.0017246181378141046, 0.0023743954952806234, 0.0023399451747536659, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 9041, 14829, -1798, 3310, -379, 6375, -712, 4680, 15182, -2712, -7836, 8855, -13661, 13954, 3324, 9964, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 5.1814324251608923e-05, 6.9116591475903988e-05, 5.0711631047306582e-05, 6.9998670369386673e-05, 6.1816484958399087e-05, 8.4783991042058915e-05, 6.0960570408497006e-05, 6.2896688177715987e-05, 8.5783671238459647e-05, 7.764399197185412e-05, 6.0733600548701361e-05, 4.6706467401236296e-05, 8.1452271842863411e-05, 5.847463762620464e-05, 9.1363814135547727e-05, 6.110291724326089e-05, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -96,38,46,-33,-63,-13,-67,-6,-53,7,-3,-15,42,43,31,-46,22,-4,88,7,-1,-61,127,66,56,21,11,27,-58,-112,-89,8,-46,-40,27,25,16,32,-6,31,-6,-1,-75,9,-73,-23,-6,83,-16,19,-42,-15,-4,5,26,-51,-104,5,-17,68,60,28,3,1,-28,-54,-46,29,-55,-52,9,-16,11,-2,-74,-48,-50,19,-38,5,-49,62,92,-69,13,60,6,44,40,-12,0,-26,-43,-39,-53,11, 
  /* [1][0][][] */ 36,22,19,-53,-62,-23,-10,9,-19,23,59,-47,12,-11,-68,-40,-7,-4,-66,30,-20,-79,14,51,-5,-65,-3,-43,70,-101,105,-71,56,22,-21,54,38,74,-15,-47,32,15,0,-13,5,61,-127,-47,-48,-50,-15,-28,38,-49,-40,52,13,-3,-35,7,29,48,-7,-103,-13,-16,-65,-7,-2,-7,-81,-11,-37,-19,18,-77,5,19,28,-68,-21,-31,-83,-30,38,-32,-25,19,-71,-4,-50,43,18,59,-52,54, 
  /* [2][0][][] */ 87,-42,35,32,14,-81,74,7,-7,-10,-20,-21,-92,-37,18,-26,-108,-51,-42,53,18,-45,-59,30,-16,-75,4,-29,-38,45,-57,127,-61,125,-31,17,-21,-25,-19,-13,-111,86,75,13,-68,3,-15,-13,35,0,-42,-53,51,-23,-23,68,44,-2,59,4,3,45,-39,15,78,16,0,-10,37,47,-50,-5,44,51,74,48,38,-84,77,56,85,-7,-55,30,-68,28,30,79,8,2,-30,29,-46,58,-20,35, 
  /* [3][0][][] */ -2,-11,-12,12,9,-7,8,-59,-19,57,33,50,22,-12,-48,47,4,-33,27,9,19,127,29,-43,2,24,-21,4,66,-38,63,-19,-21,31,-27,-28,17,42,33,8,-76,-36,-41,26,-30,30,27,-3,-21,-50,-8,-24,46,-83,-30,-49,15,84,-26,7,-11,-8,-45,6,24,47,-37,-2,-21,-9,9,-66,-33,-47,34,-9,15,-6,-30,-32,-32,-4,-60,9,-13,-41,35,-22,-7,15,23,-17,47,26,-36,59, 
  /* [4][0][][] */ 34,13,-51,11,28,21,-45,8,-33,80,103,-14,-8,3,4,-56,16,-15,-33,48,11,-55,57,84,-67,-1,-127,16,-45,-61,7,18,-62,-48,13,61,14,40,19,30,-36,-42,45,-27,-9,10,-37,57,-40,61,15,16,42,-13,-81,21,47,-20,8,-11,53,-8,31,7,-49,16,-41,9,-53,33,-49,54,46,-64,-38,-53,24,-56,-10,7,-39,89,-76,-2,-26,30,29,-60,57,8,33,10,-66,-28,34,29, 
  /* [5][0][][] */ -71,35,34,-11,45,-21,56,-37,-15,29,-1,-20,45,-19,-23,-47,-4,-34,48,25,-123,-30,-66,40,-29,-9,44,12,41,-72,-16,52,53,120,-10,39,1,29,40,-16,-24,94,74,-29,-5,62,39,1,1,18,-14,29,11,-36,27,-81,34,-49,-59,-66,61,89,-46,-17,75,-43,-74,-62,-58,-11,-52,-8,-14,12,-22,-49,20,-32,-35,-17,127,-27,29,-79,-77,41,24,-13,-37,43,26,-4,-18,32,9,86, 
  /* [6][0][][] */ 47,-8,-86,32,-35,-112,106,98,-62,73,-16,80,-127,-83,62,57,-6,-55,-5,9,-5,-16,-67,-64,-57,45,78,27,31,40,95,-57,24,14,14,-74,11,12,34,71,6,23,-62,-27,7,-66,-75,25,37,-117,-25,74,36,15,-22,-67,70,43,12,0,-115,49,-99,3,29,11,-2,56,44,35,-5,-51,-40,27,100,33,67,-20,41,-71,-8,-52,-76,69,4,-60,45,17,-46,68,34,43,-21,18,-36,115, 
  /* [7][0][][] */ 29,77,-29,-48,-29,-10,32,11,-55,33,-52,-59,-42,15,15,-4,-46,-43,-32,58,6,127,4,26,-13,2,17,24,44,41,76,-32,67,25,-19,3,-1,-15,7,32,-65,-5,6,-54,21,-44,71,-23,34,-74,-85,-26,-48,1,-1,-12,23,13,-94,14,-10,107,19,-25,-23,2,-43,16,-35,-25,-96,34,9,63,-35,42,-49,48,12,-75,-22,-42,54,-74,36,-27,-6,2,-13,62,-82,42,54,-31,-46,9, 
  /* [8][0][][] */ -4,82,-55,34,-29,-31,-82,22,-95,-32,13,9,-33,37,24,75,10,-49,6,7,21,-14,9,-10,-26,70,3,24,-11,-16,-45,-23,-19,-45,-29,-62,-35,30,43,3,2,-36,31,11,-40,-31,2,-12,-18,-11,53,66,-1,-16,-70,100,-37,32,-6,-45,-30,8,23,48,-32,-62,-40,-7,-43,16,1,4,-14,-44,-113,-20,-49,28,-61,-38,-25,-5,-34,-34,5,4,18,26,18,69,-50,-11,-91,-127,22,-46, 
  /* [9][0][][] */ -17,15,-58,48,-36,-29,66,53,-7,44,-26,84,-31,-19,27,127,8,13,65,15,27,21,28,-89,-43,-2,19,-9,9,-18,40,42,-29,-6,-1,-113,20,-23,-21,-16,-18,17,37,-26,-6,3,18,15,30,78,18,-7,-52,-77,-1,-5,1,-12,66,-12,-65,52,-59,-24,77,-8,-21,5,-63,17,36,32,-12,79,-21,-18,-25,15,-41,-11,43,-22,54,-4,22,-19,-10,-29,-58,13,-2,0,65,34,-43,-3, 
  /* [10][0][][] */ 65,-4,-32,3,-39,-26,69,3,9,-24,-25,-14,-95,-14,8,1,-75,-28,17,20,47,41,19,1,-54,82,34,-7,-52,-74,-29,-16,72,-41,46,8,68,-93,83,127,11,-58,4,7,-14,-89,-8,60,28,80,-75,-39,-18,18,15,48,20,-61,73,56,-15,49,-64,-21,-7,-58,20,53,19,-35,-9,39,115,33,26,-80,32,-51,51,-16,-51,38,31,19,-40,-15,11,47,-46,-20,24,55,52,69,-39,6, 
  /* [11][0][][] */ -58,-39,37,-60,20,-18,-34,-48,41,-50,7,-1,-11,5,3,2,-57,-8,63,7,-62,21,-72,-84,20,15,-51,43,38,-57,37,-36,23,-7,14,-21,-73,4,-113,14,-71,62,-44,59,19,13,-5,-42,23,-34,-63,-56,24,30,77,-57,-34,-75,7,-58,-20,-54,-20,-127,5,-69,60,75,116,17,74,-18,-34,-16,63,-37,92,35,23,47,31,-14,-20,91,84,11,-11,-23,-75,-61,-8,27,55,36,59,74, 
  /* [12][0][][] */ 34,-24,9,-31,27,106,-8,33,48,56,-5,46,11,41,18,10,-64,47,17,50,127,9,58,-61,21,22,-69,-63,-20,71,5,0,28,-15,11,-37,36,-10,-29,-33,14,-19,36,47,-14,33,6,-6,-60,21,-6,21,-25,-29,12,12,-30,52,15,53,20,-85,7,-90,-6,88,-12,-34,1,-49,58,12,-12,13,-8,48,-7,40,-68,-10,-26,36,104,17,-12,64,-19,-61,61,1,-79,48,71,10,-17,-86, 
  /* [13][0][][] */ -10,34,-6,-41,-39,-4,5,-32,17,-30,-36,-76,56,-108,-38,-68,-21,-33,-87,-14,-87,-25,14,101,-42,8,109,8,19,-37,60,40,10,-7,-127,125,-35,-58,29,-58,113,11,-4,22,0,-95,62,-30,79,-12,-49,30,23,-8,-6,73,73,-60,-43,-4,46,41,-5,-85,-5,39,-37,34,-67,-43,-84,-1,-69,16,-43,-85,-105,19,32,81,-20,68,34,-99,50,39,33,-10,-25,-18,-13,19,-56,21,-27,-10, 
  /* [14][0][][] */ -4,27,-91,-33,91,91,-89,-8,29,-47,84,2,26,-24,-45,-77,-65,18,40,127,-2,-41,-1,9,19,32,-23,72,14,-12,-27,18,66,11,-38,2,-13,65,64,12,63,6,30,4,-18,-48,58,-41,25,-11,-3,-22,49,23,-34,29,8,64,-95,-17,-13,-69,-39,-100,11,-45,-47,-2,-78,61,-14,35,0,-30,-24,-38,39,-8,-47,-25,36,-3,7,-8,-11,52,-19,-24,-27,70,70,16,-5,-44,-37,-63, 
  /* [15][0][][] */ -81,-47,59,-60,13,-22,-39,-91,-1,19,-12,67,-13,-26,43,113,-127,-19,20,-68,44,-18,-18,-88,41,-10,48,-62,-68,-114,-72,30,-39,54,93,-109,-15,-50,26,-23,-31,-5,31,-20,9,-2,77,113,-53,-15,13,-48,-50,52,15,-64,-100,-17,115,25,-37,21,-108,24,-72,-6,6,24,58,-88,94,-26,61,-40,-35,-46,18,22,54,1,-26,94,53,29,-4,-23,-123,14,-14,-70,-97,34,59,-31,-33,71, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0022021087352186441, 0.0029374551959335804, 0.0021552443504333496, 0.0029749434906989336, 0.0026272004470229149, 0.0036033194046467543, 0.0025908241514116526, 0.0026731092948466539, 0.0036458058748394251, 0.0032998695969581604, 0.0025811779778450727, 0.001985024893656373, 0.0034617213532328606, 0.0024851721245795488, 0.0038829620461910963, 0.0025968740228563547, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -56, 280, -2015, -4321, 1281, 2511, -1188, -1435, -671, -3093, 9722, -1744, -1671, 9778, 8885, -5449, 17678, 2914, -4398, 266, -1197, -3796, 685, -1458, 357, -3612, -1534, -3739, 250, -7898, -366, -344, 11362, -1216, -2002, 130, 179, -1986, -752, 7530, -4, -423, 1665, -5401, 12171, 11924, -823, 15169, -969, 9927, 14478, -2626, -731, 1211, -573, 10416, -1013, -630, 15016, 5647, 7151, 9257, 8631, -6860, 42, 714, -2436, 1303, -2451, -1483, 2192, 2457, 12951, 93, -717, 9471, -295, 270, 8143, -1525, -264, 16710, 62, 2882, 17943, 2307, -3922, -2551, 1423, -5391, 12059, -347, -2531, 34, -4718, -3135, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00034732447238638997, 0.00021526411001104861, 0.0001076327680493705, 0.00016989477444440126, 0.00030834274366497993, 0.00030312570743262768, 0.00036690948763862252, 0.00022871358669362962, 0.00023284602502826601, 0.0001871478307293728, 0.00012075554695911705, 0.00040766075835563242, 0.00025280873524025083, 0.00012453731324058026, 0.00014552364882547408, 0.00013414259592536837, 9.808780305320397e-05, 0.00020897842478007078, 0.00015825081209186465, 0.00012536511349026114, 0.00019494257867336273, 0.00027956135454587638, 0.00015994138084352016, 0.00024276510521303862, 0.00064104306511580944, 0.00024036143440753222, 0.00030035153031349182, 0.00014974594523664564, 0.00021777955407742411, 9.237827907782048e-05, 0.00041966504068113863, 0.00023148550826590508, 0.00019629814778454602, 0.00021252514852676541, 0.00027660658815875649, 0.00039708882104605436, 0.00018599748727865517, 0.00026100748800672591, 0.00042581703746691346, 0.00013190560275688767, 0.00021090978407301009, 0.00029015069594606757, 0.00022804949549026787, 0.00011693312990246341, 0.00011039632954634726, 0.00012085877096978948, 0.0001835260191000998, 0.00010449155524838716, 0.00025096640456467867, 9.673539170762524e-05, 0.00012025538308080286, 0.00014328464749269187, 0.00020823812519665807, 0.00015116069698706269, 0.00023899473308119923, 0.00015065696788951755, 0.00024710097932256758, 0.00020382262300699949, 0.00014717382146045566, 0.00011388944403734058, 0.00016782742750365287, 0.00021171857952140272, 0.00013592801406048238, 0.00012926777708344162, 0.00017880245286505669, 0.00027818931266665459, 0.00024946947814896703, 0.00023689583758823574, 0.0002326362591702491, 0.00023142820282373577, 0.00022655862267129123, 0.00016763238818384707, 9.5979303296189755e-05, 0.00028452987316995859, 0.0004041900101583451, 0.00012316786160226911, 0.00014768197434023023, 0.00016720082203391939, 0.00017286263755522668, 0.00019505026284605265, 0.00037982279900461435, 0.00010284900781698525, 0.0002212688559666276, 0.00016803873586468399, 7.4730196502059698e-05, 0.00019765163597185165, 0.00015682369121350348, 0.00022882019402459264, 0.00019406992942094803, 0.00021852023201063275, 0.00010208332241745666, 0.00041301149758510292, 0.00022247392917051911, 0.00037804781459271908, 0.00011430686572566628, 0.00032006780384108424, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 26,111,-4,18,-40,-3,44,45,66,-68,-91,41,-5,-16,18,-39,-109,12,11,15,42,80,73,82,19,-9,-41,4,-17,18,18,-20,-48,13,-25,117,-9,67,1,-12,21,-37,-5,31,-90,-48,16,-18,-20,-70,-45,-14,15,54,-16,-9,-72,-60,-51,-127,-127,13,-106,1,-27,49,42,-14,-18,34,35,-4,-43,5,49,2,11,-43,-65,28,10,-85,51,-28,-76,-56,-23,5,-123,36,-98,42,76,2,68,1, -40,-35,-4,91,-11,89,-15,0,65,30,-127,67,-20,-66,-91,127,-113,56,47,86,127,22,101,127,30,17,20,51,11,127,-16,-127,73,99,4,65,61,119,-27,-127,127,-8,86,127,-53,-77,127,-55,-9,-100,-110,-39,3,127,-18,-127,10,33,-117,-79,-52,-127,-44,90,-32,84,124,-24,8,127,127,0,-80,20,-29,-108,35,-63,-13,127,-4,-72,127,-73,-117,-53,79,47,93,127,-95,4,127,-21,127,31, 20,-112,6,2,-22,-18,-2,52,31,78,-74,16,-3,37,-7,-79,-45,8,6,18,46,66,53,87,22,-32,30,37,17,21,-5,-52,-45,-74,-28,84,-6,8,13,6,-13,35,-18,47,-37,-23,6,11,23,-50,3,-4,1,-20,18,-4,54,-71,-17,-76,-97,33,-83,-13,39,20,-41,-3,-16,-4,9,12,-30,-37,1,9,6,-17,-64,7,7,-105,25,-15,-10,-43,-14,-29,-94,22,-26,36,29,45,29,-14, 
  /* [0][1][][] */ 86,-7,65,120,-1,-50,127,49,-23,-123,-100,127,0,-127,-67,45,-81,-53,62,12,-103,18,-127,-77,-11,62,-119,127,-82,82,127,78,22,75,17,126,-127,76,-22,-66,63,-127,13,67,-127,-79,12,-127,-116,-96,-127,6,127,-73,93,-20,-127,-3,-68,13,-41,-57,-41,46,-93,-19,106,-85,-55,24,-53,-127,-127,61,127,-89,103,68,-100,-38,127,-127,-36,114,-52,-13,-3,79,-11,23,-74,29,0,-82,72,-9, -127,17,-69,127,-84,-127,-105,-127,76,1,-26,34,-76,-113,-47,111,-127,-127,127,127,36,-127,-112,90,-127,127,14,72,-79,-24,-108,73,-127,99,127,-46,20,127,127,-98,-44,28,17,45,-63,-127,-64,-114,-4,-127,-107,127,33,84,68,-73,27,27,87,-20,-19,-45,-127,127,-9,-127,127,127,18,53,-109,-81,-41,50,-114,-127,127,127,83,-43,-83,0,-104,76,-116,-93,127,127,127,127,-127,-127,-92,-61,90,127, 46,-15,105,63,-3,-24,15,40,-44,127,-82,71,6,-13,-127,77,13,-40,17,-5,-108,25,-83,-76,-2,12,127,-6,127,113,24,-96,-26,-127,-7,127,-118,13,-36,-53,-10,100,15,103,-27,-31,2,-95,127,-77,-89,-12,54,-103,-127,27,106,-4,-127,84,-9,-36,-2,45,127,-42,-24,-7,-65,-7,-43,-53,-125,-127,-1,-48,-1,-34,-127,-34,-68,-124,-26,127,-127,8,1,-6,-37,-17,-7,44,-7,127,20,-13, 
  /* [0][2][][] */ 32,-127,38,-24,5,17,25,49,-44,-39,-5,-47,17,-11,-1,50,-29,18,-12,33,-4,49,4,-26,22,56,-1,-5,-36,24,5,23,-31,-21,-22,-8,47,-11,3,-28,-7,18,-17,-44,-15,-27,-18,-26,-10,23,-27,35,-8,-12,-37,-13,-5,-4,0,47,-33,8,37,-11,-26,40,-54,-20,29,-4,14,68,-9,19,14,21,-46,-42,-6,3,10,-11,-16,-49,-74,28,-21,-14,-85,48,22,24,-3,-3,2,-16, -49,18,127,-14,127,75,-32,7,-127,14,-69,-53,127,-16,-51,39,7,48,-6,-54,17,8,51,-6,70,-56,-7,34,-23,104,-15,17,-91,25,8,-40,64,37,25,-102,-26,1,-127,7,-10,-4,-41,-71,-3,-60,-37,97,103,-82,-37,-76,-13,127,-54,21,76,-104,90,65,-25,19,-45,15,127,-14,6,83,-76,20,-28,-50,-20,-89,-43,-43,-9,-69,-31,-74,-77,127,40,-1,93,48,59,25,-24,-20,1,-5, 14,86,27,-37,-6,-7,-20,38,-2,80,17,-6,12,3,-7,61,-31,6,-12,23,-17,41,-7,-25,12,43,16,24,3,28,-14,-69,-57,-26,-13,-27,34,-41,-1,-10,-10,-5,3,-3,-30,-10,-17,-27,22,29,-22,20,-2,-25,3,7,9,6,3,85,-25,26,24,-18,34,9,-77,18,28,-11,13,67,35,-8,-7,17,-23,-20,-2,9,-2,-56,-9,-26,-56,17,-10,-23,-82,41,38,24,-6,2,-7,-17, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.014761289581656456, 0.009148724377155304, 0.004574392456561327, 0.0072205276228487492, 0.013104566372931004, 0.012882841750979424, 0.015593652613461018, 0.0097203273326158524, 0.0098959561437368393, 0.0079537825658917427, 0.0051321107894182205, 0.017325581982731819, 0.010744371451437473, 0.005292835645377636, 0.0061847548931837082, 0.0057010599412024021, 0.0041687316261231899, 0.0088815828785300255, 0.0067256595939397812, 0.0053280172869563103, 0.0082850595936179161, 0.011881357058882713, 0.0067975088022649288, 0.010317516513168812, 0.027244329452514648, 0.010215360671281815, 0.012764940038323402, 0.0063642025925219059, 0.0092556308954954147, 0.0039260769262909889, 0.017835764214396477, 0.0098381340503692627, 0.0083426712080836296, 0.0090323183685541153, 0.011755780316889286, 0.016876274719834328, 0.0079048927873373032, 0.011092817410826683, 0.018097223713994026, 0.0056059877388179302, 0.0089636659249663353, 0.012331403791904449, 0.0096921036019921303, 0.0049696578644216061, 0.0046918438747525215, 0.0051364977844059467, 0.007799855899065733, 0.0044408910907804966, 0.010666071437299252, 0.0041112541221082211, 0.0051108538173139095, 0.006089597474783659, 0.0088501200079917908, 0.0064243297092616558, 0.010157275944948196, 0.0064029209315776825, 0.010501791723072529, 0.0086624613031744957, 0.0062548872083425522, 0.0048403013497591019, 0.007132665254175663, 0.0089980391785502434, 0.0057769403792917728, 0.0054938802495598793, 0.0075991041958332062, 0.011823046021163464, 0.010602452792227268, 0.010068072937428951, 0.0098870405927300453, 0.0098356986418366432, 0.0096287410706281662, 0.0071243764832615852, 0.0040791202336549759, 0.012092519551515579, 0.017178075388073921, 0.0052346340380609035, 0.0062764836475253105, 0.007106035016477108, 0.0073466622270643711, 0.0082896361127495766, 0.016142468899488449, 0.0043710828758776188, 0.009403926320374012, 0.0071416459977626801, 0.0031760332640260458, 0.0084001943469047546, 0.0066650067456066608, 0.0097248582169413567, 0.0082479715347290039, 0.0092871095985174179, 0.004338541068136692, 0.017552988603711128, 0.0094551416113972664, 0.016067031770944595, 0.0048580416478216648, 0.013602881692349911, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5782, 3446, 887, -962, 4551, 8999, 7730, 1796, -277, 9095, 1157, -3407, 3426, 2773, 597, -508, 3540, 9659, -462, 162, 3689, 12974, 8759, -1756, -3336, -736, 7711, -116, 1639, 1191, 7835, -1892, 8441, 2744, 3659, -3811, 827, -4935, 165, 1908, 2572, 1506, 1837, -350, 864, 2114, 4807, 4194, 3112, 2131, 5072, 2806, -2406, 1528, 1138, 2253, 1402, 2285, 8031, 1138, -791, 6117, 4010, 3023, 3538, 6610, -3661, 1897, 5890, -892, 5753, 1567, 3331, 2944, 3612, 2397, -376, 2092, 2220, 3471, 3315, 3436, 7634, 819, 2176, 4564, 759, -843, 15604, -641, 786, -1173, 10249, 2972, 17, -1081, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.0001312372914981097, 0.0001106088311644271, 0.0001469705457566306, 0.00020027428399771452, 0.00015839547268114984, 8.9263900008518249e-05, 0.0001075891632353887, 0.00015227166295517236, 0.00017880588711705059, 8.3513448771554977e-05, 0.00020109213073737919, 0.00013560349179897457, 0.00014201093290466815, 0.00017272507830057293, 0.00014936918159946799, 0.00016457551100756973, 0.00017791344725992531, 7.9391349572688341e-05, 0.00011880910460604355, 0.00017975473019760102, 0.00016504974337294698, 7.0605819928459823e-05, 9.8467702628113329e-05, 0.00016660259279888123, 0.0001696789258858189, 0.00017296351143158972, 0.00011351429566275328, 0.00018222085782326758, 0.00016057293396443129, 0.00016054473235271871, 0.00010562485113041475, 0.00015270202129613608, 9.7434785857331008e-05, 0.0001635321241337806, 0.00018453446682542562, 0.00015952208195813, 0.00016670979675836861, 0.00012226527906022966, 0.00015521032037213445, 0.00016539003991056234, 0.00017642359307501465, 0.0001610314502613619, 0.00019193936896044761, 0.00023222045274451375, 0.00026940644602291286, 0.00018436001846566796, 0.00011860243830597028, 0.00014694010314997286, 0.00018670097051654011, 0.00022874193382449448, 0.00014555681264027953, 0.00015516135317739099, 0.00015050676302053034, 0.00023975684598553926, 0.00020024592231493443, 0.00018286721024196595, 0.0002303989022038877, 0.00016438181046396494, 0.00010132906027138233, 0.00016531022265553474, 0.00023607858747709543, 0.00011502301640575752, 0.00014599105634260923, 0.0001945879339473322, 0.00015479167632292956, 0.00011790118151111528, 0.00015625463856849819, 0.0002114810049533844, 0.00011064004502259195, 0.00018772126350086182, 0.00012362592678982764, 0.00013650783512275666, 0.00012574429274536669, 0.00014128364273346961, 0.00014681553875561804, 0.00011492930934764445, 0.00023158399562817067, 0.00017656724958214909, 0.00015773333143442869, 0.00014674186240881681, 0.00013564519758801907, 0.0001199279649881646, 0.00010213132918579504, 0.00015699125651735812, 0.00016746626351960003, 0.00015217774489428848, 0.00019542593508958817, 0.00024522515013813972, 6.1192338762339205e-05, 0.00019982864614576101, 0.00023059372324496508, 0.0001833710412029177, 8.224320481531322e-05, 0.00013642561680171639, 0.00019913201685994864, 0.00012607418466359377, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -66,38,-5,-25,-36,-71,-83,-30,63,-53,51,-56,83,-127,10,-120, 
  /* [1][0][][] */ -106,56,-102,-110,-83,22,-3,57,-47,0,86,-50,50,127,21,53, 
  /* [2][0][][] */ -44,-11,-78,7,-17,-50,26,-38,-105,127,78,8,49,59,-50,116, 
  /* [3][0][][] */ -47,-73,9,-45,-81,10,-49,-127,0,10,38,-73,-64,-43,-121,-50, 
  /* [4][0][][] */ 81,8,-24,41,-67,-10,-127,36,25,69,9,55,1,-4,-35,-92, 
  /* [5][0][][] */ -94,57,-85,-29,58,-67,-24,-84,105,-29,9,-41,14,-127,-121,-100, 
  /* [6][0][][] */ -17,-37,-24,28,-89,66,25,-29,-22,-41,127,-25,-13,0,-110,16, 
  /* [7][0][][] */ -23,112,127,-81,65,78,5,-59,45,63,-90,-20,53,8,35,76, 
  /* [8][0][][] */ -41,3,43,4,41,1,85,127,-58,-25,-64,-89,33,67,-78,-54, 
  /* [9][0][][] */ 33,48,101,20,-113,-53,-101,-127,62,11,125,35,-61,-98,55,-20, 
  /* [10][0][][] */ -17,-127,18,-78,-126,67,30,26,-21,-60,-17,33,-29,42,-123,22, 
  /* [11][0][][] */ 107,-67,-9,91,-98,-36,60,-3,127,105,-55,37,20,-86,-26,108, 
  /* [12][0][][] */ -63,-58,127,-9,65,-12,21,65,76,-27,107,73,-36,14,-97,33, 
  /* [13][0][][] */ -11,-40,25,28,10,13,127,39,-112,16,13,8,-26,124,93,-69, 
  /* [14][0][][] */ 127,-78,114,-5,85,60,109,56,93,78,58,43,66,-38,32,-57, 
  /* [15][0][][] */ -14,116,20,-39,26,127,-88,72,-62,-11,-36,-14,-49,116,-32,-34, 
  /* [16][0][][] */ -45,54,113,-43,19,76,2,-5,-11,12,-16,37,86,-1,83,127, 
  /* [17][0][][] */ 15,124,87,-127,20,-47,4,-82,-69,89,-26,60,-67,-26,115,-65, 
  /* [18][0][][] */ -92,-7,-75,-92,121,85,-39,-60,52,74,127,70,-1,109,-47,-12, 
  /* [19][0][][] */ 50,127,83,64,53,-31,-2,-4,-19,111,48,114,69,71,-52,35, 
  /* [20][0][][] */ 84,-5,5,66,-72,-12,-15,50,-29,-51,-127,-50,83,-50,16,-15, 
  /* [21][0][][] */ -97,-62,-9,82,-41,4,-127,56,-5,15,18,18,-28,28,-51,5, 
  /* [22][0][][] */ -8,-1,-63,-48,127,-1,-30,54,57,72,40,59,-15,25,-17,29, 
  /* [23][0][][] */ -62,17,-23,5,22,56,103,73,-10,127,-27,-20,0,29,-52,-37, 
  /* [24][0][][] */ 37,-77,38,3,127,28,73,-34,55,19,36,26,-59,27,-5,-16, 
  /* [25][0][][] */ 127,-59,75,29,12,-11,-40,92,111,-30,-50,11,112,-55,92,49, 
  /* [26][0][][] */ 61,38,102,92,70,-11,-62,-16,1,61,15,127,21,-70,29,-51, 
  /* [27][0][][] */ -53,41,-78,20,-15,93,29,-90,46,-80,114,23,46,-35,127,100, 
  /* [28][0][][] */ -36,40,-77,-127,27,-62,9,-53,-96,88,-55,23,-14,33,-21,61, 
  /* [29][0][][] */ 89,99,-73,38,31,84,-46,-28,51,49,5,65,-127,14,-24,77, 
  /* [30][0][][] */ -36,66,-111,-46,67,-37,7,26,-57,53,-51,-15,10,67,-24,127, 
  /* [31][0][][] */ 30,-115,96,42,63,-73,-79,29,-15,-4,14,-35,-80,50,43,127, 
  /* [32][0][][] */ -60,72,10,45,-119,63,15,59,27,-127,21,-90,29,37,49,46, 
  /* [33][0][][] */ -73,-10,68,95,-8,20,-52,9,-39,-56,9,-15,-13,-9,10,127, 
  /* [34][0][][] */ -12,12,-88,-94,66,-9,-5,64,19,-6,-7,-21,-54,-24,-37,127, 
  /* [35][0][][] */ 77,-4,24,-6,-4,16,-84,-20,-20,-127,-47,17,-6,-25,54,-19, 
  /* [36][0][][] */ -1,32,-127,-28,38,127,-2,31,-33,15,46,29,20,27,-74,39, 
  /* [37][0][][] */ 55,43,75,-60,62,-127,41,-22,-108,74,-84,-22,12,24,120,43, 
  /* [38][0][][] */ -39,127,35,-40,42,18,74,-86,9,-4,-109,28,-56,-101,-91,22, 
  /* [39][0][][] */ 83,47,-127,-112,-19,-25,15,-56,6,-3,6,-40,67,14,-112,-70, 
  /* [40][0][][] */ -39,26,-66,-83,-47,-13,13,-127,-5,0,10,-33,36,81,43,69, 
  /* [41][0][][] */ -40,-95,-8,127,-2,-22,-68,-9,-9,-50,69,-72,-69,-8,4,28, 
  /* [42][0][][] */ -16,66,-21,-127,14,15,13,-34,61,-4,-48,15,74,-26,-16,11, 
  /* [43][0][][] */ 2,44,3,20,127,27,23,24,7,41,1,-86,-118,-42,-18,-12, 
  /* [44][0][][] */ 80,-18,24,47,-27,-15,0,38,27,-40,36,9,127,10,-52,-26, 
  /* [45][0][][] */ 15,-86,-57,43,-43,-87,2,49,26,-22,14,30,-88,127,37,-32, 
  /* [46][0][][] */ -30,-92,63,91,-10,-5,-108,70,45,-54,43,-34,29,68,73,127, 
  /* [47][0][][] */ -35,-50,12,72,7,-1,63,16,14,-68,-127,-30,52,-25,-54,12, 
  /* [48][0][][] */ -79,87,-13,-25,1,60,-9,-125,27,-26,42,-52,50,-127,-54,4, 
  /* [49][0][][] */ -54,15,36,-37,-7,4,121,127,-39,-29,-3,27,-42,38,-43,35, 
  /* [50][0][][] */ 51,15,-74,38,28,-127,-46,1,-80,45,-38,-1,15,-86,-119,-45, 
  /* [51][0][][] */ -45,63,-38,127,-46,36,-38,-82,-28,-90,0,-47,-5,29,-6,126, 
  /* [52][0][][] */ -127,7,13,-5,29,53,66,11,16,-88,-36,-36,-92,-46,-119,-12, 
  /* [53][0][][] */ -54,-77,-54,-127,-37,-6,3,88,29,-59,-39,28,-28,39,68,107, 
  /* [54][0][][] */ 6,-59,3,-2,-56,62,52,-21,-17,-89,53,28,-22,-15,-127,41, 
  /* [55][0][][] */ -15,-30,-37,26,60,-26,59,81,-57,-58,-127,-34,55,-33,-26,35, 
  /* [56][0][][] */ 72,-36,-52,-23,-127,24,-116,-4,-8,-19,-36,12,98,-42,48,13, 
  /* [57][0][][] */ -48,3,13,-23,127,27,52,48,-23,45,7,-3,-63,75,-107,-19, 
  /* [58][0][][] */ 31,8,-3,-29,47,-9,-44,-64,60,-127,-69,7,-72,-40,-19,53, 
  /* [59][0][][] */ -64,-20,-11,-2,20,57,-95,-54,72,127,-88,24,-15,9,-6,-3, 
  /* [60][0][][] */ 16,-53,1,21,-127,-38,26,11,-8,46,-14,44,-2,-40,32,45, 
  /* [61][0][][] */ 22,32,-96,-18,-44,-21,-127,-86,-13,7,49,117,73,-54,107,60, 
  /* [62][0][][] */ 51,-24,51,-21,-19,36,50,127,-59,121,19,83,28,38,83,114, 
  /* [63][0][][] */ 23,-119,-14,-19,-68,12,51,-28,-7,-20,-4,-12,-38,127,109,31, 
  /* [64][0][][] */ -12,-9,-127,-39,16,51,30,-20,-12,-107,48,1,67,-40,-68,111, 
  /* [65][0][][] */ -10,3,70,50,70,-17,83,72,-40,0,-127,-76,39,94,-68,-29, 
  /* [66][0][][] */ -41,-127,-17,-108,-70,-120,48,-33,-2,-43,9,83,-58,-48,-81,73, 
  /* [67][0][][] */ -19,-75,-79,-26,-68,109,-5,-127,-70,-26,-47,-88,15,-18,-59,33, 
  /* [68][0][][] */ 127,51,33,-22,-76,34,-86,-67,-91,-111,-23,-6,49,-24,81,-75, 
  /* [69][0][][] */ 43,8,47,-30,0,-47,-43,26,-5,127,-33,10,5,33,84,-32, 
  /* [70][0][][] */ 42,-5,-26,73,-127,24,0,-98,93,116,23,51,52,-61,-7,13, 
  /* [71][0][][] */ 127,-75,79,101,-88,-44,42,-34,126,13,-56,51,78,-70,37,16, 
  /* [72][0][][] */ -10,-46,40,109,68,-10,-127,97,89,6,52,12,-38,-63,-68,97, 
  /* [73][0][][] */ 63,17,65,-127,65,-76,-77,46,-21,112,-40,12,19,-75,25,-39, 
  /* [74][0][][] */ 90,8,40,47,-127,-31,33,1,-81,-42,15,-45,24,-70,2,21, 
  /* [75][0][][] */ 85,127,-102,28,59,57,-24,-30,-12,-31,51,78,-119,50,60,82, 
  /* [76][0][][] */ -75,-42,1,-49,-52,-4,93,-4,-64,24,102,50,-53,-127,-25,93, 
  /* [77][0][][] */ -57,127,-27,14,-57,-73,42,77,40,-60,-13,74,-26,61,0,86, 
  /* [78][0][][] */ 127,51,-65,24,-70,26,-117,-30,2,-16,-77,17,30,-110,31,57, 
  /* [79][0][][] */ -66,-24,127,57,-26,-89,-47,-45,-16,18,5,9,-69,104,-51,61, 
  /* [80][0][][] */ 57,104,29,-127,-6,31,110,-31,30,26,-42,25,92,-55,7,-6, 
  /* [81][0][][] */ 51,-51,9,-125,111,49,-2,110,127,19,-33,-43,-30,10,-79,-87, 
  /* [82][0][][] */ 82,45,81,10,127,-113,38,53,-7,110,-39,18,-15,-54,31,-113, 
  /* [83][0][][] */ -52,72,19,28,93,61,114,127,-18,61,-16,-71,-109,114,-75,-87, 
  /* [84][0][][] */ 5,-97,-7,103,1,-86,-84,44,-88,55,-60,-15,-127,67,-15,-54, 
  /* [85][0][][] */ -90,59,-36,-20,-17,-49,-40,-51,-6,34,0,-71,-127,-91,-60,29, 
  /* [86][0][][] */ -7,61,92,110,43,-33,63,9,19,25,-57,-67,32,72,-127,-78, 
  /* [87][0][][] */ -16,49,127,-26,-100,-33,23,12,38,-22,9,41,-51,15,-6,-9, 
  /* [88][0][][] */ -37,-76,-120,31,41,40,-8,30,-23,-82,-113,-104,127,-13,7,49, 
  /* [89][0][][] */ 31,35,17,-125,6,-68,-57,52,127,-2,32,-96,13,-25,64,-74, 
  /* [90][0][][] */ -3,71,29,18,-45,42,35,127,3,-57,-11,125,47,13,-42,86, 
  /* [91][0][][] */ -56,6,-13,66,72,49,-42,-115,-46,35,-13,10,-103,-127,-63,-12, 
  /* [92][0][][] */ -41,57,9,-11,-127,0,-73,61,-35,50,83,61,-18,-27,46,10, 
  /* [93][0][][] */ 99,36,99,46,-127,-79,9,32,-27,-63,-17,-65,15,-49,-15,5, 
  /* [94][0][][] */ -34,-127,26,-113,18,38,-19,1,89,-22,0,61,13,63,-41,41, 
  /* [95][0][][] */ -42,-62,-25,-52,124,114,-37,47,93,54,-85,58,-41,127,-87,47, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.00169992889277637, 0.0014327265089377761, 0.0019037232268601656, 0.0025941715575754642, 0.0020517113152891397, 0.0011562436120584607, 0.0013936124742031097, 0.0019723891746252775, 0.0023160893470048904, 0.0010817574802786112, 0.0026047651190310717, 0.0017564847366884351, 0.0018394809449091554, 0.0022373241372406483, 0.0019347929628565907, 0.0021317619830369949, 0.0023045295383781195, 0.0010283635929226875, 0.001538945478387177, 0.0023283797781914473, 0.002137904753908515, 0.00091456377413123846, 0.0012754613999277353, 0.0021580189932137728, 0.0021978670265525579, 0.0022404126357287169, 0.0014703612541779876, 0.0023603239096701145, 0.0020799161866307259, 0.0020795508753508329, 0.001368168625049293, 0.0019779636058956385, 0.0012620819034054875, 0.0021182468626648188, 0.002390292240306735, 0.0020663044415414333, 0.0021594075951725245, 0.0015837135724723339, 0.002010453725233674, 0.00214231270365417, 0.0022852313704788685, 0.0020858554635196924, 0.0024862086866050959, 0.0030079733114689589, 0.003489646827802062, 0.0023880326189100742, 0.0015362685080617666, 0.0019033289281651378, 0.0024183550849556923, 0.0029629156924784184, 0.0018854110967367887, 0.0020098194945603609, 0.001949528232216835, 0.0031055929139256477, 0.0025938041508197784, 0.0023686960339546204, 0.0029843784868717194, 0.0021292530000209808, 0.0013125247787684202, 0.0021412787027657032, 0.0030579480808228254, 0.0014899038942530751, 0.0018910358194261789, 0.0025205158162862062, 0.0020050310995429754, 0.0015271850861608982, 0.0020239809527993202, 0.0027393333148211241, 0.001433130819350481, 0.0024315710179507732, 0.0016013382701203227, 0.0017681987956166267, 0.0016287775943055749, 0.0018300602678209543, 0.0019017154118046165, 0.0014886901481077075, 0.0029997292440384626, 0.0022870921529829502, 0.0020431345328688622, 0.0019007611554116011, 0.0017570250201970339, 0.0015534381382167339, 0.0013229167088866234, 0.0020335223525762558, 0.0021692062728106976, 0.0019711726345121861, 0.0025313703808933496, 0.0031764241866767406, 0.00079263013321906328, 0.0025883992202579975, 0.0029869021382182837, 0.0023752222768962383, 0.0010653039207682014, 0.0017671338282525539, 0.0025793756358325481, 0.0016330507351085544, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -27347, -4218, 4446, -9127, 9416, -13535, 23239, -4134, 10638, -8241, 14428, 12909, -2753, -28121, 945, 4607, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 8.3699596871156245e-05, 5.7215282140532508e-05, 5.4698772146366537e-05, 6.4792176999617368e-05, 8.7193853687494993e-05, 0.00014379793719854206, 5.4985448514344171e-05, 7.0194109866861254e-05, 0.00011802227527368814, 0.00010861742339329794, 9.0546192950569093e-05, 7.8065560956019908e-05, 8.6990818090271205e-05, 9.0410350821912289e-05, 9.6720163128338754e-05, 7.1571746957488358e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 25,29,15,11,-29,-79,-13,-14,-19,-73,20,-8,60,-72,50,29,-83,-21,32,11,85,23,-77,9,-6,66,127,65,8,76,48,-42,10,5,16,-18,27,27,2,-2,120,17,36,-19,-8,-9,8,-35,29,-36,94,-5,-64,-11,30,35,-12,-36,-2,16,-16,45,-58,-11,19,-1,63,25,7,-28,18,33,0,41,10,32,66,-34,44,24,-8,46,37,43,-55,9,-12,65,11,10,-87,-15,19,15,107,76, 
  /* [1][0][][] */ 18,38,-52,-12,-9,-51,90,-78,-65,-33,-55,-44,-3,-42,-7,-60,-34,-24,-34,-17,-12,-92,113,-37,-4,11,1,62,-57,7,-39,18,-32,28,18,12,-21,54,-56,81,33,17,4,-41,54,-62,-1,36,-87,-3,55,-104,-34,42,58,59,32,26,-73,15,-44,3,-10,-17,34,26,103,7,-38,-127,8,1,22,62,-20,32,-56,-29,107,-35,41,-10,54,-59,-28,-64,-21,15,-22,-39,27,5,70,-55,-31,59, 
  /* [2][0][][] */ 4,-21,15,-5,70,46,-50,28,-63,45,11,-22,30,-9,22,34,33,-28,-127,-13,-18,-39,-10,24,2,-14,-44,20,-36,-20,-10,73,-21,-42,-9,15,-46,26,-30,-24,67,14,1,38,7,50,1,-12,-89,6,-20,25,-24,50,17,-63,42,19,48,31,-24,-17,-24,52,35,-8,-34,-3,-1,-3,-10,-41,21,48,25,69,-61,-7,-24,-37,33,30,50,-22,-14,-48,-12,-48,-15,-35,-15,64,0,-11,89,-47, 
  /* [3][0][][] */ 30,-42,-24,-108,-8,-30,110,-30,20,127,-83,-19,6,-29,-20,68,63,46,-24,19,-49,21,19,8,-42,75,51,-1,-43,-12,-57,66,-4,-25,28,-21,-1,-51,-31,58,-1,8,-27,22,55,-51,0,38,46,-25,23,-28,97,38,29,-7,2,-30,-11,-49,-37,29,61,-10,-32,-25,110,-42,-33,-13,-47,17,14,-72,-1,-73,10,-46,119,-6,-10,-60,-50,-54,-36,-50,77,76,-32,41,-57,-9,13,-87,-16,24, 
  /* [4][0][][] */ -22,78,29,13,-15,10,-35,-17,21,-38,10,-17,21,42,-19,15,-10,-46,-22,-67,28,-33,-63,16,-31,-32,-23,11,-36,127,-60,-20,9,-34,3,-36,69,44,-34,4,24,12,22,-39,-44,-4,52,-19,25,-19,-54,-18,-57,25,42,25,-2,65,-21,20,-29,-62,-18,13,57,29,-57,0,-5,-1,5,-63,-10,62,59,65,-27,15,-58,40,21,67,39,-54,47,-61,-31,-65,-40,-45,-48,-4,-5,12,31,-29, 
  /* [5][0][][] */ -2,-9,40,-23,-12,-21,-19,1,41,6,-18,-5,-15,-28,22,-20,-14,5,-50,-32,-21,11,-21,11,23,-48,63,-20,-1,39,5,75,-6,-82,24,10,-34,-35,-26,4,-46,-2,-22,10,0,23,-74,26,-17,14,48,-14,28,-73,1,19,-27,-54,5,-38,40,26,25,50,-36,11,108,-23,-11,-24,13,16,-2,29,36,6,-2,-15,127,41,-25,-9,-29,31,41,64,6,93,2,-34,-6,9,13,-13,-33,23, 
  /* [6][0][][] */ 23,-60,64,17,-43,108,-45,-103,-17,-74,-89,67,7,19,-29,87,7,35,16,-43,-86,-27,-99,-62,7,-53,-9,78,-127,50,-19,-29,40,94,-15,-3,-4,-42,22,-24,-66,43,40,-40,19,58,-92,-6,49,9,-80,-126,90,12,-50,-15,26,-29,19,-28,-14,-46,41,2,53,-72,-69,-58,-101,19,-12,-75,-24,-96,21,-111,85,14,-72,43,-38,84,20,-95,67,-47,-14,1,-79,84,-87,85,51,-61,75,-100, 
  /* [7][0][][] */ -13,-14,-60,61,-18,1,32,1,-99,8,69,49,-9,-52,-1,-30,-11,-5,-1,-3,-54,-26,-36,-43,66,38,-1,73,-2,26,28,32,-53,-127,22,94,-4,13,-54,7,-14,-13,-9,-68,22,52,56,74,-13,49,-45,12,18,-41,52,-54,-9,25,-67,-24,54,-1,-1,-33,63,-49,94,-21,-54,-19,67,-8,-9,-31,-81,-25,21,-32,87,-34,-6,-15,-76,-42,36,13,-68,42,4,15,3,19,62,-14,85,-8, 
  /* [8][0][][] */ -5,-56,7,2,-22,-11,23,-12,-6,-9,54,45,19,34,-46,-13,72,4,14,4,-13,-75,-43,-17,-24,-33,69,0,-23,52,-3,-36,-13,4,6,4,-50,-19,30,-26,0,46,43,-41,16,-17,31,-9,39,-7,54,-6,1,10,-57,8,-25,118,-71,-3,-16,-57,-57,-6,-86,-28,-19,16,-7,9,36,-14,-31,-127,49,-106,17,13,-58,19,-27,-6,6,70,73,-63,-44,53,-49,88,12,-13,-56,7,-4,-58, 
  /* [9][0][][] */ -28,-28,-25,22,10,20,4,42,-44,-1,56,54,-27,50,26,-39,-15,30,-19,-41,1,38,-1,9,-22,24,7,17,37,-8,18,-7,-17,-23,2,50,-15,-8,16,-1,-14,-27,7,-1,8,41,-5,36,-42,10,-17,29,117,19,-6,-1,20,-17,38,15,-29,-1,74,10,10,20,60,8,30,-3,-17,19,4,-127,-39,-117,-33,-9,37,-2,-6,29,0,-45,37,12,-50,-3,1,104,36,28,51,35,-11,23, 
  /* [10][0][][] */ 21,41,11,2,-10,17,-41,-17,62,13,-42,24,15,11,-3,-52,-34,-5,19,-3,23,-16,-18,-32,10,-23,-94,46,-21,51,5,14,17,19,-22,1,18,4,-5,-3,38,-10,48,-44,-33,-2,18,23,16,7,9,-21,-25,-12,5,32,-7,5,-7,-7,-10,-41,-11,12,-6,-17,-92,-25,-54,-14,44,-21,-16,26,31,18,46,-16,-93,10,-13,30,-2,-9,3,6,-70,-127,-16,24,10,16,54,-36,21,26, 
  /* [11][0][][] */ 18,-40,4,4,-63,30,17,3,70,-21,-23,-44,26,8,10,-9,-26,52,26,-61,5,35,10,-25,39,16,65,0,29,-58,-27,17,15,102,-100,2,11,-18,57,12,-54,47,-15,15,-39,0,-15,-9,51,-19,-25,-11,-24,16,-80,90,-29,-1,-4,-34,22,1,-11,-72,-10,-46,-127,-84,1,-32,-86,35,50,17,-10,2,33,56,-114,-36,-16,-7,-20,-5,-20,-8,61,76,23,-54,9,7,-35,25,86,32, 
  /* [12][0][][] */ 18,26,-36,-22,23,-19,6,41,49,-37,16,1,-3,-12,-3,12,10,-46,-26,7,12,53,8,50,-39,-39,-127,-7,73,-26,35,1,-21,-78,64,-9,37,-14,-8,15,-9,-56,8,31,42,-4,19,-21,-73,2,-54,98,71,-22,38,-76,17,19,-30,-35,16,46,70,6,-19,-18,31,27,107,29,23,23,6,-21,-14,-5,-39,-53,44,-69,19,-47,26,-43,2,3,4,-101,-4,33,-42,17,14,66,13,37, 
  /* [13][0][][] */ -18,18,-72,27,32,19,-14,11,22,65,-35,37,-50,-23,64,-48,9,46,60,8,-29,-42,4,12,40,42,-17,26,9,35,55,-16,-16,61,-4,41,19,-38,-59,-50,3,-12,9,17,41,47,-35,43,-47,39,4,4,-16,-36,67,36,17,-45,-5,-13,26,16,1,-24,12,79,127,39,20,2,-43,-20,39,47,-78,47,15,-66,124,-39,-14,-33,22,-4,21,55,-30,-16,-6,-19,6,44,42,12,58,51, 
  /* [14][0][][] */ -3,56,24,16,-74,-47,22,35,-73,-27,83,9,-78,-7,71,-25,-42,45,-74,32,-14,22,-111,15,-51,0,-59,-121,7,-4,24,84,-59,31,17,-10,-30,-77,8,-43,34,-34,66,-26,-10,48,-71,32,-15,-46,78,33,-6,20,-45,31,-66,35,-8,36,40,69,-1,48,17,-46,1,-76,48,60,65,44,-57,38,9,12,35,-13,37,19,-77,114,0,-127,91,-4,-8,4,-124,-10,-19,8,-31,18,43,44, 
  /* [15][0][][] */ 74,-33,23,34,46,10,-8,-1,15,32,-62,-13,60,70,-2,-13,-11,0,-78,45,-1,-33,18,24,61,-37,85,31,44,-28,-35,69,61,50,-8,-84,64,68,55,49,84,34,-29,4,-37,-121,28,-40,-33,-17,-21,-1,-13,-50,-19,49,-6,4,-7,18,3,-57,-39,32,34,38,-70,42,-12,-31,-7,-10,4,-127,-48,-102,-26,23,-118,30,75,-35,49,24,-57,-4,-8,-18,42,84,15,-64,-29,-37,38,-40, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0035572329070419073, 0.0024316494818776846, 0.002324697794392705, 0.0027536675333976746, 0.0037057388108223677, 0.0061114123091101646, 0.0023368815891444683, 0.0029832497239112854, 0.0050159464590251446, 0.0046162405051290989, 0.0038482130039483309, 0.0033177861478179693, 0.003697109641507268, 0.0038424399681389332, 0.0041106068529188633, 0.0030417991802096367, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { 7661, -657, -4321, 8356, -1689, 1164, 635, -2178, 1660, -3693, 306, -1910, 9364, -2636, -1966, -6268, -299, 422, -8407, -1194, -2208, -243, -5021, -544, -2, 6907, -8319, -5202, -875, -3095, -756, -1276, 18349, -60, -2810, -787, 622, 14133, 4481, 10068, -703, 4765, -94, 6990, 253, -487, 8493, 3285, -5434, -35, -3094, -407, -1222, -2878, -1827, 1852, -1364, 3125, -159, 2482, -887, 743, -1932, 8098, 8569, -551, 11950, 9218, -1688, -493, 7826, -1805, -137, 873, -2198, -443, 14972, 8544, 8486, 13095, 15070, -1475, 7661, 9522, -647, -2631, 10946, -5356, 9937, -676, -6965, -2814, -445, 107, 18064, -1267, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012943985348101705, 0.00029534369241446257, 0.00022198449005372822, 0.00014758922043256462, 0.00022195890778675675, 0.00062318559503182769, 8.7697546405252069e-05, 0.00020106468582525849, 0.00037221246748231351, 0.00028428819496184587, 0.00029844441451132298, 0.00023193741799332201, 9.0492481831461191e-05, 0.00015075324336066842, 0.0002455986978020519, 0.00018246263789478689, 0.00037085040821693838, 0.00042757234768941998, 0.00013745327305514365, 0.00033856759546324611, 0.00020964087161701173, 0.00032214800012297928, 0.00013153829786460847, 0.0001264653546968475, 0.0028077706228941679, 0.0001775091077433899, 0.00027621255139820278, 0.00014783618098590523, 0.00033397955121472478, 0.00016500471974723041, 0.00016685029549989849, 0.00028412713436409831, 6.5644293499644846e-05, 0.00053303828462958336, 0.00011596914555411786, 0.00026072905166074634, 0.00034320211852900684, 0.00010018575994763523, 0.00022022797202225775, 0.00010126295819645748, 0.0006438332493416965, 0.00024029512132983655, 0.00023034145124256611, 0.00013838362065143883, 0.000143647805089131, 0.00031920260516926646, 0.00014976267993915826, 0.00024509933427907526, 0.00020761786436196417, 0.00051469297613948584, 0.00028992624720558524, 0.00019835683633573353, 0.0001527725689811632, 0.0003192252479493618, 0.00044652281212620437, 0.00033885712036862969, 0.00020124297589063644, 0.00048607177450321615, 0.00036308530252426863, 0.00034018696169368923, 0.00023357916506938636, 0.00024321951786987484, 0.00015303469263017178, 0.00013952970039099455, 0.00026274254196323454, 0.00040540745249018073, 0.00013776625564787537, 0.00016173519543372095, 0.00020071929611731321, 0.00034549864358268678, 0.00013107754057273269, 0.00025761258439160883, 0.00047010192065499723, 0.00021072979143355042, 0.00018986599752679467, 0.00024731535813771188, 8.2813356129918247e-05, 0.00017585400200914592, 0.00014764182560611516, 0.00015325045387726277, 0.00010033490980276838, 0.00028631181339733303, 0.0001398481399519369, 0.00029552201158367097, 0.00011411950254114345, 0.00026236311532557011, 0.00012418156256899238, 0.00023782080097589642, 0.00012530319509096444, 0.00027452141512185335, 0.00012953139957971871, 0.00027048488846048713, 0.00042415998177602887, 0.00014413980534300208, 0.00010441076301503927, 0.00028744520386680961, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ -32,-11,-5,-40,104,-6,33,-5,-5,3,-15,-16,-34,-6,-4,-23,-15,4,-13,-12,-4,29,-1,48,-1,-21,-33,7,23,5,31,9,-7,1,-1,-20,-1,-87,-50,4,3,-19,37,-34,-26,36,-56,-25,-17,5,-13,52,-59,10,48,-16,15,-18,7,-25,-7,-19,0,-57,-12,-18,-42,-31,-13,29,-9,0,32,-3,-10,0,-25,5,127,-53,-102,6,-109,-26,-23,-12,11,9,-36,-13,6,-25,-1,40,-15,5, -9,34,47,-79,-36,0,127,-46,-2,-8,-38,14,-63,-4,-89,79,-9,71,63,-25,-6,127,51,125,32,-2,39,74,127,45,127,-26,-127,-18,-80,-31,-24,-119,127,-62,-23,-127,-13,-60,59,-32,-33,-14,48,-2,16,127,-88,42,-74,-6,-81,-12,-5,19,-10,-127,-123,-63,-52,2,-7,-88,-10,19,-63,113,-127,-18,9,-27,-127,-75,-1,-127,-115,5,20,-65,97,84,-70,25,-127,3,35,-9,13,127,-44,-92, -22,-1,-8,-19,73,-4,43,-23,-18,17,-14,2,-16,-3,-7,-36,-11,-3,-22,-22,-7,13,-1,41,0,-11,-4,-8,16,8,21,15,-7,0,-6,63,-4,-88,-47,18,1,-5,19,-18,-16,-25,-50,-33,-8,-5,-11,33,7,-1,21,-14,72,-21,6,-30,-6,-9,-42,-15,-21,-30,127,-36,-4,23,-4,11,23,3,-4,17,-35,35,-34,-38,-74,1,-118,-25,4,-26,7,-25,-40,-30,3,51,9,42,-11,8, 
  /* [0][1][][] */ -91,-3,37,-58,56,91,-30,-8,-1,-4,-25,-13,-127,28,23,65,-17,38,92,22,28,-14,87,-24,39,16,56,28,-5,1,-7,-13,-127,-18,67,-12,-8,-127,-69,-127,-16,-7,91,-40,-73,127,-81,-91,55,62,18,-47,-106,68,69,-30,49,-33,39,-17,14,-11,105,-84,-29,18,-25,-60,-8,-4,-127,20,78,127,3,-68,-82,-60,-62,-37,-97,-2,-15,-55,37,30,-111,53,-73,127,87,-73,127,1,-60,-2, 74,127,127,127,-127,-127,119,-52,127,127,-70,-56,-96,127,-27,127,127,-127,127,127,127,-77,74,-127,-127,-127,127,127,-113,127,-26,127,-90,127,127,-99,127,94,1,-24,127,-8,-127,-127,127,-23,127,127,127,-127,127,-109,114,127,-127,127,-126,127,-127,127,-100,113,119,-127,127,127,-18,127,-99,-127,-9,-127,18,119,127,73,17,-127,93,-119,54,127,127,127,127,74,-127,127,-97,52,12,-17,-92,-27,-127,-33, -127,-28,33,-72,20,53,-44,6,-33,-3,-2,127,-116,29,24,52,-23,46,81,11,14,-18,56,-19,37,7,43,13,-3,-9,17,-8,-109,-32,88,127,-5,-100,-91,-78,-23,-12,27,-41,-62,-60,-82,-121,43,68,1,-33,127,13,98,-47,127,-27,52,-47,3,-33,-127,-39,-69,-8,-59,-67,-13,6,-111,6,46,-92,5,127,-70,-31,-53,17,-127,-7,-48,-75,1,33,-89,35,-44,-73,127,127,-37,-23,-72,-6, 
  /* [0][2][][] */ -21,-36,-28,-18,33,-3,-6,31,-10,11,29,-27,57,2,-5,-35,-4,-9,-52,-20,-11,-12,44,-30,6,-1,-15,3,-4,-6,-22,9,10,-3,3,-17,-8,-23,-23,-11,-26,14,32,0,20,14,-57,-3,-26,10,-21,-14,1,-33,37,-19,22,-22,12,-21,1,17,3,-3,-43,-22,117,19,24,19,-5,4,-14,-15,-21,-24,-4,14,-28,-31,-25,4,-69,-19,-18,3,32,-18,8,4,-19,-13,-15,-10,-23,-2, -28,-58,17,-106,-41,-3,54,127,-56,53,127,-30,-61,18,127,93,-9,-35,66,-46,-20,-37,127,10,19,-3,33,8,-20,8,-96,-40,-78,-28,-93,-6,-95,-92,48,-70,-22,-81,-33,118,23,-22,-55,-13,29,-6,-11,-6,63,26,-49,-40,-44,-49,48,-58,127,26,107,-3,-93,-58,-27,-53,127,24,-31,22,12,-30,11,-21,-5,-37,0,62,-100,-20,-68,-70,25,-127,-12,6,-10,-1,37,4,8,-108,-70,127, -23,5,-24,-8,35,-10,5,24,-22,2,16,30,54,5,-4,-41,-6,6,-28,-21,-10,-5,28,-16,-2,0,-14,-9,-1,1,-29,8,-5,2,2,1,-12,-35,-33,-11,-31,21,4,-4,24,-3,-59,4,-24,0,-14,-14,9,-37,34,-19,71,-12,15,-24,4,21,-7,12,-35,-28,-29,19,31,7,-18,5,-46,-41,-20,-13,-18,13,90,-9,-26,-2,-48,-9,-22,9,42,-4,6,-1,-21,21,1,-14,-18,-7, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0055011934600770473, 0.012552106752991676, 0.0094343405216932297, 0.0062725418247282505, 0.0094332536682486534, 0.026485387235879898, 0.0037271457258611917, 0.00854524876922369, 0.01581902988255024, 0.012082247994840145, 0.012683887965977192, 0.0098573397845029831, 0.0038459303323179483, 0.0064070126973092556, 0.01043794397264719, 0.0077546620741486549, 0.01576114259660244, 0.018171824514865875, 0.0058417641557753086, 0.01438912283629179, 0.0089097367599606514, 0.013691290281713009, 0.0055903778411448002, 0.0053747775964438915, 0.11933024972677231, 0.0075441370718181133, 0.011739033274352551, 0.0062830373644828796, 0.014194130897521973, 0.0070127006620168686, 0.0070911375805735588, 0.012075402773916721, 0.0027898824773728848, 0.022654125466942787, 0.0049286885187029839, 0.011080984026193619, 0.014586090110242367, 0.0042578945867717266, 0.0093596884980797768, 0.0043036756105720997, 0.027362912893295288, 0.010212542489171028, 0.0097895115613937378, 0.0058813034556806087, 0.006105031818151474, 0.013566110283136368, 0.0063649136573076248, 0.010416720993816853, 0.0088237589225172997, 0.021874450147151947, 0.012321865186095238, 0.0084301652386784554, 0.0064928340725600719, 0.013567072339355946, 0.018977219238877296, 0.01440142747014761, 0.0085528260096907616, 0.020658049732446671, 0.015431125648319721, 0.014457945711910725, 0.0099271144717931747, 0.010336829349398613, 0.0065039745531976223, 0.0059300120919942856, 0.011166557669639587, 0.017229815945029259, 0.0058550657704472542, 0.0068737459369003773, 0.0085305701941251755, 0.014683691784739494, 0.0055707953870296478, 0.010948535054922104, 0.019979331642389297, 0.0089560160413384438, 0.0080693047493696213, 0.010510901920497417, 0.0035195674281567335, 0.0074737952090799809, 0.006274777464568615, 0.0065131443552672863, 0.0042642336338758469, 0.012168251909315586, 0.0059435456059873104, 0.012559684924781322, 0.0048500788398087025, 0.011150432750582695, 0.005277716089040041, 0.010107384063303471, 0.0053253858350217342, 0.011667159385979176, 0.0055050845257937908, 0.011495606973767281, 0.018026798963546753, 0.0061259414069354534, 0.0044374573044478893, 0.012216420844197273, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1277, 6001, 461, 1147, 4693, 15238, 96, 2312, 10442, -1068, 13504, 3662, 1774, 535, 4479, 425, 3397, 4689, -199, 8022, 854, 8559, -1182, 1413, -8209, 1076, 2305, 1559, 6816, 1225, 2961, 3196, 1421, 12292, 3363, 3482, 3389, 2146, 5135, 2156, 16887, 1468, 2540, 1590, 2891, 5749, 4173, 7306, 1044, -1075, 1859, 5157, 2568, -2701, 8505, 343, 1847, 14971, 950, 2015, 1857, 12616, 2634, -183, 11765, 9969, 1422, 3969, 5487, 4485, 1338, 1136, -3026, 4718, 1973, 2531, 371, 8730, 3743, 6532, 2800, 1137, 5440, 14458, -199, 6972, 4961, 1497, -621, 2172, 1800, 11095, 3400, 2654, 4346, 5011, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.00023198792769107968, 0.0001245810417458415, 0.00022882407938595861, 0.00033062335569411516, 0.00013789521472062916, 6.1196515162009746e-05, 0.00031311495695263147, 0.00012488084030337632, 8.3524013462010771e-05, 0.00018241589714307338, 6.3014551415108144e-05, 0.00012780187535099685, 0.00017514512001071125, 0.00033997802529484034, 0.00012606837844941765, 0.00014546424790751189, 0.0001753389515215531, 0.00013657804811373353, 0.00016035862790886313, 0.00011093486682511866, 0.00027868108008988202, 9.1079622507095337e-05, 0.00021721262601204216, 0.00017086109437514096, 9.2662252427544445e-05, 0.00019364342733751982, 0.0002083685394609347, 0.00022286926105152816, 0.00012627175601664931, 0.0002240142785012722, 0.00020026153651997447, 0.00016365533520001918, 0.00027856710948981345, 7.0685782702639699e-05, 0.00014897437358740717, 0.0001743189204717055, 0.00016951104043982923, 0.00019340823928359896, 0.00010312366066500545, 0.00018697792256716639, 5.5627333495067433e-05, 0.00018735977937467396, 0.0001448099355911836, 0.00011847911810036749, 0.00013549544382840395, 0.00014537814422510564, 0.0001626339799258858, 0.00010106711852131411, 0.00026275069103576243, 0.00020666739146690816, 0.00022585669648833573, 0.00013823530753143132, 0.00018333143088966608, 0.00015027682820800692, 9.1461442934814841e-05, 0.00024986299104057252, 0.00017170463979709893, 6.1876082327216864e-05, 0.00019389581575524062, 0.00015163818898145109, 0.00023018133651930839, 6.8652771005872637e-05, 0.00022315949900075793, 0.0002160192234441638, 7.9488534538540989e-05, 8.9246095740236342e-05, 0.00028780318098142743, 0.00015246323891915381, 0.00013611596659757197, 0.00011569277558010072, 0.00034967809915542603, 0.00018868851475417614, 0.00019276274542789906, 0.00013779876462649554, 0.00019125149992760271, 0.00024893457884900272, 0.00023796204186510295, 9.195120946969837e-05, 0.00015510705998167396, 0.00013668659084942192, 0.00014589770580641925, 0.00014407554408535361, 9.3650036433245987e-05, 6.7371605837251991e-05, 0.00013384655176196247, 0.00010434784780954942, 0.00014586695760954171, 0.00026544413412921131, 0.00026413859450258315, 0.00025979778729379177, 0.00013604281411971897, 7.6667136454489082e-05, 0.00015137073933146894, 0.00015280676598194987, 0.0001299335272051394, 0.00012960068124812096, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 51,8,1,50,-127,-19,113,49,71,90,-34,49,29,6,29,80, 
  /* [1][0][][] */ -22,21,-92,9,127,105,-8,6,-29,13,-57,32,-52,87,-58,-42, 
  /* [2][0][][] */ -45,68,83,-6,70,93,12,39,39,-6,40,-19,58,-127,-14,10, 
  /* [3][0][][] */ 127,-28,16,0,30,34,-7,12,35,29,-58,-19,-35,47,-30,52, 
  /* [4][0][][] */ -79,-10,8,29,-127,-11,-93,-43,-22,38,-15,-58,-37,22,-39,122, 
  /* [5][0][][] */ -121,1,35,28,127,32,-13,27,-61,32,-16,11,-83,65,-101,-27, 
  /* [6][0][][] */ -127,22,-42,28,-8,-71,75,16,6,-27,-50,41,15,4,-44,13, 
  /* [7][0][][] */ 8,110,82,-110,81,61,127,15,77,5,0,64,97,23,-19,-5, 
  /* [8][0][][] */ -32,-32,-79,67,-55,83,-54,-68,23,-47,83,42,127,46,-101,14, 
  /* [9][0][][] */ -31,-127,-15,88,-45,-70,-18,60,48,56,10,69,-95,7,6,-31, 
  /* [10][0][][] */ -47,-67,-105,63,-127,126,54,-84,-1,-77,57,-47,35,115,-90,92, 
  /* [11][0][][] */ -46,-118,-29,40,-18,83,21,2,13,7,44,-91,11,107,-104,127, 
  /* [12][0][][] */ -40,-101,-72,113,-108,-127,10,75,66,63,-27,91,-13,-56,-26,0, 
  /* [13][0][][] */ -67,-25,-35,-1,-16,0,28,18,-19,127,-8,-21,37,31,18,-8, 
  /* [14][0][][] */ -117,-31,-44,-50,-23,96,-26,-102,127,-65,74,0,90,-52,-86,-82, 
  /* [15][0][][] */ 5,-127,94,-56,-53,-36,10,57,17,-49,-93,-36,87,-40,-31,-51, 
  /* [16][0][][] */ -21,-29,23,-42,31,25,-15,-29,64,-127,37,-19,-6,1,-78,-93, 
  /* [17][0][][] */ -13,20,29,-77,17,-4,-30,-7,95,-56,22,74,115,-87,-15,-127, 
  /* [18][0][][] */ 67,5,-46,-125,4,-32,127,-52,20,60,-10,57,-11,77,-12,-126, 
  /* [19][0][][] */ -42,-36,-18,-61,-104,43,-22,3,43,-40,25,-127,-26,-21,-26,-10, 
  /* [20][0][][] */ 24,81,69,-104,74,-5,-46,97,-110,-127,35,-83,-33,118,-18,-15, 
  /* [21][0][][] */ 22,-94,-127,-15,84,31,89,85,-79,-86,-32,15,109,-116,-20,17, 
  /* [22][0][][] */ 50,-24,86,-7,3,16,59,40,34,127,48,40,-3,10,120,0, 
  /* [23][0][][] */ -115,-80,-17,78,58,39,3,9,-14,11,-4,-93,-10,63,65,127, 
  /* [24][0][][] */ 20,-21,41,43,10,-99,7,-56,27,127,-113,79,-26,-66,82,-81, 
  /* [25][0][][] */ 127,-59,108,120,52,4,-11,39,-123,88,54,-56,-7,40,76,-13, 
  /* [26][0][][] */ -17,28,12,38,-53,107,-14,36,-56,-33,-81,34,5,18,45,-127, 
  /* [27][0][][] */ 35,-8,-10,-46,-54,4,-89,12,-106,-21,-69,-47,-84,40,-23,127, 
  /* [28][0][][] */ -65,25,29,5,16,-18,-127,-2,-10,-39,-3,-17,3,-58,-73,-33, 
  /* [29][0][][] */ -33,-117,-25,99,-21,8,127,12,81,67,-117,73,28,-19,-61,79, 
  /* [30][0][][] */ 48,-46,-64,3,-127,22,57,-38,14,2,-1,-22,-12,44,-3,67, 
  /* [31][0][][] */ -127,-19,12,86,-28,12,-54,-4,-23,-46,5,-33,-29,-59,-21,85, 
  /* [32][0][][] */ -127,-76,-90,1,-100,-52,5,-13,109,47,-50,-76,37,44,24,-15, 
  /* [33][0][][] */ -13,8,-82,36,-127,-92,49,-8,-114,18,-53,-57,-21,99,73,69, 
  /* [34][0][][] */ 31,56,4,44,-63,-48,29,17,13,-127,-13,36,-37,7,35,95, 
  /* [35][0][][] */ 34,-11,-63,-7,-127,9,81,-25,15,43,-9,-15,18,64,32,65, 
  /* [36][0][][] */ -7,-8,-64,61,127,-17,38,72,-85,19,-82,-75,24,-19,7,28, 
  /* [37][0][][] */ -108,53,2,-71,46,-93,-33,-40,-9,-24,-36,43,63,-82,18,-127, 
  /* [38][0][][] */ 46,116,28,-84,-113,-63,-127,-64,-49,-81,51,70,-78,-110,87,-9, 
  /* [39][0][][] */ 9,-40,-6,60,19,79,89,-52,-16,49,15,-12,-2,127,44,102, 
  /* [40][0][][] */ 102,44,87,101,-59,-54,-5,28,-86,68,-7,-19,-51,-28,127,3, 
  /* [41][0][][] */ -20,-12,11,58,-100,117,0,53,-57,22,-109,6,19,26,56,-127, 
  /* [42][0][][] */ 10,-97,28,-16,127,29,68,13,-27,-104,-96,-24,-14,-5,-10,36, 
  /* [43][0][][] */ -40,-104,-39,14,126,13,-10,101,-71,-68,-127,-84,120,-4,-69,56, 
  /* [44][0][][] */ -43,-64,-78,-90,27,82,62,15,-44,-127,-56,73,-51,53,29,113, 
  /* [45][0][][] */ -3,-53,-60,-4,-127,61,-21,-50,50,-44,22,-50,-4,12,-38,34, 
  /* [46][0][][] */ 37,-71,-14,-1,87,-82,-8,82,0,-26,27,63,-42,-55,54,-127, 
  /* [47][0][][] */ -73,-18,-9,79,-8,3,30,28,1,127,76,90,-37,80,-1,93, 
  /* [48][0][][] */ 43,-11,-76,-83,35,-64,7,47,45,-71,-3,26,-56,6,-44,-127, 
  /* [49][0][][] */ 51,25,4,40,-23,-26,39,58,-38,127,-29,46,-46,-20,77,91, 
  /* [50][0][][] */ 11,5,14,11,-127,-24,-9,-46,60,21,23,57,-21,-63,17,-6, 
  /* [51][0][][] */ 25,1,-8,-127,-34,83,53,-56,7,3,27,-56,71,62,-19,5, 
  /* [52][0][][] */ 21,-27,-4,-87,87,-108,-12,-36,42,1,127,-54,39,8,-31,96, 
  /* [53][0][][] */ -48,-62,61,-27,-45,-127,26,-105,-5,88,-99,82,-30,-17,37,-87, 
  /* [54][0][][] */ 42,50,30,-8,-127,-36,-96,-81,-24,10,61,68,-79,-35,55,21, 
  /* [55][0][][] */ 12,12,-35,71,-39,25,38,-15,4,127,23,61,4,6,0,47, 
  /* [56][0][][] */ 33,-127,-72,87,-85,36,-30,57,113,37,64,57,-52,-37,61,86, 
  /* [57][0][][] */ 38,30,85,-105,86,0,-19,-4,89,-22,19,127,58,-55,97,-66, 
  /* [58][0][][] */ 83,-55,14,-76,27,18,-3,127,58,94,0,68,49,16,94,0, 
  /* [59][0][][] */ -56,35,38,-45,-9,-86,-7,11,-3,24,-106,-100,-127,-52,76,-9, 
  /* [60][0][][] */ 35,-27,21,16,13,-20,10,-49,20,127,-12,64,-11,-24,-19,-27, 
  /* [61][0][][] */ 71,70,26,-34,-86,-127,-15,-70,-54,-14,-27,28,-63,-51,91,92, 
  /* [62][0][][] */ -18,80,-39,37,-47,127,-40,22,-49,4,-41,33,-26,41,58,-87, 
  /* [63][0][][] */ 38,-3,-76,-127,-22,-52,79,-18,0,-95,-26,34,-45,69,37,-37, 
  /* [64][0][][] */ -32,17,7,-21,61,-73,28,86,-127,-17,-87,-35,-32,86,56,54, 
  /* [65][0][][] */ -57,-19,-53,-10,74,35,-51,-75,-127,-54,2,-24,-122,95,-59,40, 
  /* [66][0][][] */ -15,55,-13,31,-42,127,-21,23,-56,18,-29,47,-28,50,52,-80, 
  /* [67][0][][] */ 22,-19,-35,-40,20,-83,71,-106,-2,37,-3,112,-56,-36,-16,-127, 
  /* [68][0][][] */ 5,-127,-28,73,-13,9,27,82,34,34,59,9,-65,35,-22,-2, 
  /* [69][0][][] */ 8,90,102,-124,60,-2,-43,112,27,123,66,103,114,-106,42,-127, 
  /* [70][0][][] */ 38,19,44,-34,89,13,-101,-48,-127,-94,3,46,-30,67,-104,-4, 
  /* [71][0][][] */ -17,-77,35,-33,60,-21,33,35,-88,78,-127,-53,10,86,-12,47, 
  /* [72][0][][] */ 10,8,64,23,-67,-32,-127,-66,-12,70,-23,63,22,112,-108,3, 
  /* [73][0][][] */ 1,-34,-14,-40,40,-116,31,-46,80,92,115,-7,24,-17,-70,127, 
  /* [74][0][][] */ 5,11,-28,90,-80,-13,95,31,77,73,28,120,127,29,-63,9, 
  /* [75][0][][] */ -27,47,-23,34,-48,127,-17,20,-29,32,-35,49,-19,49,32,-69, 
  /* [76][0][][] */ -75,87,-66,46,-125,-7,-15,29,56,45,-37,-44,50,-59,-127,45, 
  /* [77][0][][] */ 106,110,-117,127,69,66,67,53,39,9,104,-42,71,33,69,27, 
  /* [78][0][][] */ 13,-43,2,-54,64,-122,22,-49,46,46,127,-25,4,-18,-35,122, 
  /* [79][0][][] */ -42,61,3,19,-5,-43,-30,-9,-127,-6,48,7,102,38,-72,-40, 
  /* [80][0][][] */ -63,23,76,-8,77,47,0,-127,-64,67,-78,-35,2,-89,11,41, 
  /* [81][0][][] */ 91,82,-20,-1,30,-31,84,117,-117,125,-67,-39,-37,35,119,127, 
  /* [82][0][][] */ 55,107,-12,-80,-3,-44,117,-99,34,25,-84,68,127,-24,75,-62, 
  /* [83][0][][] */ 2,-33,25,29,-3,24,-40,-109,68,-31,107,11,32,-78,-50,-127, 
  /* [84][0][][] */ -127,-79,-30,-22,3,82,81,10,77,71,87,91,52,91,-82,5, 
  /* [85][0][][] */ 112,-2,104,-75,81,-4,-33,94,19,126,-64,1,-53,62,127,19, 
  /* [86][0][][] */ -84,63,-28,3,28,84,14,21,87,39,127,-28,-29,61,-8,-18, 
  /* [87][0][][] */ 12,-54,24,-48,47,-127,30,-34,48,-11,63,-35,36,-42,-39,68, 
  /* [88][0][][] */ -73,61,30,-10,115,-30,43,21,-58,-68,94,-64,80,124,90,-127, 
  /* [89][0][][] */ -25,33,-16,29,-30,127,-19,33,-41,8,-38,19,-7,55,28,-81, 
  /* [90][0][][] */ 58,-91,27,29,124,-6,46,35,-7,-105,-127,-32,-13,-17,-56,30, 
  /* [91][0][][] */ -14,60,-18,-35,-2,-85,-95,34,-79,23,-104,-127,-115,-76,-4,23, 
  /* [92][0][][] */ 63,40,51,37,-127,-83,14,12,-24,25,-22,-32,-27,-73,25,-1, 
  /* [93][0][][] */ 2,-127,-124,73,-55,-60,-12,111,95,61,10,66,-60,59,-14,-33, 
  /* [94][0][][] */ 114,12,127,-34,32,-34,22,37,34,89,-6,66,23,13,126,-17, 
  /* [95][0][][] */ -57,-49,-24,-22,127,-8,33,74,-29,-4,-95,-48,16,14,-56,31, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0038568025920540094, 0.0020711615215986967, 0.0038042035885155201, 0.0054966178722679615, 0.0022925098892301321, 0.0010173929622396827, 0.0052055404521524906, 0.0020761457271873951, 0.0013885878724977374, 0.003032666863873601, 0.0010476177558302879, 0.0021247079130262136, 0.0029117900412529707, 0.0056521394290030003, 0.002095888601616025, 0.0024183450732380152, 0.0029150124173611403, 0.002270611934363842, 0.0026659644208848476, 0.0018442936707288027, 0.0046330769546329975, 0.0015142000047490001, 0.0036111630033701658, 0.0028405680786818266, 0.0015405112644657493, 0.003219324629753828, 0.0034641299862414598, 0.003705204464495182, 0.0020992697682231665, 0.0037242404650896788, 0.003329350845888257, 0.0027207722887396812, 0.0046311821788549423, 0.0011751521378755569, 0.0024767010472714901, 0.0028980544302612543, 0.0028181234374642372, 0.0032154147047549486, 0.0017144322628155351, 0.0031085105147212744, 0.0009248051792383194, 0.0031148588750511408, 0.0024074672255665064, 0.0019697169773280621, 0.0022526136599481106, 0.0024169136304408312, 0.0027037921827286482, 0.0016802422469481826, 0.00436823396012187, 0.003435848280787468, 0.0037548707332462072, 0.0022981639485806227, 0.0030478877015411854, 0.0024983542971313, 0.0015205477830022573, 0.0041539757512509823, 0.0028545919340103865, 0.0010286907199770212, 0.0032235207036137581, 0.0025209870655089617, 0.0038267679046839476, 0.001141353277489543, 0.0037100298795849085, 0.003591322572901845, 0.0013214979553595185, 0.0014837175840511918, 0.0047847321256995201, 0.0025347035843878984, 0.0022629299201071262, 0.0019233940402045846, 0.0058134030550718307, 0.003136949148029089, 0.0032046833075582981, 0.0022909063845872879, 0.0031795587856322527, 0.00413854094222188, 0.0039561223238706589, 0.0015286901034414768, 0.0025786571204662323, 0.0022724163718521595, 0.0024255514144897461, 0.0023952578194439411, 0.0015569331590086222, 0.001120053930208087, 0.0022252008784562349, 0.0017347844550386071, 0.0024250401183962822, 0.0044130124151706696, 0.0043913079425692558, 0.0043191420845687389, 0.0022617136128246784, 0.0012745922431349754, 0.0025165406987071037, 0.0025404146872460842, 0.0021601465996354818, 0.002154613146558404, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -5492, 10473, -19352, 2258, 11143, -15142, -40122, -8666, -5839, 7977, -15589, -13212, 7133, -11287, -4041, -2073, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.0001667861215537414, 0.0001511025766376406, 0.00021136515715625137, 0.0001429850235581398, 0.00011615874245762825, 0.00014455983182415366, 0.00010313834354747087, 0.00014076672960072756, 9.3376627773977816e-05, 0.00010914407175732777, 0.00019881829211954027, 0.0001505369582446292, 0.00011071666813222691, 8.1387304817326367e-05, 0.00012391393829602748, 0.00014240168093238026, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 20,42,19,-34,69,70,-39,56,-20,120,8,48,-35,39,-15,41,33,85,50,-68,-66,76,-11,51,55,50,40,57,-43,-47,-8,89,-31,9,-75,51,44,-127,-27,16,14,-29,62,-3,-3,-55,-60,-15, 
  /* [1][0][][] */ -53,4,-79,-43,9,89,-56,20,-12,-35,-41,31,58,-16,-28,-26,-28,-28,-3,18,-63,43,-100,-44,-51,-38,49,67,-21,-30,42,-41,12,-55,-32,51,11,-57,127,-37,-23,29,-45,-16,35,50,31,19, 
  /* [2][0][][] */ 0,-1,57,-29,-19,-81,18,20,95,71,-57,13,106,-48,127,79,-69,-16,-34,29,81,-79,-32,-93,8,-36,34,-68,41,46,-36,9,32,-30,58,35,-65,16,-2,-32,28,29,61,-14,17,-81,94,-57, 
  /* [3][0][][] */ 40,1,-24,-26,34,113,15,-15,48,-51,25,-27,-57,10,12,42,-45,-68,32,-123,-11,-3,-23,-16,-44,91,127,65,-13,-43,30,38,59,-31,99,34,-45,-60,-2,39,27,12,-19,-3,24,19,-8,-26, 
  /* [4][0][][] */ 98,-6,5,-53,89,85,54,10,64,-18,-104,33,51,-22,13,-18,-95,-118,-17,-101,-20,27,-42,-37,-82,127,-103,122,-60,-55,26,88,42,-45,14,-29,-9,18,-21,29,-49,-9,-3,56,-47,110,-32,-52, 
  /* [5][0][][] */ 1,-8,-53,6,-15,51,22,-26,67,51,35,87,48,-20,34,-2,-41,127,-17,35,10,0,-63,-13,37,0,-65,-37,-16,26,18,-16,-38,2,42,13,-45,5,-86,6,87,-21,24,48,-16,9,-41,30, 
  /* [6][0][][] */ 57,14,14,63,6,-29,109,-54,-1,69,126,103,44,55,-51,55,34,-45,-67,83,56,-64,-44,60,-87,91,85,-5,121,46,-34,6,91,-60,-126,-7,96,35,6,3,8,65,56,-23,73,127,37,-8, 
  /* [7][0][][] */ -99,-5,-24,29,-60,-57,21,53,88,115,-56,-79,-108,13,-15,-17,-83,105,0,127,-52,40,30,41,-22,-100,-32,-83,27,39,-3,6,-21,12,18,-16,1,-59,127,11,7,42,21,-19,59,70,-29,-2, 
  /* [8][0][][] */ -11,-90,54,-68,63,-62,76,-43,-31,-116,26,13,-31,2,30,29,-3,3,-39,100,7,39,-25,26,69,-9,-65,-32,-125,-21,-61,-114,6,-69,-2,86,-7,35,115,16,13,3,72,127,-7,-66,-44,82, 
  /* [9][0][][] */ 16,-40,19,-66,37,83,-42,51,21,-39,-35,-20,18,-46,118,-19,5,-115,44,47,-69,39,62,-36,-26,-82,-29,80,59,73,-40,-30,-53,34,-5,127,-30,-45,-58,-26,-30,-2,36,102,55,81,-69,14, 
  /* [10][0][][] */ -12,19,-26,-7,21,29,-69,-41,53,37,65,-9,-35,-9,49,-52,-62,127,1,53,2,-12,23,31,-46,42,4,94,36,6,-33,-13,70,10,-5,26,-8,-49,-41,19,-83,-4,25,-19,13,43,30,32, 
  /* [11][0][][] */ -32,47,-19,33,28,56,2,7,16,19,-127,-68,72,19,-9,-48,-1,26,-39,-47,-9,-6,104,4,49,13,-19,35,-6,27,-10,49,28,-6,-49,-1,42,81,104,20,31,-29,61,2,-53,-15,85,4, 
  /* [12][0][][] */ -66,-3,32,22,-64,-59,7,3,-41,-34,-127,15,73,-99,18,32,49,106,87,-125,-29,43,-47,-85,-3,-20,33,-30,9,16,-17,78,66,85,38,-37,-58,-30,36,0,-37,18,59,0,39,-12,-42,-38, 
  /* [13][0][][] */ -58,-116,-50,-103,11,30,55,17,-120,23,124,-67,54,46,126,3,119,28,-1,-96,79,-83,127,4,-82,4,-23,12,-44,-106,-112,15,48,-23,-71,64,30,-60,82,-80,-7,53,71,39,57,-32,110,-67, 
  /* [14][0][][] */ 61,23,-55,4,-41,16,-84,-25,-35,63,57,47,-9,-61,12,-49,51,-113,29,5,92,-61,20,-6,-12,127,-89,6,-51,-26,-93,5,123,45,86,-22,-86,13,-17,57,-20,-45,110,-23,-53,-41,-54,52, 
  /* [15][0][][] */ -60,12,36,21,91,6,-1,33,24,73,-16,51,52,-14,-32,-18,11,37,-3,-34,25,-39,-43,-51,47,-66,-40,60,-33,5,18,6,-60,-1,127,-5,-87,15,53,-16,-40,-20,18,-6,-35,-32,-12,6, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0070884102024137974, 0.0064218593761324883, 0.0089830188080668449, 0.0060768635012209415, 0.004936746321618557, 0.0061437925323843956, 0.0043833795934915543, 0.005982586182653904, 0.0039685065858066082, 0.0046386229805648327, 0.0084497770294547081, 0.0063978205434978008, 0.0047054584138095379, 0.003458960447460413, 0.0052663423120975494, 0.0060520712286233902, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 13208, 201, 19026, 327, 14682, -2161, 34711, 375, 10563, 33321, 2900, 24510, 1539, 11694, 28160, 23003, 201, -2913, 133, 54827, 947, 19790, 1312, 16032, 18040, 35807, -1321, -1089, -2349, 12820, 19993, 94, -167, -473, 1971, 17252, 9571, 29355, 2334, 18284, 27621, 1225, 637, 14870, -193, 3172, 35230, 22620, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 9.4374678155872971e-05, 9.4939387054182589e-05, 6.5073450969066471e-05, 0.00012322953261900693, 0.00010278499394189566, 9.766478615347296e-05, 5.9230897022644058e-05, 0.00026766172959469259, 0.00011808664567070082, 6.4033520175144076e-05, 6.5574502514209598e-05, 9.2080248577985913e-05, 7.4799841968342662e-05, 0.00010860316251637414, 6.3709136156830937e-05, 8.5594161646440625e-05, 0.00010275912063661963, 8.2844373537227511e-05, 0.00014737385208718479, 3.8893402233952656e-05, 6.3670595409348607e-05, 5.7293371355626732e-05, 0.00010781920718727633, 0.00010614316124701872, 5.2823183068539947e-05, 6.9018678914289922e-05, 7.8382858191616833e-05, 4.3803713197121397e-05, 0.00027763901744037867, 0.0001128519288613461, 9.0035136963706464e-05, 0.00026678986614570022, 0.00014857055793981999, 0.00017919887613970786, 9.2665941338054836e-05, 6.9315159635152668e-05, 9.6599658718332648e-05, 6.2642655393574387e-05, 9.1695510491263121e-05, 9.6932330052368343e-05, 4.9016773118637502e-05, 0.00019097012409474701, 0.00030138401780277491, 8.7326632637996227e-05, 0.00016337518172804266, 5.6662251154193655e-05, 6.2871862610336393e-05, 6.2516926846001297e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -91,67,-127,98,-98,73,-52,64,-74,-68,63,-49,55,-82,-39,-50,73,69,87,-114,88,-114,67,-91,-105,-59,58,122,-93,-58,-76,55,63,-92,54,-122,-84,-107,87,-57,-10,-91,112,-79,100,53,-77,-53, -109,94,-66,113,-80,124,-47,89,-105,-95,99,-76,84,-115,-57,-78,99,100,127,-127,116,-127,84,-127,-117,-96,70,127,31,-88,-93,67,89,-127,82,-124,-97,-127,111,-86,-105,96,116,-90,-35,89,-90,-80, -54,58,0,27,-20,66,-31,34,-51,-36,47,-34,34,-47,-17,-18,39,48,74,-36,48,-63,33,-47,-83,-48,24,32,98,-32,-50,31,23,-80,34,-30,-33,-43,44,-57,-125,-36,35,-33,-66,54,-15,-55, 
  /* [0][1][][] */ -102,88,-72,118,-65,108,-116,101,-103,-93,81,-83,85,-104,-86,-98,104,89,-44,-111,99,-116,102,-72,-113,-87,94,95,-127,-81,-103,119,102,32,98,-125,-105,-111,105,-83,-108,-112,122,-119,127,70,-117,-96, -127,127,-111,127,-127,127,-127,127,-127,-127,127,-127,127,-127,-127,-127,127,127,-52,-120,127,-123,127,-112,-127,-127,127,107,15,-127,-127,127,127,44,127,-127,-127,-111,127,-127,-127,127,127,-127,-60,127,-127,-127, -76,75,-85,39,-57,33,-66,68,-63,-31,58,-62,56,-49,-53,-17,68,57,-32,-32,41,-63,51,-45,-122,-60,55,46,108,-53,-69,69,44,16,61,-42,-35,-33,55,-63,-58,-66,41,-65,-86,75,-19,-80, 
  /* [0][2][][] */ -40,39,-3,57,-27,47,-68,23,-37,-41,27,-58,34,-54,-32,-58,55,32,-63,-30,31,-41,30,-35,-65,-36,41,2,-74,-55,-40,61,38,52,49,-68,-39,-42,28,-43,-103,-53,51,-75,77,32,-66,-47, -63,59,-87,66,-66,36,-74,47,-50,-52,49,-76,50,-72,-52,-58,70,47,-81,-25,38,-43,37,-53,-73,-55,51,34,7,-89,-65,58,45,71,58,-67,-49,-35,29,-55,-61,72,56,-94,-31,58,-65,-57, -27,31,-71,17,-38,-5,-42,39,-7,-6,25,-36,23,-26,-20,1,41,20,-49,4,18,-5,15,-18,-56,-25,29,19,67,-26,-34,24,18,48,29,-11,-3,-6,11,-28,2,-18,20,-32,-46,43,-6,-41, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0040109236724674702, 0.0040349238552153111, 0.0027656215243041515, 0.0052372552454471588, 0.0043683620169758797, 0.0041507533751428127, 0.0025173129979521036, 0.011375622823834419, 0.0050186822190880775, 0.0027214244473725557, 0.0027869162149727345, 0.0039134104736149311, 0.0031789932399988174, 0.0046156342141330242, 0.0027076380793005228, 0.0036377517972141504, 0.0043672625906765461, 0.0035208859480917454, 0.0062633883208036423, 0.0016529695130884647, 0.0027060001157224178, 0.0024349682498723269, 0.0045823161490261555, 0.0045110844075679779, 0.0022449851967394352, 0.0029332938138395548, 0.0033312714658677578, 0.001861657714471221, 0.011799657717347145, 0.0047962069511413574, 0.0038264933973550797, 0.011338569223880768, 0.0063142483122646809, 0.0076159522868692875, 0.0039383023977279663, 0.0029458941426128149, 0.0041054855100810528, 0.0026623127050697803, 0.0038970590103417635, 0.0041196239180862904, 0.002083212835714221, 0.0081162303686141968, 0.012808820232748985, 0.0037113819271326065, 0.0069434451870620251, 0.0024081456940621138, 0.0026720541063696146, 0.0026569694746285677, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1862, -1242, 766, -1963, 3514, -714, 4697, -3408, 1216, 667, 1770, 3269, 377, -460, 469, 4341, -1770, 3323, 5751, 928, -701, 2220, -782, 4840, 1974, 1896, 1295, -928, 7317, -404, 1900, -2423, -806, 3335, -1149, 2075, 2067, 853, 255, 4128, 1890, 7607, -3605, 1787, 6311, 150, 2718, 3095, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0002262571215396747, 0.00028007879154756665, 0.00030086867627687752, 0.00023301420151256025, 0.00021717477648053318, 0.00022113330487627536, 0.00015891043585725129, 0.00016576269990764558, 0.00027542797033675015, 0.00029697988065890968, 0.00023518021043855697, 0.00022260166588239372, 0.00030481157591566443, 0.00028596862102858722, 0.00028051392291672528, 0.00017801385547500104, 0.00023921290994621813, 0.00023197168775368482, 0.0001515197945991531, 0.00024784597917459905, 0.00031787474290467799, 0.00024739551008678973, 0.00024585731443949044, 0.00016556012269575149, 0.00022702210117131472, 0.00022194084885995835, 0.0002607386268209666, 0.000257092498941347, 0.00012578080350067466, 0.00033213096321560442, 0.00023267876531463116, 0.00014934598584659398, 0.00020633231906685978, 0.00023098541714716703, 0.00021181839110795408, 0.00024441955611109734, 0.00021185268997214735, 0.00027171970577910542, 0.00025117245968431234, 0.00018694202299229801, 0.00027266202960163355, 0.00011705872748279944, 0.0001564017147757113, 0.00023077797959558666, 0.00013277381367515773, 0.0002216754510300234, 0.00020774175936821848, 0.00019374684779904783, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 62,27,127,-37,68,106,-69,-52, 
  /* [1][0][][] */ 11,-86,-127,3,56,27,29,0, 
  /* [2][0][][] */ -127,-11,-43,-28,58,27,-67,-41, 
  /* [3][0][][] */ 44,73,127,-83,-13,-113,-10,-13, 
  /* [4][0][][] */ -127,24,-46,-23,48,14,-37,-53, 
  /* [5][0][][] */ -96,22,-51,-9,10,39,-79,-127, 
  /* [6][0][][] */ -39,-127,-112,40,100,15,9,46, 
  /* [7][0][][] */ -64,-127,-95,-73,-65,-64,22,83, 
  /* [8][0][][] */ 85,32,-7,-3,96,-69,-127,11, 
  /* [9][0][][] */ -34,53,-56,89,-65,-43,127,-33, 
  /* [10][0][][] */ -26,126,39,62,127,-19,-8,60, 
  /* [11][0][][] */ -77,-33,-19,-8,-73,93,127,-7, 
  /* [12][0][][] */ 67,36,-127,37,-13,-32,-66,-16, 
  /* [13][0][][] */ 61,-29,-64,8,8,-127,-29,-22, 
  /* [14][0][][] */ 12,-80,69,8,127,-113,-65,18, 
  /* [15][0][][] */ -43,-49,-2,127,66,80,-72,27, 
  /* [16][0][][] */ 114,21,-40,19,81,-99,-127,-22, 
  /* [17][0][][] */ 57,127,57,75,44,65,28,-86, 
  /* [18][0][][] */ 32,-13,2,-1,127,3,26,-11, 
  /* [19][0][][] */ 11,127,34,16,-115,19,24,-32, 
  /* [20][0][][] */ -42,23,59,-127,17,35,-18,108, 
  /* [21][0][][] */ -36,68,41,-127,27,45,-11,111, 
  /* [22][0][][] */ -76,-73,-92,19,-122,127,116,-23, 
  /* [23][0][][] */ 95,41,-127,22,11,-52,-73,-17, 
  /* [24][0][][] */ -55,41,8,5,-18,79,-127,106, 
  /* [25][0][][] */ -109,-64,-127,14,-52,-70,73,95, 
  /* [26][0][][] */ 44,-6,-36,-31,106,-12,127,-38, 
  /* [27][0][][] */ 127,-75,27,92,4,32,-18,93, 
  /* [28][0][][] */ 46,60,53,-13,127,-58,56,-30, 
  /* [29][0][][] */ -15,-9,-26,-48,-69,13,127,-34, 
  /* [30][0][][] */ 41,-127,-53,-71,-107,8,7,-47, 
  /* [31][0][][] */ 11,30,-7,-11,-127,5,-31,-10, 
  /* [32][0][][] */ 47,-64,-63,77,-6,-91,114,-127, 
  /* [33][0][][] */ 60,127,47,35,54,-25,-31,-28, 
  /* [34][0][][] */ -127,-40,122,2,-22,104,96,11, 
  /* [35][0][][] */ -31,80,127,-13,-69,-76,-40,27, 
  /* [36][0][][] */ -101,2,111,-27,-21,127,80,25, 
  /* [37][0][][] */ -23,-81,-5,-127,-38,-79,74,47, 
  /* [38][0][][] */ 46,-14,83,-54,55,60,-127,10, 
  /* [39][0][][] */ -19,97,-127,-40,-30,1,7,86, 
  /* [40][0][][] */ 61,-52,20,31,12,3,9,127, 
  /* [41][0][][] */ -25,88,127,-6,11,80,-73,25, 
  /* [42][0][][] */ 68,-127,-122,-19,-119,7,11,-96, 
  /* [43][0][][] */ -8,-90,25,-70,127,-49,19,37, 
  /* [44][0][][] */ 4,127,122,24,6,54,-80,6, 
  /* [45][0][][] */ -39,47,14,87,-120,64,-127,22, 
  /* [46][0][][] */ -42,-37,59,45,-127,-112,-33,-2, 
  /* [47][0][][] */ -28,70,51,-104,-127,49,-14,72, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0025982277002185583, 0.0032162899151444435, 0.0034550309646874666, 0.0026758227031677961, 0.0024939305149018764, 0.002539388369768858, 0.0018248507985845208, 0.0019035389414057136, 0.0031628820579499006, 0.0034103738144040108, 0.0027006962336599827, 0.0025562501978129148, 0.003500309307128191, 0.0032839258201420307, 0.0032212866935878992, 0.0020442253444343805, 0.00274700578302145, 0.0026638510171324015, 0.0017399803036823869, 0.0028461439069360495, 0.00365032022818923, 0.0028409708756953478, 0.0028233069460839033, 0.0019012127304449677, 0.0026070124004036188, 0.0025486617814749479, 0.0029941967222839594, 0.0029523263219743967, 0.001444406108930707, 0.0038140318356454372, 0.0026719707529991865, 0.0017150172498077154, 0.0023694208357483149, 0.0026525252033025026, 0.0024324203841388226, 0.0028067962266504765, 0.0024328141007572412, 0.0031202980317175388, 0.0028843434993177652, 0.0021467520855367184, 0.0031311193015426397, 0.0013442459749057889, 0.0017960418481379747, 0.0026501431129872799, 0.0015247105620801449, 0.0025456140283495188, 0.0023856062907725573, 0.0022248954046517611, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 1826, 1489, 22839, -3448, 4632, -14218, 2461, -14330, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 9.0511974121909589e-05, 0.00011049743625335395, 0.00012702161620836705, 9.5955227152444422e-05, 0.00011688537051668391, 0.00014466095308307558, 8.29833879834041e-05, 8.1359314208384603e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -35,-48,-14,-71,5,-9,93,86,-98,-78,-35,5,-54,2,-57,38,-85,12,10,127,59,-21,15,94,76,78,30,8,-92,-55,-79,-55,-43,105,36,-54,28,-24,90,-8,26,13,6,-101,41,-36,-35,-83, 
  /* [1][0][][] */ -19,55,-19,-26,-70,59,-21,-52,-34,73,-15,14,55,45,-53,-5,-21,-118,77,-50,127,9,-64,24,59,-3,-84,59,39,-16,67,33,-35,-18,3,-13,0,107,-18,-26,67,39,-3,12,106,13,-32,56, 
  /* [2][0][][] */ -27,-36,110,6,83,-39,-13,23,-35,1,-13,46,9,-42,-45,-127,-50,-102,-23,19,-98,20,-36,-36,-49,18,-5,-49,-44,4,-33,-11,-3,-8,30,-5,25,-32,-51,11,34,-36,32,-46,-42,-45,-64,-51, 
  /* [3][0][][] */ 51,13,65,6,22,-35,33,71,-61,-29,45,-26,-73,59,-14,46,64,27,-38,31,-114,-69,127,0,8,6,-61,-40,-51,63,117,-65,2,-117,-25,42,-11,-83,-18,75,-74,-64,66,-2,-103,-77,55,-9, 
  /* [4][0][][] */ 17,-20,75,-26,7,-9,-4,-4,-60,-4,-24,9,49,-73,42,-100,46,44,-9,-33,12,32,19,7,-2,3,64,-13,25,22,-127,-13,-29,-22,3,17,48,-2,37,0,-43,-8,-73,31,-19,-99,1,18, 
  /* [5][0][][] */ 22,-42,58,31,32,18,17,-1,-72,-13,-43,25,26,4,10,-46,90,73,-1,-17,83,-62,127,-86,-18,45,0,38,13,11,-33,-48,-21,-43,-35,10,38,23,64,4,-71,23,30,27,45,-12,79,-4, 
  /* [6][0][][] */ -50,57,-122,90,49,19,26,20,-17,-12,63,-75,-92,-22,-30,29,-116,33,-9,86,17,39,-82,-91,-13,-20,19,66,-32,-33,-44,6,36,74,-40,-29,-16,-9,79,9,64,60,-117,-58,-29,127,-49,-40, 
  /* [7][0][][] */ 38,76,-81,21,12,62,114,73,45,73,-99,-1,-42,0,-70,-46,34,39,114,104,80,2,127,31,108,99,-49,96,-71,34,1,-75,15,-66,-23,25,2,95,-60,80,-64,52,-10,-80,77,-23,53,-30, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0038467589765787125, 0.0046961409971117973, 0.0053984182886779308, 0.0040780971758067608, 0.0049676280468702316, 0.006148090586066246, 0.0035267940256744623, 0.0034577709157019854, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 112, 10077, 68, 240, 777, -918, 2416, 534, -3666, 352, -5615, -106, -192, -444, -2370, 4008, 7128, 3660, -283, -3752, -7029, 1569, 14570, -3879, -3768, 29, 5404, -6738, -1513, 1394, -8746, 9207, 5921, -139, 3040, -31, -33, -431, 9775, 1548, 5428, -2766, 3144, 5495, -681, 9189, -573, -1618, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028888112865388393, 0.000179317343281582, 0.00073473737575113773, 0.00024160550674423575, 0.00021838884276803583, 0.00033075702958740294, 0.00020748212409671396, 0.00031167612178251147, 0.00011381947842892259, 0.00029934057965874672, 0.00023611706274095923, 0.001811001100577414, 0.00049079890595749021, 0.00072502321563661098, 0.00044306446216069162, 0.00068072526482865214, 0.00016139500075951219, 5.8565125073073432e-05, 0.00026872241869568825, 0.00030554368277080357, 0.0002462718402966857, 0.00029318404267542064, 0.00010078005288960412, 0.00044178508687764406, 0.00019197138317395002, 0.00044418394099920988, 0.00047066638944670558, 0.00018894573440775275, 0.00024866292369551957, 0.00049178447807207704, 0.00013148432481102645, 0.00011706316581694409, 0.00012215468450449407, 0.00020929545280523598, 0.00017171353101730347, 0.00029900026856921613, 0.0021197209134697914, 0.00033577767317183316, 0.00015258441271726042, 0.00017782437498681247, 0.00016849496751092374, 0.00014938945241738111, 0.00038059140206314623, 0.00020764861255884171, 0.00045636037248186767, 7.9332319728564471e-05, 6.5544270910322666e-05, 0.00017212699458468705, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 8,-43,7,5,-21,-109,-42,44,-33,-3,-8,9,46,-10,-13,3,95,21,20,1,0,-33,-64,16,6,-18,-2,-28,-57,70,-15,-110,48,-5,-50,-54,-8,-34,8,-19,-11,48,10,2,-9,75,127,-20, -127,-88,-26,127,-70,75,-99,127,29,17,9,-2,52,15,-5,-43,-29,63,29,3,10,125,14,127,127,-34,-41,46,66,-127,-9,-70,64,-4,-32,-127,25,13,-54,-53,-125,1,-93,-127,38,63,50,127, -13,-4,9,7,-25,33,39,46,5,-39,-5,4,-22,-7,-5,5,-56,44,-69,-30,-4,-39,127,19,-46,0,9,3,19,34,8,4,-3,-16,-35,72,7,4,17,69,32,-18,28,-35,-7,41,-19,-12, 
  /* [0][1][][] */ -12,-24,-30,-5,30,-119,127,-94,-12,6,18,36,127,13,3,-33,-17,-27,28,43,64,-76,43,9,-50,127,-78,-22,127,-100,47,-127,-43,6,-75,21,10,-59,-42,-2,127,127,11,-122,-66,-53,0,98, 89,-127,127,-4,127,64,-73,-60,26,127,127,-127,-92,127,127,127,127,127,121,127,127,124,2,3,114,-106,-127,126,40,121,127,-1,-127,127,127,122,-127,127,-127,-127,47,36,-127,-38,127,-127,-12,95, 23,29,-42,-9,-47,127,-121,82,96,-81,13,62,-39,6,14,-62,20,15,-127,17,21,-127,-37,-5,71,-17,-25,127,-68,-41,27,-42,-29,16,93,-29,37,-7,-2,-91,118,0,34,46,-59,100,98,-81, 
  /* [0][2][][] */ -1,21,4,-34,1,-74,-19,-13,7,-4,-1,5,-14,-20,0,0,-42,15,10,-36,0,-27,83,-12,-91,2,37,-23,13,-5,3,34,-10,-8,-63,38,1,-11,15,41,-31,-8,11,11,-22,25,-8,18, 36,-20,-38,-39,28,28,115,-100,127,-35,-4,9,-70,-30,-22,-70,-13,102,7,25,9,32,-24,-32,-62,58,74,-14,-87,9,-30,-9,-24,-1,-31,1,55,-24,-1,109,-120,-7,-8,60,30,62,9,-126, -5,26,2,-23,-12,-11,-8,-52,-23,-26,-8,6,16,-20,-9,17,49,42,-26,-17,-5,-28,-47,-16,27,-27,21,-21,-11,-3,-10,13,28,-15,-23,-53,-7,6,28,11,-11,-17,11,14,-21,19,64,-49, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012277447618544102, 0.0076209870167076588, 0.031226338818669319, 0.010268233716487885, 0.0092815253883600235, 0.014057173393666744, 0.0088179903104901314, 0.013246234506368637, 0.0048373276367783546, 0.012721974402666092, 0.010034974664449692, 0.076967544853687286, 0.020858952775597572, 0.030813487246632576, 0.018830239772796631, 0.028930822387337685, 0.006859287153929472, 0.0024890177883207798, 0.011420702561736107, 0.012985606677830219, 0.010466553270816803, 0.012460322119295597, 0.0042831520549952984, 0.018775865435600281, 0.0081587834283709526, 0.018877817317843437, 0.020003320649266243, 0.0080301938578486443, 0.010568173602223396, 0.020900839939713478, 0.0055880839936435223, 0.0049751843325793743, 0.0051915738731622696, 0.0088950563222169876, 0.0072978250682353973, 0.012707510963082314, 0.090088136494159698, 0.014270550571382046, 0.0064848372712731361, 0.0075575360096991062, 0.0071610361337661743, 0.006349051371216774, 0.016175134107470512, 0.0088250655680894852, 0.019395316019654274, 0.0033716235775500536, 0.0027856314554810524, 0.0073153972625732422, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2288, 3526, 10540, 1663, 1681, -1237, 3682, 10870, 2758, -569, 2950, -1929, 13575, -1314, 1601, 13840, -327, 1812, 104, 2187, 2831, 3828, 355, 19341, 4618, 2927, 12889, 1463, 4159, 4788, 526, 894, 822, 1232, -211, 237, -2280, -439, 2202, 1761, 4174, 1738, 3651, 3685, 4110, 2476, 1657, 4785, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00026935353525914252, 0.00023241997405420989, 9.2589783889707178e-05, 0.00020507199224084616, 0.00028859855956397951, 0.00031743082217872143, 0.00021195074077695608, 8.773153240326792e-05, 0.00020312042033765465, 0.00030438942485488951, 0.00027713773306459188, 0.00025646810536272824, 7.1827067586127669e-05, 0.00030368543229997158, 0.00029402802465483546, 7.6526579505298287e-05, 0.00039457014645449817, 0.00024390169710386544, 0.0003568040847312659, 0.00028661132091656327, 0.00025244493735954165, 0.00020208435307722539, 0.0004701028810814023, 5.566422623815015e-05, 0.00017802268848754466, 0.0002026760921580717, 7.825079228496179e-05, 0.00030454251100309193, 0.00018619553884491324, 0.00016062842041719705, 0.00053822016343474388, 0.0004704842867795378, 0.00025931064737960696, 0.00029147614259272814, 0.0003333609492983669, 0.00038515264168381691, 0.00025796025875024498, 0.00035051742452196777, 0.00026527981390245259, 0.00030042862636037171, 0.00018561804608907551, 0.0002857571525964886, 0.00022201599495019764, 0.00021966113126836717, 0.00018372856720816344, 0.00027759262593463063, 0.00040102694765664637, 0.00017058425873983651, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 67,127,-85,-87,8,96,18,72, 
  /* [1][0][][] */ 57,-77,45,-127,-55,71,-86,-38, 
  /* [2][0][][] */ -32,127,120,51,109,6,56,7, 
  /* [3][0][][] */ 101,49,-80,65,5,-104,-127,-24, 
  /* [4][0][][] */ -41,26,10,-63,-35,100,127,40, 
  /* [5][0][][] */ 19,83,-127,-77,53,94,38,-26, 
  /* [6][0][][] */ -7,127,56,55,73,9,15,-92, 
  /* [7][0][][] */ 127,-20,-27,29,22,7,101,16, 
  /* [8][0][][] */ 56,127,61,92,114,74,90,-85, 
  /* [9][0][][] */ 57,113,-127,-91,9,100,5,72, 
  /* [10][0][][] */ -67,-44,26,-52,-6,-32,-51,127, 
  /* [11][0][][] */ 16,-113,-127,-18,24,-13,40,-8, 
  /* [12][0][][] */ -25,-104,-127,-30,-122,29,-72,46, 
  /* [13][0][][] */ -9,12,-100,103,-127,-26,3,-16, 
  /* [14][0][][] */ -64,-45,-127,-8,38,-4,-14,-61, 
  /* [15][0][][] */ 17,-102,-127,11,-103,-30,-27,-9, 
  /* [16][0][][] */ 127,-69,-17,65,-83,27,35,104, 
  /* [17][0][][] */ -26,108,127,-26,-42,-9,-26,-19, 
  /* [18][0][][] */ 5,-127,49,72,-1,-64,54,-86, 
  /* [19][0][][] */ 127,-45,-59,35,-97,8,40,98, 
  /* [20][0][][] */ -32,-127,88,80,-14,-89,2,-74, 
  /* [21][0][][] */ -5,-55,-14,-33,127,-2,51,21, 
  /* [22][0][][] */ -127,23,-74,45,50,53,-86,-100, 
  /* [23][0][][] */ -87,-48,63,-3,-107,127,109,-46, 
  /* [24][0][][] */ -40,59,7,-36,-44,127,126,-2, 
  /* [25][0][][] */ -54,-114,-127,-54,-54,-14,-21,-42, 
  /* [26][0][][] */ -15,63,-19,127,-102,37,-54,-3, 
  /* [27][0][][] */ 17,-127,37,82,18,-55,10,-125, 
  /* [28][0][][] */ 18,127,61,47,117,-22,26,-64, 
  /* [29][0][][] */ 110,25,-42,-11,91,-127,-106,36, 
  /* [30][0][][] */ 25,-10,29,-127,20,-26,14,-24, 
  /* [31][0][][] */ 42,-39,5,61,-10,31,14,127, 
  /* [32][0][][] */ -87,-69,7,-59,-70,127,66,86, 
  /* [33][0][][] */ -30,51,46,-40,45,127,-119,72, 
  /* [34][0][][] */ 40,127,-81,-48,22,50,-67,64, 
  /* [35][0][][] */ 8,-127,37,59,-21,-55,44,-71, 
  /* [36][0][][] */ -18,-33,-79,-8,-127,-56,-14,12, 
  /* [37][0][][] */ -54,-127,79,90,-47,-97,-14,-49, 
  /* [38][0][][] */ -69,20,60,-71,-127,-86,-60,81, 
  /* [39][0][][] */ 69,-127,77,44,-8,-75,-16,-83, 
  /* [40][0][][] */ 4,56,18,45,-127,-15,-64,15, 
  /* [41][0][][] */ 104,127,-70,-102,64,19,0,15, 
  /* [42][0][][] */ -9,-38,-17,14,127,11,43,19, 
  /* [43][0][][] */ 127,27,79,23,-72,-25,60,105, 
  /* [44][0][][] */ 66,46,-22,16,69,-116,-127,25, 
  /* [45][0][][] */ 49,20,24,24,82,-127,-4,-52, 
  /* [46][0][][] */ 56,-36,-6,127,40,59,23,74, 
  /* [47][0][][] */ -79,-82,44,66,-45,14,127,-79, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0031741838902235031, 0.0027389421593397856, 0.0010911199497058988, 0.0024166612420231104, 0.0034009760711342096, 0.0037407486233860254, 0.0024977235589176416, 0.0010338680585846305, 0.0023936629295349121, 0.0035870627034455538, 0.0032659166026860476, 0.0030223361682146788, 0.00084644265007227659, 0.0035787667147815228, 0.0034649593289941549, 0.00090182386338710785, 0.0046497932635247707, 0.0028742479626089334, 0.0042047407478094101, 0.0033775574993342161, 0.0029749255627393723, 0.0023814535234123468, 0.0055399052798748016, 0.00065597245702520013, 0.0020979000255465508, 0.0023884268011897802, 0.0009221427608281374, 0.0035888669081032276, 0.0021942125167697668, 0.0018929180223494768, 0.0063426299020648003, 0.0055443998426198959, 0.0030558339785784483, 0.0034348869230598211, 0.0039284764789044857, 0.0045388131402432919, 0.0030399204697459936, 0.004130655899643898, 0.0031261774711310863, 0.0035403869114816189, 0.0021874071098864079, 0.0033674915321171284, 0.0026163370348513126, 0.0025885861832648516, 0.0021651405841112137, 0.0032712772954255342, 0.0047258832491934299, 0.0020102420821785927, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 7588, 16147, -4560, 7173, -1143, 3649, -11587, -18378, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00025629886658862233, 0.00011977152462350205, 0.00014445805572904646, 0.00013606958964373916, 0.00018713991448748857, 0.00016488833352923393, 0.00022593884204979986, 0.00014518022362608463, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -42,-3,34,9,-33,-12,9,7,-42,-4,-63,-57,-25,-61,-10,-31,47,-40,40,42,-17,34,-39,13,2,-36,54,-14,-5,-20,17,9,82,38,39,-127,17,-2,-16,-33,6,-16,43,48,37,6,28,3, 
  /* [1][0][][] */ -1,36,64,-30,-13,46,-52,-31,4,26,-18,-89,9,87,-18,56,-23,21,-26,-55,10,-76,-24,23,-71,-13,-3,-112,-26,-19,30,-53,46,76,-43,1,127,-34,-1,51,-31,36,-81,-32,112,-18,-36,-26, 
  /* [2][0][][] */ -4,-26,-62,13,-4,46,24,2,-8,44,-3,29,64,-92,18,-62,34,-89,22,30,-23,53,-4,27,-17,57,-23,-70,16,3,20,-71,-45,-87,35,-31,108,20,-13,-57,-2,29,81,27,127,16,17,24, 
  /* [3][0][][] */ -2,25,-69,43,16,-40,-69,-106,14,-23,-39,1,5,27,33,81,-9,15,-38,27,3,-104,27,-59,-78,-8,127,-14,-41,4,-65,16,-1,-82,12,-11,-19,-43,-23,102,-50,-34,-3,22,41,4,-39,45, 
  /* [4][0][][] */ -28,-49,-7,6,30,-29,-13,-7,29,-29,58,-76,5,30,10,11,-17,-24,10,-15,-4,-50,5,-20,18,-9,41,50,33,19,-15,26,-11,-3,2,-3,-68,83,33,-24,30,-22,-18,-26,-77,12,127,8, 
  /* [5][0][][] */ 48,-22,1,14,28,-45,37,-127,29,-30,-10,117,-79,66,23,-64,-5,-93,15,4,-42,62,-40,-48,-64,78,-26,2,-17,51,-40,-35,25,51,35,-1,-41,-8,-48,-44,13,-38,-46,-5,-35,55,90,20, 
  /* [6][0][][] */ 54,-24,20,-12,-35,-20,-35,19,-39,7,-38,127,-44,-37,-3,62,9,44,13,32,36,-88,-24,20,21,40,-64,4,13,-41,16,36,4,15,-15,-1,15,1,-5,-9,-11,-14,43,60,-2,-37,75,-15, 
  /* [7][0][][] */ -27,7,-5,66,32,31,8,31,20,3,70,-3,120,108,59,48,43,48,-14,4,23,-20,-85,-28,17,-5,-32,65,31,-29,-34,-16,38,7,44,-96,-76,38,43,56,-32,33,81,127,-61,-28,-108,62, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.010892701335251331, 0.0050902897492051125, 0.0061394674703478813, 0.0057829571887850761, 0.0079534463584423065, 0.0070077539421617985, 0.0096024004742503166, 0.0061701592057943344, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 13318, 5644, 4169, -1859, 2038, -1149, -729, 31779, -174, 3121, 5511, 54801, 1808, 5032, 413, 10524, -1981, 13491, 430, 7281, 10583, 150, 2811, -9279, 10270, 1864, 2027, 12336, -1203, -1498, -10428, 9421, 3157, 1117, -825, 7145, -8343, 9367, 361, 16273, -1341, -1015, 6124, 2063, 1028, -622, 1681, -1299, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 8.988426998257637e-05, 8.7993459601420909e-05, 0.00016412754484917969, 0.00016631522157695144, 0.00082435231888666749, 0.00016375750419683754, 0.00018894902314059436, 0.00010310905054211617, 0.00013773054524790496, 8.9433357061352581e-05, 7.8109529567882419e-05, 5.3875308367423713e-05, 8.7513741164002568e-05, 6.3125065935309976e-05, 0.00028239976381883025, 0.00024161083274520934, 0.00011034395720344037, 0.00039569503860548139, 0.00011740106128854677, 0.0001522516249679029, 8.6671978351660073e-05, 0.00048966135364025831, 0.00011989230551989749, 0.00026664522010833025, 0.00013450811093207449, 7.0611989940516651e-05, 6.0623464378295466e-05, 9.7058313258457929e-05, 0.00016071635764092207, 0.0008200661395676434, 0.00025767111219465733, 7.9960227594710886e-05, 8.6335479863919318e-05, 0.00014083075802773237, 0.00016776830307208002, 5.3189727623248473e-05, 0.00010136352648260072, 4.9836682592285797e-05, 8.6158528574742377e-05, 7.3875598900485784e-05, 0.00011530141637194902, 0.00014942199049983174, 6.7965127527713776e-05, 7.492803706554696e-05, 7.9982499300967902e-05, 0.00032016058685258031, 7.2377515607513487e-05, 0.00019885032088495791, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -40,-102,-12,-11,127,-53,70,-51,-92,-82,-21,-43,107,38,61,-127,60,-21,3,-41,-67,127,-1,21,-19,69,56,-35,82,-67,21,-41,-106,-84,47,69,20,76,111,-58,-126,-17,34,78,49,-127,88,94, -49,-127,-77,55,-88,109,60,-59,-74,35,72,-97,127,93,102,-82,-81,-79,36,-52,-68,105,-58,110,-88,90,87,-123,100,-47,9,-123,-48,-83,78,123,111,112,127,-55,-127,-60,67,94,83,111,91,84, 7,-61,-67,96,-51,-30,24,-6,87,20,50,-57,20,55,-41,-12,-81,-16,34,-31,-22,26,-69,-6,-75,39,20,-86,40,56,121,-72,14,12,-7,45,73,67,42,4,-21,94,63,35,37,31,17,-117, 
  /* [0][1][][] */ -121,-96,-14,-63,-86,-73,98,-114,-127,-127,88,-78,87,46,-124,-69,127,-127,-62,-75,-91,126,-43,16,-16,98,99,-52,-105,-76,7,-50,-93,-127,-127,69,39,87,-1,-93,63,-19,75,115,82,109,121,-125, -127,-124,-127,-91,-33,127,127,-127,94,55,127,-127,105,127,54,-108,61,-97,-127,-127,-127,125,-127,127,-127,127,127,-127,-127,127,-12,-127,-127,-107,50,127,127,127,-22,-127,103,-94,127,127,127,-3,127,127, -58,-63,-121,127,69,-45,45,-29,66,24,20,-47,10,63,62,-46,-13,1,-13,-70,-63,18,-77,-22,-120,53,29,-90,-47,40,127,-85,-59,11,64,74,80,73,-35,-38,47,127,78,21,53,-48,24,34, 
  /* [0][2][][] */ -101,-30,21,28,-48,-28,15,-43,31,-47,20,-38,-1,17,-50,-16,-80,-24,97,-37,-18,45,-61,-8,-2,51,65,-16,39,57,-1,-3,3,-82,-41,43,13,7,-68,-33,20,-8,32,41,29,52,18,-60, -87,-44,-34,-58,87,44,47,-58,97,18,-35,-58,-4,39,-127,-76,39,6,51,-75,-45,34,-58,56,-62,55,69,-39,41,5,-27,-32,-65,-20,-63,60,30,16,-116,-57,24,-43,77,69,43,-109,26,11, -27,-28,-49,-12,-27,-13,7,-27,-72,12,-11,-8,-11,10,25,-25,36,38,0,-55,-39,1,-15,-33,-56,8,19,-26,13,-61,53,-21,-82,22,21,46,21,16,-63,-21,0,49,23,23,18,-4,8,49, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0038200814742594957, 0.0037397218402475119, 0.0069754202850162983, 0.0070683970116078854, 0.035034973174333572, 0.006959693506360054, 0.0080303335562348366, 0.0043821344152092934, 0.0058535481803119183, 0.003800917649641633, 0.0033196550793945789, 0.0022897005546838045, 0.0037193340249359608, 0.0026828153058886528, 0.012001989409327507, 0.010268460027873516, 0.0046896180137991905, 0.016817038878798485, 0.0049895448610186577, 0.0064706937409937382, 0.0036835588980466127, 0.020810605958104134, 0.0050954227335751057, 0.011332421563565731, 0.0057165948674082756, 0.0030010095797479153, 0.0025764971505850554, 0.0041249780915677547, 0.0068304450251162052, 0.034852810204029083, 0.010951021686196327, 0.0033983096946030855, 0.0036692577414214611, 0.0059853070415556431, 0.0071301525458693504, 0.0022605634294450283, 0.0043079499155282974, 0.0021180589683353901, 0.0036617373116314411, 0.0031397128477692604, 0.0049003101885318756, 0.006350434385240078, 0.0028885179199278355, 0.003184441477060318, 0.0033992561511695385, 0.013606824912130833, 0.0030760443769395351, 0.0084511386230587959, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 946, -369, -378, 790, 11210, 1685, -388, 4001, 1198, 1018, 234, 2440, 907, 439, -736, 361, 2495, 9366, 2650, -603, 844, -1037, -84, 1913, -213, -515, 1220, -27, 2147, 11841, 1864, -33, 336, -119, 2007, -48, 403, -187, 888, 951, 1417, 1718, 122, -199, 522, 1939, 1011, -162, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00055911968229338527, 0.00046954446588642895, 0.00034140079515054822, 0.00045818992657586932, 8.7982756667770445e-05, 0.00038417917676270008, 0.00062445452203974128, 0.00023020748631097376, 0.00036668882239609957, 0.00067338492954149842, 0.00037810913636349142, 0.00035390388802625239, 0.00027935823891311884, 0.00045256671728566289, 0.00037755112862214446, 0.00040081437327899039, 0.00029632821679115295, 0.00010222120909020305, 0.0002866431896109134, 0.00041902693919837475, 0.00052356038941070437, 0.00023748206149321049, 0.00061346043366938829, 0.00039604207267984748, 0.00054688792442902923, 0.00095454318216070533, 0.00042126030893996358, 0.00099446368403732777, 0.00035992520861327648, 8.2777318311855197e-05, 0.00040107182576321065, 0.00090350222308188677, 0.00047385747893713415, 0.00046578969340771437, 0.00035982724511995912, 0.00041249810601584613, 0.0004742009041365236, 0.00076802208786830306, 0.00051622092723846436, 0.00060613342793658376, 0.00039646375807933509, 0.00038111722096800804, 0.0004253084771335125, 0.00063687498914077878, 0.00051486166194081306, 0.00026723160408437252, 0.00035262308665551245, 0.0004511776496656239, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -35,24,4,-21,-85,-41,-127,25, 
  /* [1][0][][] */ 80,-78,-54,-57,127,-92,95,22, 
  /* [2][0][][] */ -101,123,-50,-127,55,-20,-32,45, 
  /* [3][0][][] */ 52,18,91,11,98,127,121,-6, 
  /* [4][0][][] */ -75,-127,68,9,-54,-117,1,-35, 
  /* [5][0][][] */ 127,-23,68,65,-76,-10,4,-26, 
  /* [6][0][][] */ 23,32,127,-27,40,-35,-43,29, 
  /* [7][0][][] */ 30,11,-127,-33,-36,104,103,-72, 
  /* [8][0][][] */ 0,127,-32,10,65,108,47,54, 
  /* [9][0][][] */ -3,127,-57,93,14,-114,47,118, 
  /* [10][0][][] */ 5,-125,-4,-33,-81,-127,-63,-86, 
  /* [11][0][][] */ -127,-83,110,53,-16,-70,98,56, 
  /* [12][0][][] */ -30,47,-127,82,29,-51,-77,97, 
  /* [13][0][][] */ 94,-127,94,82,12,37,37,-57, 
  /* [14][0][][] */ -25,92,-38,-127,-23,-106,-26,-57, 
  /* [15][0][][] */ 41,106,28,-18,34,-66,94,-127, 
  /* [16][0][][] */ -110,-127,-53,91,-56,26,-20,76, 
  /* [17][0][][] */ -25,-113,-127,84,-60,70,-50,70, 
  /* [18][0][][] */ -98,-76,-50,94,-10,74,-5,127, 
  /* [19][0][][] */ 59,-118,96,-127,11,-66,26,-33, 
  /* [20][0][][] */ -7,72,32,14,43,127,75,-8, 
  /* [21][0][][] */ 29,114,44,-35,43,-70,95,-127, 
  /* [22][0][][] */ 23,11,100,19,-7,127,30,-34, 
  /* [23][0][][] */ -99,-68,31,-74,82,90,-59,-127, 
  /* [24][0][][] */ -98,-93,42,-88,119,117,-43,-127, 
  /* [25][0][][] */ 127,10,-62,-16,19,33,-61,-6, 
  /* [26][0][][] */ -126,-34,-127,-21,-50,-27,21,0, 
  /* [27][0][][] */ 79,35,-3,-60,-127,-26,87,90, 
  /* [28][0][][] */ -127,-79,6,49,-77,-94,5,2, 
  /* [29][0][][] */ 121,103,41,-127,30,15,-61,-94, 
  /* [30][0][][] */ -86,-63,37,-72,66,78,-50,-127, 
  /* [31][0][][] */ 50,44,-5,127,4,-74,7,8, 
  /* [32][0][][] */ -25,127,-11,36,22,71,-22,51, 
  /* [33][0][][] */ -36,127,-79,24,22,-35,-28,-1, 
  /* [34][0][][] */ -127,-109,-47,105,-14,19,18,106, 
  /* [35][0][][] */ -51,127,-30,-6,70,106,55,70, 
  /* [36][0][][] */ 71,34,1,-49,-127,-35,112,106, 
  /* [37][0][][] */ -63,106,25,20,-127,101,-27,-99, 
  /* [38][0][][] */ 39,35,33,21,127,70,108,49, 
  /* [39][0][][] */ -27,-73,33,-22,9,36,-100,127, 
  /* [40][0][][] */ -75,-61,-76,127,-30,-2,6,74, 
  /* [41][0][][] */ 127,16,59,106,-54,-14,-4,-24, 
  /* [42][0][][] */ -42,7,-74,-127,53,-107,4,84, 
  /* [43][0][][] */ 22,-4,85,-7,37,127,91,8, 
  /* [44][0][][] */ -27,-26,-68,127,47,10,-36,-42, 
  /* [45][0][][] */ 78,127,113,-120,57,-64,21,-122, 
  /* [46][0][][] */ -33,-127,-44,28,-4,36,-63,118, 
  /* [47][0][][] */ 38,45,122,2,95,127,120,-16, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0046872221864759922, 0.0039362935349345207, 0.0028620371595025063, 0.0038411058485507965, 0.0007375786080956459, 0.0032206575851887465, 0.0052349381148815155, 0.0019298794213682413, 0.0030740322545170784, 0.0056451321579515934, 0.003169771283864975, 0.0029668533243238926, 0.0023419209755957127, 0.0037939653266221285, 0.0031650932505726814, 0.0033601140603423119, 0.0024841839913278818, 0.00085694261360913515, 0.002402992220595479, 0.0035127939190715551, 0.0043891207315027714, 0.0019908638205379248, 0.0051427721045911312, 0.0033201067708432674, 0.0045846803113818169, 0.0080021433532238007, 0.0035315167624503374, 0.0083368057385087013, 0.0030173312406986952, 0.00069394026650115848, 0.0033622724004089832, 0.0075742555782198906, 0.0039724502712488174, 0.0039048164617270231, 0.003016510047018528, 0.0034580614883452654, 0.0039753294549882412, 0.0064384960569441319, 0.0043275924399495125, 0.0050813485868275166, 0.0033236418385058641, 0.0031949884723871946, 0.0035654534585773945, 0.0053390618413686752, 0.0043161972425878048, 0.0022402605973184109, 0.0029561161063611507, 0.0037823203019797802, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -6714, -2686, 11708, -10140, 22658, 8503, -8760, 11277, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.00019738091214094311, 0.00024890221538953483, 0.00020224037871230394, 0.00026193950907327235, 0.00023177207913249731, 0.00016481195052620023, 0.00017350012785755098, 0.00027281738584861159, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -15,-14,-21,-71,-27,-35,20,-22,36,9,-31,-5,108,127,-22,-102, 
  /* [1][0][][] */ 127,-60,-41,15,-46,74,-67,-45,-41,86,-34,-51,-9,4,-64,-20, 
  /* [2][0][][] */ -37,-97,43,45,47,-56,-75,-18,30,-91,24,-127,45,-23,-75,22, 
  /* [3][0][][] */ 39,11,14,18,-11,67,-52,-19,127,43,10,21,5,-14,10,21, 
  /* [4][0][][] */ -95,-34,-26,-127,-9,36,52,-116,30,-20,-41,-33,-115,30,-39,-20, 
  /* [5][0][][] */ 84,50,66,-30,43,-47,-127,-125,-19,-75,68,47,-58,48,61,-38, 
  /* [6][0][][] */ 110,37,-127,-80,26,-71,3,-95,-42,22,-121,94,90,-89,5,75, 
  /* [7][0][][] */ -127,-3,100,-25,-62,4,-4,-58,-51,62,85,-33,61,-26,31,30, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.008388688787817955, 0.010578343644738197, 0.0085952160879969597, 0.011132429353892803, 0.0098503129556775093, 0.0070045078173279762, 0.00737375533208251, 0.011594738811254501, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 16273, -571, 557, 3232, -791, 343, 11175, 1688, -1410, 204, -2106, 2500, -34, -716, -212, -895, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.0001470021961722523, 0.00022130024444777519, 0.00014062765694689006, 0.00015445872850250453, 0.0012986455112695694, 0.0010218827519565821, 0.0001369168603559956, 0.00061465497128665447, 0.00039944282616488636, 0.0011240317253395915, 0.00024412741186097264, 0.00021819268295075744, 0.0001077990309568122, 0.00020368993864394724, 0.00022181974782142788, 0.00068081414792686701, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 1,-3,2,2,-19,10,7,16,-6,-11,0,-8,-1,-6,0,-2, 6,-6,-1,1,13,-2,12,-25,-7,9,-4,89,-9,21,3,-2, 1,-5,-6,0,2,-14,-3,11,1,2,-4,-9,1,-4,-4,-2, 
  /* [0][1][][] */ 11,-9,0,4,127,-24,-127,-20,127,127,-2,-5,112,-23,-2,-20, -127,127,127,1,-88,-92,-14,-100,19,-105,127,127,127,127,127,127, 17,-3,-7,1,-11,127,4,-9,-2,-12,-6,-6,8,-3,-11,-10, 
  /* [0][2][][] */ -2,-3,-4,-17,-18,15,57,7,-9,-8,-3,-1,-5,1,-8,-13, 19,-15,-8,-127,7,-16,-7,127,-4,1,0,-16,-10,-57,-11,-38, -1,-4,-7,-6,1,-5,2,-2,0,2,-5,-2,-1,-5,-10,-13, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0062475930899381638, 0.0094052599743008614, 0.0059766750782728195, 0.0065644960850477219, 0.055192433297634125, 0.043430015444755554, 0.0058189663104712963, 0.026122836396098137, 0.016976319253444672, 0.047771349549293518, 0.010375414974987507, 0.0092731891199946404, 0.0045814588665962219, 0.008656822144985199, 0.0094273388385772705, 0.028934599831700325, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 816, 326, 109, 1673, 54213, 48732, 5828, 3946, 5839, 3646, 1499, 206, 4250, -8631, -116, 34772, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.00016884642536751926, 0.001245992025360465, 0.00018906316836364567, 0.00012885760224889964, 2.7878828404936939e-05, 3.3104533940786496e-05, 0.0001119176231441088, 3.0572191462852061e-05, 0.00015312548202928156, 4.3544237996684387e-05, 0.00038549269083887339, 0.0010519353672862053, 0.000413607427617535, 1.9618077203631401e-05, 0.00089165230747312307, 4.209906910546124e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -83, -107, -29, 
  /* [0][1][][] */ 67, -35, 17, 
  /* [0][2][][] */ 33, 127, 20, 
  /* [1][0][][] */ 105, -95, -11, 
  /* [1][1][][] */ -127, 103, 23, 
  /* [1][2][][] */ 14, -2, -13, 
  /* [2][0][][] */ -24, -3, -48, 
  /* [2][1][][] */ 36, 95, 127, 
  /* [2][2][][] */ -12, -94, -79, 
  /* [3][0][][] */ 118, 124, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -102, -127, -44, 
  /* [4][0][][] */ 22, -55, 2, 
  /* [4][1][][] */ 19, -127, 1, 
  /* [4][2][][] */ 14, -77, -9, 
  /* [5][0][][] */ -64, 25, -6, 
  /* [5][1][][] */ -127, 32, -1, 
  /* [5][2][][] */ -85, 24, -5, 
  /* [6][0][][] */ -17, 79, 127, 
  /* [6][1][][] */ -51, 56, -16, 
  /* [6][2][][] */ -36, -52, -89, 
  /* [7][0][][] */ 38, 27, -14, 
  /* [7][1][][] */ 127, 70, -3, 
  /* [7][2][][] */ 37, 9, -19, 
  /* [8][0][][] */ -21, -31, 52, 
  /* [8][1][][] */ -54, -87, 127, 
  /* [8][2][][] */ -26, -61, 96, 
  /* [9][0][][] */ -20, 53, -9, 
  /* [9][1][][] */ -15, 127, -13, 
  /* [9][2][][] */ -8, 85, -9, 
  /* [10][0][][] */ 24, 87, 12, 
  /* [10][1][][] */ -37, -127, -30, 
  /* [10][2][][] */ 12, 40, 18, 
  /* [11][0][][] */ 7, -19, 9, 
  /* [11][1][][] */ 64, -94, 35, 
  /* [11][2][][] */ -85, 127, -47, 
  /* [12][0][][] */ -41, 49, -10, 
  /* [12][1][][] */ -127, 114, 6, 
  /* [12][2][][] */ -78, 79, 5, 
  /* [13][0][][] */ 68, 7, -19, 
  /* [13][1][][] */ 126, 101, -5, 
  /* [13][2][][] */ 92, 127, 52, 
  /* [14][0][][] */ -30, -28, 48, 
  /* [14][1][][] */ 44, 99, -127, 
  /* [14][2][][] */ -16, -70, 81, 
  /* [15][0][][] */ -86, -26, 21, 
  /* [15][1][][] */ -127, -127, 14, 
  /* [15][2][][] */ -21, -75, -10, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.043055836111307144, 0.3177279531955719, 0.048211105167865753, 0.03285868838429451, 0.0071091009303927422, 0.0084416558966040611, 0.028538992628455162, 0.0077959084883332253, 0.039046995341777802, 0.011103780008852482, 0.098300628364086151, 0.26824349164962769, 0.10546988993883133, 0.0050026094540953636, 0.22737132012844086, 0.010735262185335159, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.1192859411239624, } };
const TfArray<1, int> quant46_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.084857568144798279, } };
const TfArray<1, int> quant50_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.081600181758403778, } };
const TfArray<1, int> quant53_zero = { 1, { -7 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.08708132803440094, } };
const TfArray<1, int> quant54_zero = { 1, { -16 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.060150325298309326, } };
const TfArray<1, int> quant58_zero = { 1, { -20 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.055521409958600998, } };
const TfArray<1, int> quant61_zero = { 1, { -17 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.077201634645462036, } };
const TfArray<1, int> quant62_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.048296160995960236, } };
const TfArray<1, int> quant65_zero = { 1, { 24 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.10798665136098862, } };
const TfArray<1, int> quant66_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.029950227588415146, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.073975853621959686, } };
const TfArray<1, int> quant69_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}

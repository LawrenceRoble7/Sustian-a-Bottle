/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 17.03.2024 11:13:07

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 242576;
#else
constexpr int kTensorArenaSize = 241552;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_PAD, OP_ADD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,96,96,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[2] = { 20532, -21493, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const TfArray<2, float> quant2_scale = { 2, { 0.00027041055727750063, 0.0002324431698070839, } };
const TfArray<2, int> quant2_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[2*1*1*32] = { 
  /* [0][0][][] */ -27,-19,-56,61,50,24,-56,73,82,-42,5,-36,-55,80,30,15,127,-42,-39,-77,109,91,84,-68,-43,-49,12,43,4,-23,91,32, 
  /* [1][0][][] */ 34,53,54,-41,-127,56,9,2,-19,2,15,76,85,24,33,11,-29,12,-39,-64,-56,13,15,77,54,49,-33,6,76,-79,-75,-2, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant3_scale = { 2, { 0.0049914089031517506, 0.004290582612156868, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -121, -352, -356, -1091, 1849, -90, -1515, 1080, -1204, -1286, -561, -673, -419, 559, -89, -1322, 529, -1718, -1200, -1143, -524, -556, -565, -440, -935, -656, -709, -1255, -975, -576, 2145, -1276, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.9770442021545023e-05, 4.9097259761765599e-05, 6.6293396230321378e-05, 5.3737443522550166e-05, 0.00010019121691584587, 6.1232232837937772e-05, 5.1612387323984876e-05, 4.6038807340664789e-05, 5.1060815167147666e-05, 5.0319998990744352e-05, 4.9776353989727795e-05, 5.6074110034387559e-05, 4.8450016038259491e-05, 5.0438979087630287e-05, 6.0312515415716916e-05, 4.9778329412220046e-05, 9.582417260389775e-05, 6.127266533439979e-05, 4.977528442395851e-05, 5.1107443141518161e-05, 8.0124969827011228e-05, 4.9102938646683469e-05, 5.5952612456167117e-05, 4.8306203098036349e-05, 5.3549272706732154e-05, 5.3932591981720179e-05, 5.1056242227787152e-05, 5.163806417840533e-05, 5.843912367708981e-05, 6.5100590290967375e-05, 9.6226547611877322e-05, 5.1259634346934035e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*96] = { 
  /* [0][0][][] */ -36,-31,85,8,69,-1,-68,-59,7,-68,-79,-6,40,-3,-19,45,-36,-41,-41,-43,-59,-84,-10,82,-127,4,63,-17,87,11,-13,-73,54,-52,-57,43,-67,-60,-55,28,14,-76,-56,79,38,-90,65,-32,6,-42,-19,99,-45,-66,-69,76,-8,54,57,-77,-43,62,-60,36,-6,19,58,58,44,71,37,-79,67,-63,31,44,-72,13,-47,17,46,12,70,-18,-44,-95,-80,54,12,63,-17,-70,8,47,18,6, 
  /* [1][0][][] */ -63,32,-43,2,-25,64,20,28,22,-83,-88,101,64,-37,37,58,94,-69,24,100,-55,-9,14,43,-50,8,-18,107,22,19,89,-82,50,76,6,25,62,44,2,-32,-108,-24,-3,-71,-32,1,-31,-79,-39,-83,104,71,23,26,-79,-34,-20,99,36,78,-41,111,-112,-65,-45,37,79,21,98,35,-18,14,-98,94,-40,19,70,-34,-34,56,-56,71,-41,-127,19,5,-78,-60,61,57,61,41,76,77,24,-26, 
  /* [2][0][][] */ 19,27,-25,61,-9,-42,42,75,-92,56,-24,84,63,-19,66,-71,-36,-48,13,32,-70,-7,57,29,-62,42,81,19,-33,63,51,37,-46,-26,-49,-67,-42,54,78,5,-122,-70,19,3,-58,52,-17,-68,46,12,61,-35,-21,8,2,19,-73,70,-52,5,-3,47,-59,44,61,36,40,42,-53,52,-17,-46,20,-38,21,0,-35,-11,5,3,33,-60,-7,-47,-4,-127,-28,-21,52,64,-29,18,-26,-51,-31,-61, 
  /* [3][0][][] */ 35,-23,6,-41,-79,17,-106,7,18,56,28,-21,50,53,34,-19,62,127,-67,-11,67,-92,-74,-114,-38,-110,-87,60,12,-101,45,-16,-68,-51,-36,-35,-96,-42,9,14,-20,-22,-100,-23,35,0,-60,-88,99,-88,10,-24,51,0,47,-101,-115,-116,-116,-70,-100,5,-50,35,21,-50,-72,-48,-49,-79,-19,56,-7,-38,20,-62,2,125,52,-73,-94,-117,6,50,0,85,-57,-116,-89,11,-23,-109,50,-99,-95,26, 
  /* [4][0][][] */ 15,54,-8,24,-31,-1,36,18,64,44,-3,-16,-2,6,-35,-10,-22,26,-22,17,118,-30,73,-24,73,22,-14,2,-21,5,-54,-17,55,64,15,-41,39,69,-21,-31,30,92,-39,-27,23,61,16,126,15,-5,15,28,-49,62,-38,-5,98,-66,52,-5,23,-50,88,-25,-38,42,-28,15,2,-62,-4,-19,-17,39,76,127,45,19,38,28,16,-32,-43,56,10,124,81,42,33,57,59,-5,-18,80,-17,85, 
  /* [5][0][][] */ 52,-59,68,62,35,-81,12,55,38,-77,3,-43,20,58,35,27,42,15,-55,68,13,25,2,-5,-127,-48,-1,-50,44,32,15,-88,-26,-9,-37,13,-64,-29,44,26,-103,-55,45,76,-24,-6,15,-58,-87,67,24,40,39,-23,15,-11,43,43,-46,-20,30,-40,-15,-44,-17,74,-9,9,57,8,48,-41,-35,67,-17,-64,7,-29,10,54,85,26,26,60,-58,-15,-15,25,44,-76,69,76,-10,16,55,-71, 
  /* [6][0][][] */ -13,-61,61,28,-103,-23,-37,22,-35,-102,-24,-104,38,17,61,-122,5,-25,-33,48,-94,-123,57,14,-73,-101,-40,-73,-56,-122,5,-89,-109,-127,-70,-117,-41,-1,-118,34,51,12,-12,-41,-126,63,-101,-65,-54,-18,-56,-41,15,-35,43,-56,-17,-39,-84,68,-107,-33,31,-93,-76,26,49,-67,32,-39,-116,-37,16,-91,-102,-64,-89,-116,-74,-49,-5,-58,4,-51,-82,-99,-60,-104,38,51,49,-18,-74,-77,26,-55, 
  /* [7][0][][] */ 84,86,-27,-37,-69,123,-8,15,100,5,-75,-35,33,-73,22,92,37,22,13,102,66,-23,27,52,-11,112,10,79,-70,102,-18,41,27,35,60,81,-67,99,-4,-82,87,-53,107,86,68,5,43,-88,62,-33,-88,-52,-14,85,27,-2,127,-90,24,-28,31,-32,87,-91,-68,-46,56,31,-106,-3,62,108,57,53,79,75,-39,52,-72,56,101,-59,7,-22,93,66,-81,97,104,21,93,55,-70,-35,32,-37, 
  /* [8][0][][] */ -3,5,-69,-106,17,4,-86,-54,9,9,10,46,-25,-42,-104,-85,-75,84,-62,-18,-5,-42,48,58,-61,56,4,37,-88,-14,-104,84,49,-45,9,-33,62,-29,-48,25,108,72,-125,-125,-35,-35,-36,69,50,-84,-86,-22,-85,-27,-56,-115,48,58,-101,65,62,4,37,58,-59,-63,-54,60,-99,9,26,-35,37,25,-21,-9,-60,59,42,38,-3,47,-127,-97,7,77,47,-65,1,-56,-90,52,-99,-109,-73,27, 
  /* [9][0][][] */ -20,-20,67,10,35,-110,-74,-127,56,7,-35,13,-49,-86,-116,-48,-2,-22,-106,-88,-23,65,-112,-117,73,-39,-41,-3,-39,-81,-106,64,20,-24,-4,-48,-92,-16,-56,-66,70,-83,22,-106,38,12,-103,24,61,-41,-101,-68,32,-87,-94,61,40,-79,-36,-22,-102,56,46,-96,-104,-22,56,13,-62,65,84,-107,-19,38,-115,-109,-87,-116,-58,68,-1,-7,59,2,-52,-27,12,-37,58,2,-47,62,60,-31,19,-63, 
  /* [10][0][][] */ -66,54,88,-61,-20,77,65,39,-21,30,1,-56,77,49,-26,2,-40,22,-81,-59,-29,20,28,-58,-40,39,-97,-96,-42,71,-87,-97,71,69,106,46,-22,-2,-27,33,-88,56,-95,-26,-77,-83,-12,-90,-16,-18,20,-29,53,-35,-58,-33,-127,-13,8,-55,5,69,39,33,91,-74,-80,-41,15,-17,-115,-56,63,55,-71,77,-34,49,54,-1,68,-9,42,70,-105,-14,65,-32,25,-5,-30,-48,-49,-57,-44,-82, 
  /* [11][0][][] */ 75,-42,-15,66,71,17,15,15,37,63,-81,72,-18,-71,16,-64,-52,-108,53,11,9,51,-19,-107,-127,-85,-23,24,49,-18,6,-28,-80,-68,29,22,-60,47,-35,-58,-62,44,-77,-9,-31,-68,-90,-78,20,78,67,0,-90,-111,9,10,-72,-55,-68,-89,-71,49,26,-9,6,41,-45,7,54,29,-89,-71,8,61,-79,13,-76,-2,-66,42,-91,-23,-72,-95,23,-82,-27,-57,-99,-26,-9,-87,-74,-23,-81,-42, 
  /* [12][0][][] */ -4,57,-29,5,84,4,-43,50,-110,56,-12,24,-32,-4,59,-73,-86,-65,-48,-71,9,-15,-9,104,-127,-49,105,-69,94,28,-29,72,-76,-77,-28,16,15,-70,-2,62,44,6,-79,-24,-20,-106,-40,74,-55,-109,-58,123,44,-40,-82,82,-54,-39,27,64,60,110,-61,48,102,38,-27,84,57,99,6,66,67,117,-16,-31,-30,39,-110,-92,-37,90,41,-3,-44,-54,22,99,-95,-118,60,56,93,-12,27,49, 
  /* [13][0][][] */ 70,-40,102,91,88,103,72,73,35,-84,23,-36,75,57,59,-34,-98,-81,-58,32,59,-53,99,-36,-62,38,4,33,-60,-65,75,17,39,82,-7,36,-46,-19,35,37,-90,57,-11,24,-28,6,-25,-31,22,96,-12,-59,-65,4,82,-73,-52,29,-19,-46,-6,95,-89,26,-38,-51,-68,67,-26,-7,68,20,-86,58,-56,-39,-77,64,75,-48,64,-87,102,26,-62,-127,74,102,-1,-45,-60,56,94,-40,77,-2, 
  /* [14][0][][] */ -70,-60,75,50,63,-30,-22,-62,-100,-27,55,74,-23,-72,-61,-64,-46,-69,-1,15,-43,0,-6,59,-127,-57,-20,35,-81,-83,-57,6,76,-30,-30,1,81,80,30,-99,-42,-87,36,71,50,-111,45,-81,50,23,59,37,79,-51,-16,2,-52,2,29,76,-1,-52,-50,47,-62,-13,61,-89,-73,-69,-77,72,-10,74,33,-57,45,-73,40,10,43,-21,-93,-31,-100,-113,-88,71,79,-9,35,-23,57,61,-12,39, 
  /* [15][0][][] */ -17,-48,-52,32,46,-104,17,-109,28,-42,-87,-26,61,-27,-105,-120,46,-22,-111,-9,15,-13,36,61,43,21,4,53,-13,21,23,-115,-30,-23,-82,-37,-83,65,67,-85,-17,64,-68,-46,-9,-91,-65,-92,-21,-106,-34,0,-111,-112,-79,-38,23,16,-66,65,-64,-85,-23,55,-61,55,-90,-25,-78,-23,28,-90,-12,-43,23,-117,-28,13,64,41,-97,9,-117,-78,-127,-16,-103,7,46,34,-120,-63,12,63,-119,60, 
  /* [16][0][][] */ -22,1,33,-29,12,59,-8,8,56,26,-42,10,-14,-3,-41,-24,45,66,44,29,57,27,-3,3,53,40,-48,29,-53,-8,15,27,-39,49,21,15,-22,35,-30,-67,64,17,20,35,35,67,39,21,-1,-22,-7,41,-24,83,40,9,43,26,41,10,47,36,58,28,18,4,-31,52,9,26,18,2,15,48,29,52,0,40,-49,-1,1,-42,27,26,12,127,60,6,42,14,10,36,18,-13,-35,41, 
  /* [17][0][][] */ -23,-119,-10,28,-60,-118,-84,-81,-20,-74,18,29,30,-5,-96,0,-24,-12,44,60,-100,-53,-33,-71,-24,18,-63,-20,42,-69,-52,4,-52,-64,-10,-30,-51,44,-85,-48,-114,-71,-42,-47,-11,-42,18,-112,18,37,-40,-5,-39,10,50,-86,-118,35,-97,-125,-14,-70,10,44,-86,-96,6,-111,-102,-12,32,0,-26,-96,-79,9,30,-36,-4,-86,-22,-57,-72,-102,-127,-1,15,-53,-24,14,-106,-112,-30,36,-1,-22, 
  /* [18][0][][] */ -107,57,64,-85,-34,-120,-113,-22,-31,36,-117,-66,-58,2,24,-76,-8,-47,73,-44,58,-65,-9,-93,55,-107,-41,66,-2,2,-26,9,11,-50,-117,-116,-54,58,-56,27,-61,-28,-69,-35,-123,-14,-6,30,26,-47,33,-1,-118,-34,-24,46,-63,3,-44,-126,44,65,48,4,-84,-127,-53,48,31,-91,-86,65,-109,-12,-101,-114,19,80,-28,-90,-74,-33,1,-83,58,9,32,30,-118,-90,-80,62,47,-73,15,-44, 
  /* [19][0][][] */ 4,1,39,8,21,-87,53,50,79,-63,-1,-35,-98,14,-66,26,41,-108,81,22,-38,52,-69,-14,54,-85,1,-78,-97,-120,-79,20,44,-86,5,-22,-18,-82,-70,-105,26,-124,-92,-15,-92,11,49,-96,16,34,-59,15,-54,-1,-19,-25,0,57,-28,-43,22,-69,60,25,-83,-24,-45,-22,-29,21,49,-66,-72,-127,-69,-89,-39,-119,-10,67,24,-105,-48,37,-89,56,-15,-27,50,2,-20,28,-47,79,30,-62, 
  /* [20][0][][] */ -21,29,21,33,-65,34,-7,12,30,-15,-57,-21,-19,46,3,-49,-40,-25,-46,-30,4,-28,-44,-58,96,-56,-72,13,-4,-8,-41,44,36,9,-24,13,9,-21,-20,-75,-40,-10,-62,-67,-31,-37,-44,71,86,-74,-70,17,8,74,6,-17,44,20,46,32,45,-47,-22,-36,-30,-48,-45,-4,-58,-59,-14,23,-46,-49,4,-1,50,28,48,55,29,-15,27,-22,28,127,-14,31,3,49,15,15,-10,0,-22,8, 
  /* [21][0][][] */ 41,70,59,-104,69,-95,38,23,-38,-92,-76,27,-20,-1,-65,-78,-127,-54,-8,-23,82,-81,54,-81,23,-100,-46,68,-7,-1,-26,-57,-10,-10,-94,-127,105,71,-102,-41,-55,-5,19,-5,-99,-93,-102,56,-60,-96,-21,48,27,21,-106,-6,-84,34,-46,86,53,-77,-18,-22,54,13,-39,-84,-109,-20,20,62,10,-28,59,52,-102,-40,60,75,6,49,18,-69,2,-123,41,-70,-88,63,64,-101,-69,-100,49,-47, 
  /* [22][0][][] */ -12,-39,-49,-85,64,-36,66,49,-100,27,-71,-93,69,-118,-93,-71,13,45,-127,-65,59,-91,4,24,32,-33,-90,84,-68,-49,-63,-96,24,27,-13,4,10,-56,-52,-84,-25,-19,-1,83,45,-115,31,-61,-76,-107,10,-5,-50,-91,-40,-6,-29,-26,-35,-24,96,-49,-88,-103,-56,12,-90,-48,82,68,-55,-7,-70,-33,43,-69,39,-57,49,59,80,-85,-76,-82,35,36,50,-18,-58,13,-80,51,12,19,-28,44, 
  /* [23][0][][] */ 44,-100,19,53,92,-104,-2,-66,-17,-63,78,77,21,-106,32,-33,86,-49,-86,85,53,-70,62,-14,-76,-13,89,30,78,55,68,-61,-39,17,30,32,95,-8,-78,31,-127,-15,22,-99,-79,-115,97,-5,63,-98,-70,-24,81,-115,-52,87,-104,-5,64,37,-105,-75,-86,-4,34,34,-85,-114,63,-3,67,-60,-10,-11,-35,-117,-3,-15,64,82,-37,-42,21,-127,72,-77,74,-57,-89,12,70,9,95,-63,-28,58, 
  /* [24][0][][] */ -88,-56,-89,-73,-86,-127,-78,-79,13,74,39,22,71,17,-42,-105,-93,-3,-4,-59,57,-96,-70,-44,-24,-44,45,32,70,39,-16,-83,-15,-17,25,3,-56,-97,32,-19,-112,-113,64,2,9,-53,-4,27,-122,-61,-40,-33,42,10,40,-75,-35,51,-9,-22,68,-12,-32,60,-101,59,-44,-96,-97,24,-80,-34,-51,6,62,62,27,-82,-101,-94,-76,-97,-66,-124,-25,-11,-37,-94,-2,-117,-25,-70,-26,4,-91,0, 
  /* [25][0][][] */ -80,-45,-54,-22,64,-61,-100,33,-1,-103,-51,13,46,-26,-89,-22,-76,16,0,-107,33,47,-36,-46,-46,-63,-85,35,48,-65,21,76,67,-98,22,44,78,-74,-39,-6,-110,52,-98,13,85,13,32,-13,-127,54,-74,-10,28,-29,-58,0,-52,37,-115,55,100,39,-11,25,-13,54,-19,-18,-79,-29,-68,-102,13,-123,53,5,58,29,-2,-2,34,33,-64,49,-67,-86,-112,-82,-40,-54,52,24,-96,-22,-30,-90, 
  /* [26][0][][] */ 32,-111,-36,-28,-104,-9,-27,-39,-67,-127,70,44,-83,-36,-12,-28,86,7,-80,-76,-1,47,65,-12,75,32,-10,21,-6,-15,-97,-12,-43,-67,-103,-96,-75,51,-63,67,-65,81,29,6,-75,65,-35,90,-4,21,-20,103,-14,-18,-16,-104,83,30,29,7,-14,-99,69,-42,76,-34,-67,33,-88,48,78,56,48,-103,-91,-6,31,-105,-98,5,-42,89,47,-69,59,34,-52,-8,-81,92,10,-8,-59,90,19,69, 
  /* [27][0][][] */ -18,50,-79,-113,-127,-77,-84,-48,72,51,-2,-119,-51,21,35,-34,28,-16,17,-98,-107,-21,21,-51,-46,9,-117,-23,20,-6,-57,-38,27,33,-105,-99,-100,-86,-125,39,-73,55,-11,-10,123,57,29,49,108,25,18,-85,-104,-30,-28,-55,56,-52,-73,-77,-70,-73,-51,14,1,-62,-123,62,9,-24,-46,-26,28,-60,-33,-97,79,-71,40,57,39,-50,59,-33,-68,-26,16,37,-71,-27,-53,-69,17,-9,46,18, 
  /* [28][0][][] */ 43,-49,47,23,-106,-93,-90,-56,-65,-104,18,54,-73,-87,-26,63,64,60,-98,45,-59,1,-87,-52,-122,35,-71,-64,-58,-87,-22,-39,-107,-14,49,8,-26,-88,-45,28,27,-15,-59,7,-123,-29,-7,-11,-29,-77,-97,-66,-66,-26,19,19,-6,-12,32,10,-50,-54,-114,-7,-1,24,-33,36,-81,23,-95,-53,39,-20,-16,-78,-127,-42,-94,14,-62,-111,80,-62,32,-125,41,-100,-105,-90,-48,-55,-62,-3,-108,-98, 
  /* [29][0][][] */ 36,18,20,-47,-72,-6,-86,-15,83,-8,-67,-80,59,-62,-45,-42,-69,79,37,-57,-59,-22,27,-12,-15,0,-42,-35,-82,-22,52,-7,23,-7,-64,-52,-24,62,-20,42,94,56,-45,38,-12,70,-25,-21,58,15,19,-76,30,-57,62,23,-68,20,-39,60,-93,47,-69,-50,-55,-55,17,48,45,-71,45,-61,63,45,26,2,61,-63,-34,11,-19,-57,-24,-64,37,127,23,40,-36,51,41,36,-81,-2,-21,47, 
  /* [30][0][][] */ 27,83,-5,32,-32,28,-4,8,105,-1,16,-14,-37,28,32,60,3,46,53,-25,104,-32,-3,9,46,31,-29,127,-3,-24,-33,40,5,9,-47,-2,37,27,17,0,79,52,5,112,98,29,49,79,-31,44,22,40,56,44,35,45,45,-22,10,-10,4,26,71,0,-35,-8,-27,95,-15,53,55,16,-17,49,98,89,85,-19,50,30,37,20,-28,39,-34,112,-11,105,68,19,77,29,4,52,20,33, 
  /* [31][0][][] */ 37,-100,4,54,11,24,-80,-108,-48,-51,-91,-104,55,-125,-68,68,-82,-104,-3,11,26,3,-49,58,53,-127,4,8,-90,-85,9,60,-17,-9,-104,-35,54,-57,-80,-118,23,-80,-51,2,-24,-68,-57,0,90,-14,48,-48,-122,-77,-96,-11,-121,29,-20,67,-57,-29,49,-92,29,66,-65,-89,34,-124,-122,-20,-104,0,-21,-21,-73,-73,17,51,-89,-68,22,34,23,77,-101,-10,-11,-66,-94,-72,-21,63,-38,-47, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,96 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0025926236994564533, 0.0021296599879860878, 0.0028755655512213707, 0.0023309341631829739, 0.0043459292501211166, 0.0026560307014733553, 0.0022387569770216942, 0.0019969954155385494, 0.0022148317657411098, 0.0021826978772878647, 0.0021591165568679571, 0.00243229023180902, 0.0021015848033130169, 0.0021878588013350964, 0.0026161368004977703, 0.0021592022385448217, 0.0041565028950572014, 0.0026577846147119999, 0.00215907022356987, 0.002216854365542531, 0.0034755286760628223, 0.0021299063228070736, 0.0024270201101899147, 0.0020953468047082424, 0.0023227720521390438, 0.0023393989540636539, 0.0022146333940327168, 0.0022398708388209343, 0.0025348758790642023, 0.0028238259255886078, 0.0041739563457667828, 0.0022234558127820492, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[96] = { 1453, -99, 4736, 8222, 5691, -1979, 4262, -2538, -2948, -1044, 4765, -4298, 6293, 6265, 2420, 3119, -751, 181, -2043, 5569, 2936, -2552, 1941, -724, -483, 3607, 1467, 3331, 6499, 2186, 5169, 951, 1394, 8302, 4103, 4140, -1744, 6040, 2188, -6044, 601, 1777, 57, 1211, -747, 845, -1360, 1971, -6684, 3229, 1137, -7490, 6970, -519, 2318, 2100, 1680, 2507, -981, -3534, -295, 1666, 2548, 3962, 6218, 2463, 3185, 5647, 5203, -1363, 3680, 6044, 2674, -1548, 6801, 15742, 710, -5731, 29, 611, 16907, 1392, -822, -586, 764, 2612, 1375, -2837, 6122, -1345, 3845, 1561, 56, -5343, -491, 2233, };
const TfArray<1, int> tensor_dimension6 = { 1, { 96 } };
const TfArray<96, float> quant6_scale = { 96, { 0.00011106192687293515, 0.00017224861949216574, 0.00010699692938942462, 8.8469627371523529e-05, 0.00010592520266072825, 0.00017341860802844167, 0.00013546418631449342, 0.0001581359829287976, 0.00016316582332365215, 0.00020139594562351704, 0.00012551152030937374, 0.00010234070214210078, 8.0044243077281862e-05, 8.7261534645222127e-05, 0.00011402665404602885, 0.0001736927661113441, 0.00020679572480730712, 0.00013452969142235816, 0.00014753159484826028, 0.00010481238132342696, 0.0001524133695056662, 0.00010400234896223992, 0.00015822589921299368, 0.00013725580356549472, 0.00015564297791570425, 0.00019488665566314012, 0.00017589193885214627, 0.0001184570646728389, 0.00010300295980414376, 0.00016788658103905618, 9.0633155195973814e-05, 0.0001844721264205873, 0.00014417617057915777, 8.3713981439359486e-05, 0.00012469774810597301, 0.00010670748451957479, 0.00012071561650373042, 8.2166043284814805e-05, 0.00012221932411193848, 9.4679009635001421e-05, 0.00018643813382368535, 0.00015944849292282015, 0.00016985008551273495, 0.00024640187621116638, 0.00015704773250035942, 0.00014855444896966219, 0.00019224901916459203, 0.00010992605530191213, 8.7133492343127728e-05, 0.00010650443437043577, 0.00014436130004469305, 7.5588177423924208e-05, 9.4554990937467664e-05, 0.00018899506540037692, 0.00013765404582954943, 0.00010146525892196223, 0.00020025363483000547, 0.00010351796663599089, 0.00019221732509322464, 0.0001139904125011526, 0.00019523756054695696, 0.00013386066711973399, 0.00014543504221364856, 0.00013708222832065076, 9.8937103757634759e-05, 0.00017695351561997086, 8.5840401879977435e-05, 0.0001205065636895597, 0.00011537592945387587, 0.00011982188880210742, 0.00012507877545431256, 0.0001096839114325121, 0.00013366441999096423, 0.00015398483083117753, 0.00011096425441792235, 5.6981305533554405e-05, 0.00012000225979136303, 0.00011359732889104635, 0.00014241256576497108, 0.00012817686365451664, 4.6506927901646122e-05, 0.00014207939966581762, 0.00017530619516037405, 0.000200735914404504, 0.00022749735217075795, 0.00021198758622631431, 0.0001499492209404707, 0.00013832368131261319, 0.00011383956734789535, 0.0001049345446517691, 0.00014959875261411071, 0.00011609409557422623, 0.00011280692706350237, 8.7847474787849933e-05, 0.00024717196356505156, 0.00012780397082678974, } };
const TfArray<96, int> quant6_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[96*1*1*16] = { 
  /* [0][0][][] */ -13,100,-75,34,34,-37,72,65,-54,10,31,-83,61,127,-54,0, 
  /* [1][0][][] */ -9,10,-30,-29,2,31,37,-127,37,-30,-31,-39,7,-38,-39,-7, 
  /* [2][0][][] */ -4,-17,49,88,40,60,-101,127,0,12,64,-53,-28,-61,-62,47, 
  /* [3][0][][] */ 68,-104,76,15,-16,-33,-55,127,-49,63,89,51,-3,30,2,17, 
  /* [4][0][][] */ -60,-36,-10,78,-82,12,-54,-96,-37,-6,61,-7,33,22,87,127, 
  /* [5][0][][] */ 127,30,-3,-48,-38,-6,35,47,44,-15,40,84,59,43,-62,-19, 
  /* [6][0][][] */ 3,-50,-75,-52,-93,23,-13,-44,-65,-72,-28,35,85,29,127,-6, 
  /* [7][0][][] */ -32,36,-37,-78,16,-22,-38,-1,-54,46,-66,-44,-127,-33,18,26, 
  /* [8][0][][] */ 39,40,37,2,48,-18,127,4,55,-13,16,-7,-66,9,-30,1, 
  /* [9][0][][] */ -10,76,18,-71,1,-2,56,-34,6,30,-61,-11,22,127,27,2, 
  /* [10][0][][] */ 44,48,-55,48,-68,-7,14,-30,-83,-32,-13,-62,-127,-40,28,89, 
  /* [11][0][][] */ 20,-14,65,28,-22,-37,-7,102,-106,31,-7,4,-2,-23,40,127, 
  /* [12][0][][] */ -79,-48,16,37,3,-22,98,49,-106,32,32,-9,6,60,-54,127, 
  /* [13][0][][] */ 9,53,8,-12,127,77,85,44,28,31,-90,-78,39,63,-62,-58, 
  /* [14][0][][] */ -127,66,8,20,-30,-16,23,5,-74,34,124,7,-60,-2,-49,59, 
  /* [15][0][][] */ 13,20,-127,-55,61,-28,-70,-49,-13,-45,-19,-94,-6,-51,-62,30, 
  /* [16][0][][] */ 127,1,3,-29,35,-41,30,-46,-8,-13,92,50,30,35,-3,10, 
  /* [17][0][][] */ 35,31,-27,-112,8,-36,127,-106,18,-14,-53,14,82,96,14,55, 
  /* [18][0][][] */ 48,127,-26,-72,79,-47,-16,-57,-12,82,-33,-12,-33,72,1,-40, 
  /* [19][0][][] */ -82,-123,103,-51,6,-127,-7,-36,6,51,107,92,47,-2,49,-11, 
  /* [20][0][][] */ 6,105,63,-20,26,2,-2,-32,83,-10,72,13,-127,-31,-50,-47, 
  /* [21][0][][] */ -38,89,-1,36,120,45,127,126,-107,30,-55,-21,5,10,-9,17, 
  /* [22][0][][] */ 11,-85,46,11,17,-127,91,3,14,-70,-50,-87,17,-100,-51,-50, 
  /* [23][0][][] */ -75,-113,47,76,5,-7,-11,-38,-12,-25,95,-1,10,37,42,127, 
  /* [24][0][][] */ 23,7,13,69,60,28,-45,-127,75,-2,-40,19,8,-6,-1,-57, 
  /* [25][0][][] */ 19,32,22,-69,-24,11,14,-49,7,21,-66,-40,13,127,21,-28, 
  /* [26][0][][] */ -77,44,3,36,13,-67,-16,-27,-7,21,33,53,18,-1,-81,127, 
  /* [27][0][][] */ -19,-127,-47,44,-68,81,2,-48,4,0,58,18,42,-19,-71,-19, 
  /* [28][0][][] */ -45,-7,33,78,15,8,-52,-110,-127,39,111,-6,64,-5,-48,-13, 
  /* [29][0][][] */ -127,55,-11,-18,-46,18,-109,-65,-59,-19,14,-2,14,-52,-114,54, 
  /* [30][0][][] */ 34,50,-41,101,-110,-110,-93,-9,-67,8,20,-107,127,0,-22,112, 
  /* [31][0][][] */ 127,32,-53,-40,-22,21,125,11,-13,-11,19,-20,41,19,-11,-40, 
  /* [32][0][][] */ -21,8,116,-25,13,97,127,13,-2,3,-30,-34,8,122,90,17, 
  /* [33][0][][] */ 75,-10,-44,-92,-39,29,100,-57,11,-60,-17,-58,71,127,-81,-36, 
  /* [34][0][][] */ -51,18,74,-13,49,-31,127,-15,-73,25,-4,-55,70,84,-39,-57, 
  /* [35][0][][] */ -8,15,-58,26,-101,127,-82,-13,-29,122,12,106,-59,51,16,33, 
  /* [36][0][][] */ 13,-47,127,-91,-27,24,-20,-25,44,21,-75,61,8,-106,-21,25, 
  /* [37][0][][] */ 109,79,52,-82,127,-36,-84,7,-26,104,-84,-6,-104,-44,88,-77, 
  /* [38][0][][] */ 28,26,10,-59,-13,-34,-125,54,-73,29,-74,-17,-81,-127,-84,48, 
  /* [39][0][][] */ -61,2,-23,-17,-79,-50,35,-20,-127,-11,27,85,52,0,-20,35, 
  /* [40][0][][] */ 127,42,11,-83,-22,-7,4,-1,-26,-20,-42,-121,35,49,36,39, 
  /* [41][0][][] */ 113,-50,-37,-2,5,17,-35,12,61,-14,-46,-101,127,-121,49,-30, 
  /* [42][0][][] */ 10,-115,-54,118,2,-118,-126,-9,43,-25,-20,40,-127,95,-73,-37, 
  /* [43][0][][] */ -54,13,-59,-121,-17,37,10,80,64,-127,-43,25,-20,-33,-10,80, 
  /* [44][0][][] */ 6,33,48,-44,9,-33,56,103,127,-85,73,91,84,91,-13,-11, 
  /* [45][0][][] */ 45,78,-17,85,127,-64,-20,-57,105,-62,58,-57,-29,44,-73,49, 
  /* [46][0][][] */ -22,-6,22,-21,85,-17,10,35,10,94,-43,-127,-12,31,-13,57, 
  /* [47][0][][] */ 103,-12,9,-39,97,30,-17,-63,40,79,-76,9,-11,-127,-55,-47, 
  /* [48][0][][] */ 2,13,-9,-127,26,-34,118,-117,5,-27,-29,37,31,53,-32,63, 
  /* [49][0][][] */ -54,127,-14,47,14,-71,33,97,-20,32,48,-43,-49,71,121,-54, 
  /* [50][0][][] */ 22,61,-31,-20,-127,14,-105,-71,84,76,28,54,-78,-74,-3,32, 
  /* [51][0][][] */ 127,-42,5,-2,-58,119,-103,-45,40,-41,-54,86,-40,-96,1,9, 
  /* [52][0][][] */ -41,-31,40,70,-41,-91,-127,26,-59,-38,-12,-23,-9,-62,41,110, 
  /* [53][0][][] */ 17,87,42,-100,8,92,44,-31,-8,-35,-30,-37,104,-127,-11,26, 
  /* [54][0][][] */ 55,127,8,-65,43,-62,-93,24,34,-30,-66,125,45,93,9,16, 
  /* [55][0][][] */ -66,-27,56,45,38,-48,84,110,-111,2,38,8,127,15,-3,22, 
  /* [56][0][][] */ 127,31,6,6,-17,73,-60,-87,-10,25,-71,-2,-28,48,-27,2, 
  /* [57][0][][] */ -41,-26,-36,-21,-42,-75,51,-25,-127,9,66,48,38,27,-9,40, 
  /* [58][0][][] */ 45,-56,52,15,10,-55,-34,-7,30,-23,-127,-32,32,-37,-43,31, 
  /* [59][0][][] */ 87,33,-127,81,27,15,92,-41,-45,-37,1,-86,-93,-37,60,84, 
  /* [60][0][][] */ 18,42,-19,7,-1,-2,-14,-21,-5,-88,42,127,-45,-118,-31,-40, 
  /* [61][0][][] */ -47,29,59,-45,-62,20,-9,127,-21,-54,56,48,69,-22,20,119, 
  /* [62][0][][] */ 71,37,-28,-127,-33,-17,3,-70,7,6,-12,44,-3,12,-40,-87, 
  /* [63][0][][] */ -1,-6,-1,9,-49,-52,-57,12,-66,0,-21,-2,127,2,63,-9, 
  /* [64][0][][] */ -2,-19,-9,81,-98,-33,-35,-58,21,111,62,-8,51,-57,-54,127, 
  /* [65][0][][] */ -35,3,-25,-21,-80,91,2,-33,42,-109,88,-29,70,42,-127,50, 
  /* [66][0][][] */ -111,17,-86,-63,16,-29,-63,-84,-100,127,105,8,-101,-60,28,95, 
  /* [67][0][][] */ 13,-7,-127,-113,91,91,44,-12,-8,0,37,-35,13,34,32,34, 
  /* [68][0][][] */ 34,7,-10,-32,-62,18,3,42,-81,76,127,-3,13,-26,-109,12, 
  /* [69][0][][] */ 59,-106,57,-50,-1,-127,-63,126,-18,71,102,88,-10,48,-37,-2, 
  /* [70][0][][] */ 31,3,127,51,92,-17,112,41,38,15,-88,5,-107,34,-72,21, 
  /* [71][0][][] */ 28,45,98,-88,-127,-99,34,-6,-5,-10,7,-104,-94,33,32,10, 
  /* [72][0][][] */ -64,-80,18,-118,96,-10,23,71,-76,27,-121,-12,84,127,-60,126, 
  /* [73][0][][] */ 12,20,44,5,99,-91,-79,36,-40,79,-73,10,-70,-51,127,-9, 
  /* [74][0][][] */ -37,40,-91,-91,59,-26,-45,-13,-40,-18,-127,-62,-1,-68,-39,18, 
  /* [75][0][][] */ 115,16,7,-57,32,28,-90,-14,14,-127,39,-24,-22,-10,-2,-61, 
  /* [76][0][][] */ 27,8,-29,115,55,83,127,-69,106,-91,33,75,30,21,-25,5, 
  /* [77][0][][] */ -19,-56,98,-41,52,-4,-15,-127,32,-15,9,93,53,40,-9,-21, 
  /* [78][0][][] */ -26,26,27,-73,10,-77,32,-39,36,0,-3,-33,-127,-102,-121,-78, 
  /* [79][0][][] */ -69,-23,-31,-3,127,30,-20,-21,25,32,-32,55,-38,-75,-34,-41, 
  /* [80][0][][] */ 45,-90,66,83,-46,-8,-99,15,38,-1,35,47,-127,-34,-27,-20, 
  /* [81][0][][] */ 68,38,-27,80,-28,45,-10,115,-19,17,127,88,118,-4,22,-2, 
  /* [82][0][][] */ -66,-28,31,-18,14,-127,-90,-87,-20,85,-30,-15,15,91,-71,-22, 
  /* [83][0][][] */ 69,-8,48,-13,-30,0,-127,-2,15,-81,25,7,-22,23,-10,-32, 
  /* [84][0][][] */ 23,-52,-68,12,127,22,61,18,-122,39,-101,4,80,-24,-56,2, 
  /* [85][0][][] */ -13,41,31,-17,88,9,127,-7,69,-22,20,-32,80,30,-23,11, 
  /* [86][0][][] */ 127,-12,102,14,8,-58,83,3,-35,-47,-99,-30,38,32,-50,-22, 
  /* [87][0][][] */ -6,27,13,-93,96,-44,-67,7,55,-34,91,-24,-109,-127,9,16, 
  /* [88][0][][] */ -43,-36,13,-14,6,37,-61,-80,-2,-3,-60,-127,-12,-31,-32,-58, 
  /* [89][0][][] */ -66,27,29,-81,42,11,-127,7,110,41,-90,14,1,-93,-34,-39, 
  /* [90][0][][] */ -27,-20,-47,-68,127,41,-74,53,42,62,39,-22,23,-2,-75,-19, 
  /* [91][0][][] */ -14,-42,2,39,-18,-29,13,24,-58,-47,31,-78,17,75,27,127, 
  /* [92][0][][] */ -50,57,14,13,-47,52,-127,56,-80,7,95,8,-27,110,44,46, 
  /* [93][0][][] */ 17,105,-36,-56,104,123,-72,-19,100,45,40,5,-127,-6,-43,39, 
  /* [94][0][][] */ 13,29,92,-5,-127,-27,-27,-23,11,-15,20,-3,-54,-29,0,-32, 
  /* [95][0][][] */ 28,107,30,8,127,-5,-90,19,13,26,-64,91,-9,11,114,-66, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant7_scale = { 96, { 0.0012191218556836247, 0.0018907655030488968, 0.0011745005613192916, 0.00097112718503922224, 0.0011627362109720707, 0.0019036083249375224, 0.0014869843143969774, 0.0017358516342937946, 0.001791063928976655, 0.0022107143886387348, 0.0013777343556284904, 0.0011233893455937505, 0.00087864208035171032, 0.00095786596648395061, 0.0012516655260697007, 0.0019066177774220705, 0.0022699874825775623, 0.0014767263783141971, 0.0016194478375837207, 0.0011505208676680923, 0.0016730348579585552, 0.0011416291818022728, 0.0017368387198075652, 0.0015066508203744888, 0.0017084860010072589, 0.002139262156561017, 0.0019307580078020692, 0.0013002979103475809, 0.0011306589003652334, 0.001842883531935513, 0.0009948761435225606, 0.002024942310526967, 0.0015826154267415404, 0.00091892469208687544, 0.0013688016915693879, 0.0011713233543559909, 0.0013250899501144886, 0.0009019330027513206, 0.0013415961293503642, 0.0010392873082309961, 0.0020465231500566006, 0.0017502589616924524, 0.0018644367810338736, 0.0027047425974160433, 0.0017239059088751674, 0.0016306755132973194, 0.0021103089675307274, 0.0012066534254699945, 0.00095646048430353403, 0.0011690944666042924, 0.0015846475725993514, 0.00082972802920266986, 0.001037925947457552, 0.0020745904184877872, 0.0015110223321244121, 0.0011137796100229025, 0.0021981752943247557, 0.0011363121448084712, 0.0021099611185491085, 0.0012512677349150181, 0.0021431141067296267, 0.0014693825505673885, 0.0015964340418577194, 0.0015047455672174692, 0.0010860281763598323, 0.0019424108322709799, 0.00094226625515148044, 0.0013227951712906361, 0.0012664764653891325, 0.001315279514528811, 0.0013729841448366642, 0.001203995430842042, 0.0014672284014523029, 0.0016902846982702613, 0.0012180496705695987, 0.00062548124697059393, 0.0013172595063224435, 0.0012469528010115027, 0.0015632564900442958, 0.0014069917378947139, 0.00051050446927547455, 0.0015595993027091026, 0.0019243283895775676, 0.0022034691646695137, 0.0024972283281385899, 0.0023269783705472946, 0.0016459859907627106, 0.0015183729119598866, 0.0012496118433773518, 0.0011518618557602167, 0.0016421389300376177, 0.001274359761737287, 0.0012382765999063849, 0.00096429785480722785, 0.002713195513933897, 0.001402898458763957, } };
const TfArray<96, int> quant7_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[16] = { 3789, 14304, 6182, -2418, 2426, -503, 3647, 4992, 11571, 3656, 776, 14891, 1089, 19945, -7202, 10744, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 4.4220032577868551e-05, 5.4138647101353854e-05, 4.2234136344632134e-05, 5.567997504840605e-05, 5.7581550208851695e-05, 9.1349684225860983e-05, 4.3673131585819647e-05, 4.4365875510266051e-05, 6.67642816551961e-05, 7.0012654759921134e-05, 7.1671915065962821e-05, 3.9287457184400409e-05, 0.00011327216634526849, 4.4961256207898259e-05, 9.2267342552077025e-05, 0.00013143829710315913, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[16*1*1*96] = { 
  /* [0][0][][] */ -38,87,13,-37,-55,-7,-73,-6,-35,-12,19,-21,48,57,35,-32,19,-6,71,3,-3,-73,127,82,12,31,0,32,49,-90,-83,37,-61,-34,12,29,21,-11,-25,42,8,-28,1,8,-44,-4,-36,68,-49,-8,-43,-3,-23,-32,63,-34,-112,9,-40,52,95,36,33,-3,-9,-50,-47,14,-30,-57,16,-31,55,20,-120,-15,-44,14,-9,-7,-14,42,73,-38,5,41,29,33,27,-17,45,-4,-74,-44,-41,19, 
  /* [1][0][][] */ 45,58,-28,-25,-76,-19,-35,22,1,13,16,-55,1,9,-33,-26,-8,11,-60,-17,-21,-90,-10,55,-29,-39,-5,-26,90,-69,69,-31,1,11,-21,49,20,33,-34,3,22,13,13,7,24,53,-127,-52,-43,-47,-10,-8,45,-64,-10,38,2,-13,-60,-16,38,42,-7,-68,-2,-3,-31,-5,22,-31,-69,-6,-17,9,-17,-46,-7,-11,23,-34,-19,-36,-47,-20,7,-31,-22,3,-50,9,-19,49,-30,42,-45,22, 
  /* [2][0][][] */ 52,-14,-4,31,16,-71,43,24,12,-5,-15,-39,-91,-22,24,-30,-97,-29,-36,31,27,-29,-66,24,-3,-41,-2,-29,-127,19,-50,81,-29,74,-44,0,-31,0,-21,-23,-89,73,34,15,-51,-2,9,-27,47,-20,-50,-60,54,0,-43,48,29,-14,26,7,-31,18,-63,1,5,-7,12,11,30,60,-25,25,8,52,46,49,28,-83,31,65,44,-10,-56,35,-61,16,14,55,-19,-9,-34,25,-13,30,-7,7, 
  /* [3][0][][] */ -24,-45,5,24,20,-9,14,-36,-7,51,14,38,7,-9,-12,54,17,-11,41,8,14,127,0,-57,25,19,-20,5,-5,-51,59,-49,14,38,7,-36,5,53,40,-7,-71,14,-69,29,-30,23,74,-19,-5,-39,3,-13,57,-42,-41,-53,31,63,10,27,-51,4,-49,7,-2,40,-11,17,-16,-12,-10,-30,-41,-58,59,-1,29,13,-14,13,-20,-9,-50,-20,-18,-41,21,-9,15,17,-14,-10,90,20,6,75, 
  /* [4][0][][] */ 67,83,-96,-8,12,28,-53,13,-34,47,97,-7,0,-1,-13,-46,6,-26,-58,12,0,-75,79,82,-76,14,-127,-1,48,-54,7,47,-80,-50,-26,49,12,0,16,51,-17,-63,73,-6,18,23,-64,32,-24,45,-3,5,29,-43,-68,21,4,-26,-32,-30,70,9,14,-8,-3,-4,-42,-2,-48,7,-50,39,59,-21,-59,-22,5,-59,-8,-7,-32,59,-56,4,-9,42,29,-58,48,18,50,30,-88,0,1,18, 
  /* [5][0][][] */ -60,71,10,-16,29,-20,23,-37,-42,19,0,0,65,3,-40,-52,2,-39,32,20,-64,-15,-20,-19,-26,-6,31,-8,127,-36,-29,44,43,61,-5,14,6,-5,48,1,-23,26,78,-20,-11,76,31,-3,-45,19,-20,8,-1,-58,21,-48,22,-6,-40,-42,61,66,-14,-34,103,-52,-83,-69,-42,-19,1,-26,-4,3,-43,-19,2,-34,-5,-45,56,-14,16,-22,-36,56,50,-22,-34,19,54,37,-13,37,8,49, 
  /* [6][0][][] */ 59,124,-103,-17,-18,-38,69,127,-69,46,-26,48,-103,-77,27,51,-38,-21,-27,-22,-9,-78,24,-97,-38,86,43,45,116,8,69,10,-26,11,1,-55,6,6,29,49,20,-16,-66,-52,35,-54,-51,5,26,-118,-5,56,18,-20,-22,-44,16,27,-28,1,-82,43,-114,20,82,34,-31,42,27,10,-28,-22,-6,61,55,40,26,-32,35,-80,-13,-67,-36,57,20,-38,65,5,-24,72,28,43,-54,30,-63,68, 
  /* [7][0][][] */ -2,62,-9,-60,0,-37,57,3,-36,36,-25,-4,-20,-12,-9,-4,-61,-50,-8,75,-1,127,-22,27,25,-22,33,14,14,46,54,-37,83,47,-15,12,9,-10,28,35,-43,-34,-2,-33,-1,-50,80,-2,42,-45,-53,-44,-44,-5,-27,-5,4,31,-59,31,-15,86,-13,-42,-37,-14,-53,0,-37,11,-80,50,-25,51,20,22,-41,49,32,-50,-29,-28,-5,-71,23,-29,-1,9,-12,47,-86,9,70,-27,-57,6, 
  /* [8][0][][] */ 23,114,-66,24,-18,-23,-79,6,-63,-45,1,11,-14,45,9,59,16,-48,6,-8,14,-30,27,13,-32,61,-3,12,95,-9,-46,5,-28,-34,-32,-45,-29,-24,15,10,8,-57,60,19,-36,-21,-15,-26,-16,-23,21,55,-28,-40,-43,86,-49,18,-29,-38,3,13,28,34,9,-48,-43,3,-17,2,3,4,9,-14,-127,2,-43,14,-17,-18,-19,-20,-19,-20,5,9,33,13,12,46,-16,3,-105,-101,14,-35, 
  /* [9][0][][] */ -31,-33,-34,45,-36,-17,50,52,-17,35,-24,51,-32,-4,29,101,0,19,34,-5,48,1,4,-84,-28,11,9,2,-127,-28,34,26,-25,-5,7,-92,3,0,-20,-14,-15,34,11,-32,6,8,17,4,21,57,9,0,-24,-39,3,-17,31,-7,42,-16,-66,30,-52,-13,38,2,-1,8,-46,5,34,27,-21,69,1,-9,-13,18,-66,-6,29,-8,17,-12,7,-18,-34,-11,-55,4,-9,-21,48,38,-24,-8, 
  /* [10][0][][] */ 17,-38,-11,10,-26,-12,46,11,12,-4,-28,-28,-70,-10,12,6,-51,-7,8,14,30,27,-2,-14,-22,51,20,7,-127,-55,1,-25,48,-17,31,-3,27,-40,44,53,-3,-13,-20,-7,-11,-61,10,31,24,43,-41,-25,0,35,-5,36,18,-41,49,40,-35,18,-60,-11,-33,-28,21,30,9,-18,-13,34,52,7,56,-55,20,-27,15,0,-41,31,-1,10,-28,-19,-10,28,-36,-12,-18,14,50,42,-15,-3, 
  /* [11][0][][] */ -67,-76,21,-21,29,-53,-38,-50,93,-61,-63,15,-77,16,-11,8,-42,22,75,0,-31,50,-66,-4,-2,43,-46,51,-56,-54,72,-36,26,-6,10,-32,-102,13,-106,-10,-73,47,-40,59,-21,29,-30,-63,50,-20,-50,-78,39,20,57,-69,-54,-52,0,-40,-42,-21,-53,-127,-46,-20,50,104,109,43,69,-51,-20,-18,29,-23,94,61,5,49,61,-41,-6,88,64,8,6,-17,-88,-55,-102,-26,35,-15,84,75, 
  /* [12][0][][] */ 12,-79,9,-13,-13,70,6,26,28,45,-10,10,-9,26,12,3,-51,36,3,21,82,-3,32,-72,9,32,-46,-27,-127,30,16,12,13,-8,11,-30,16,4,-32,-34,-4,11,7,14,3,4,8,-16,-13,9,3,14,-4,10,5,1,-14,19,7,29,-22,-55,-14,-48,-39,41,-6,-18,-11,-23,21,8,-17,-7,25,1,-3,36,-64,-22,-28,29,55,19,-1,17,-24,-55,34,15,-72,8,48,10,-9,-64, 
  /* [13][0][][] */ -8,44,-18,-25,-55,6,4,-10,14,-51,-43,-78,31,-81,-6,-50,-42,-11,-67,-24,-71,-69,-9,79,-31,59,72,20,-40,-27,79,64,-4,-8,-90,110,-30,-44,-7,-62,91,22,-8,3,12,-127,49,-38,75,-26,-32,31,30,5,6,59,50,-52,-61,0,22,25,-17,-59,-22,57,-20,40,-43,-31,-110,37,-55,11,-46,-93,-77,31,10,73,-32,24,46,-108,29,-4,27,-2,-21,19,-23,-5,-91,19,-38,-21, 
  /* [14][0][][] */ 0,59,-39,-14,67,60,-65,-3,3,-49,49,17,27,-13,-12,-21,-53,23,38,97,6,-20,-16,20,12,1,-16,54,127,11,-22,10,29,10,-1,0,-6,28,46,6,47,-15,24,8,5,-22,46,-22,-2,-17,-2,-5,34,8,-15,12,-18,55,-53,5,-4,-41,-24,-64,39,-15,-30,12,-30,39,21,29,3,-2,-39,-19,40,7,3,4,27,2,13,24,-26,27,-1,-11,-11,32,41,29,4,-39,-33,-37, 
  /* [15][0][][] */ -40,-48,34,-9,9,-11,-1,-30,5,19,-13,8,-15,-16,19,47,-53,1,5,-25,17,1,-25,-50,24,-8,29,-21,-127,-58,-19,-4,-6,19,40,-41,-5,-2,13,-19,-12,24,-7,-15,1,-10,40,43,-6,1,11,-24,-16,49,-16,-23,-27,-10,47,12,-40,2,-56,2,-69,-10,5,7,-5,-24,19,-6,11,-26,20,-35,2,0,-2,0,-13,41,9,3,-8,-18,-61,9,-16,-14,-69,-8,41,-14,-10,31, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0018793513299897313, 0.0023008924908936024, 0.0017949508037418127, 0.0023663989268243313, 0.0024472158402204514, 0.003882361575961113, 0.0018561080796644092, 0.0018855496309697628, 0.0028374819085001945, 0.0029755379073321819, 0.003046056255698204, 0.0016697169048711658, 0.0048140669241547585, 0.0019108533160760999, 0.0039213621057569981, 0.0055861277505755424, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[96] = { -5164, -1739, -4111, -4478, -8876, 10343, -5401, -108, 1324, 144, 8677, -3614, -775, 8269, 53, -791, 15077, 7379, -11125, 781, -11303, -3563, -6554, -740, -155, -4319, -5047, -1407, -2471, -5248, -4160, -5308, 7875, -2230, 11803, 179, 3233, -882, -2984, 4944, -3216, 1780, -843, -5890, 11708, 17079, -6325, 8095, 5924, 10503, 12345, 1088, 60, 6434, 2217, 9034, -15536, 712, 16174, 10263, 6459, 11054, 4290, -4970, -1340, -530, -3981, -282, -11329, -1314, -6356, 5262, 10472, -4183, -6680, 7348, -3934, 1386, 2844, 1823, -4669, 8799, 722, 9145, 18554, -1115, -3910, -2504, 8698, -2015, 7223, 2065, -9633, -5648, -5428, -7270, };
const TfArray<1, int> tensor_dimension10 = { 1, { 96 } };
const TfArray<96, float> quant10_scale = { 96, { 0.00025019299937412143, 0.00022228980378713459, 6.8270528572611511e-05, 0.00011714980792021379, 0.00020744944049511105, 0.00017299341561738402, 0.00031028166995383799, 0.00019226738368161023, 0.00022707266907673329, 0.00018294504843652248, 0.00010318119166186079, 0.00015895295655354857, 0.00023126816086005419, 0.00012942176545038819, 0.00014296385052148253, 0.00041399666224606335, 0.00011130720668006688, 0.00016215517825912684, 5.1123861339874566e-05, 0.00017223472241312265, 0.00012554303975775838, 0.00030599895399063826, 0.00022914845612831414, 0.00022391446691472083, 0.0010974612087011337, 0.00013283977750688791, 0.00024049203784670681, 0.00016406386566814035, 0.000197829824173823, 9.6729178039822727e-05, 0.00035152034251950681, 0.00013322186714503914, 0.00020995255908928812, 0.00013044619117863476, 0.00012874373351223767, 0.00083040155004709959, 0.00015645913663320243, 0.00036571192322298884, 0.00016992317978292704, 8.5028099420014769e-05, 0.00017292999837081879, 0.00028335500974208117, 0.00019455201982054859, 0.00011183469177922234, 6.9780988269485533e-05, 8.8714259618427604e-05, 0.00015071938105393201, 0.00012130091636208817, 0.00018882240692619234, 7.5496536737773567e-05, 6.3519255490973592e-05, 8.9257235231343657e-05, 0.00011115262168459594, 0.00013173458864912391, 0.00021571348770521581, 0.00012821551354136318, 9.1861176770180464e-05, 0.0001440470659872517, 0.00017318595200777054, 9.8479489679448307e-05, 0.0001339916925644502, 0.00011236945283599198, 0.00017458535148762167, 0.00015706247359048575, 0.00020496557408478111, 0.00014677649596706033, 0.00020617479458451271, 0.00019318392151035368, 0.00015712282038293779, 0.00017198307614307851, 0.00019988264830317348, 0.00015301442181225866, 6.373552605509758e-05, 0.00023358769249171019, 0.00020047469297423959, 0.00013692915672436357, 5.9201429394306615e-05, 0.00015406044258270413, 0.00013856902660336345, 0.00012148357200203463, 0.00025515130255371332, 0.00012459918798413128, 0.00022260015248320997, 7.5277428550180048e-05, 5.1512830395950004e-05, 0.00018118876323569566, 0.00010440586629556492, 0.00018353659834247082, 0.0001788311346899718, 0.00035007347469218075, 0.0001226495805894956, 0.00030326485284604132, 0.00015647463442292064, 0.00021453711087815464, 8.7029526184778661e-05, 0.00017340430349577218, } };
const TfArray<96, int> quant10_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*96] = { 
  /* [0][0][][] */ 45,127,27,24,32,-10,28,93,53,-55,-91,102,24,-39,85,-14,-127,-26,-2,-18,66,63,63,53,24,60,-33,34,-115,-26,19,98,-66,65,-114,127,-37,-1,25,115,62,-11,52,-15,-30,-101,44,-8,-60,-26,-80,-84,46,63,-50,47,69,-89,-86,-95,-127,-41,-127,-8,-109,65,73,-1,6,35,63,-11,-71,41,68,-1,12,-33,-127,42,19,-64,72,17,-90,-7,1,-52,-127,71,-127,21,94,44,89,64, -16,-5,55,127,33,94,-10,37,18,-38,-127,70,12,-127,-43,56,-86,12,113,45,127,5,103,127,84,110,14,3,45,40,-18,-36,20,127,-80,86,45,111,-11,-111,127,-19,127,84,-13,-127,127,-8,-27,-127,-70,-89,9,112,-55,-120,58,14,-76,-127,22,-127,-43,58,-65,116,127,-33,38,127,127,15,-127,24,18,-84,112,-41,19,127,1,4,106,-41,-92,-15,70,20,50,127,-65,-13,127,12,127,54, 68,-90,50,-13,3,-22,13,79,-6,34,-57,35,-34,26,46,-127,-55,-35,43,17,101,108,27,93,11,33,10,-23,105,-26,0,-2,-68,-31,-106,76,-9,-25,36,23,5,-4,3,127,-40,-71,28,2,-3,-73,-29,-68,70,-59,17,55,106,-108,-27,-111,-77,55,-42,-34,90,18,-69,41,27,3,56,24,-23,27,55,17,39,1,-84,12,23,-12,32,-38,-51,-21,69,-34,-95,36,-34,8,63,80,16,37, 
  /* [0][1][][] */ 96,59,93,85,36,-67,127,21,28,-127,-84,127,-42,-76,45,36,-69,-84,52,-25,-33,50,-119,-98,22,43,-113,127,-107,64,127,120,20,86,-41,55,-127,60,-44,-86,93,-127,-29,40,-127,-93,42,-4,-127,-36,-127,-32,38,-127,57,-35,-66,-40,-44,35,-1,-77,-30,23,-75,31,83,-82,-3,5,-42,-127,-53,83,125,-127,127,108,-116,-60,127,-127,-38,127,-52,17,-64,47,-5,13,-51,-2,22,-49,51,-16, -127,12,-122,93,-59,-127,-115,-127,84,-25,-2,-54,-66,-72,-59,54,-80,-127,127,127,74,-127,-74,-12,-127,79,-3,23,-1,4,-85,66,-127,70,127,-58,42,127,127,-75,-48,-26,4,21,-50,-108,-36,-68,-14,-101,-71,42,-7,52,36,-103,39,7,75,22,8,-32,-59,127,13,-127,108,127,40,52,-113,-69,-33,33,-127,-83,82,91,109,-104,-44,68,-127,63,14,-97,13,127,59,89,-50,-127,-79,-60,43,127, 82,-99,102,77,11,-65,52,79,-127,89,-95,34,-59,-36,-127,34,9,-27,54,18,-57,68,-30,-90,-16,43,127,-16,127,127,30,-101,2,-76,-60,65,-106,24,-12,-79,-5,85,19,25,-14,-109,35,-127,65,-103,-57,-24,70,-114,-127,67,127,8,-127,63,9,-2,13,28,127,-114,42,15,-20,-3,19,-35,-97,-127,28,15,59,-46,-107,-41,-25,-41,-6,116,-127,-20,127,11,-54,-48,36,21,52,127,4,2, 
  /* [0][2][][] */ 37,48,16,-65,39,-65,45,11,-54,-39,11,-71,12,31,86,53,-38,16,36,23,31,28,104,31,41,-2,62,52,-117,39,28,127,-14,-21,-117,-27,10,-36,58,-127,55,24,-29,-36,-30,12,-3,-25,-15,-7,-90,98,51,-100,-16,23,72,-8,-8,5,41,-40,42,11,-64,89,-105,-20,63,7,29,2,25,30,40,2,-60,-67,63,0,-3,-105,-10,-52,-73,65,-86,13,-105,7,40,-12,24,25,11,-32, -33,-1,127,-51,127,9,6,-25,-110,32,0,-74,127,17,28,-2,-8,33,93,-11,48,-31,127,25,95,-127,27,-5,18,38,15,50,23,4,0,-4,9,32,54,-36,6,-35,-91,-19,-9,16,-10,-51,-12,-96,-46,127,127,-104,-44,-127,36,127,-61,-20,105,-117,47,35,-17,31,-30,39,127,-11,47,17,-85,14,19,-43,-3,-127,0,-126,-12,-58,-74,-75,-99,127,47,20,57,5,51,5,11,6,14,-15, 25,-50,108,-73,30,-30,11,-10,-51,78,20,13,24,15,70,-1,12,13,86,18,18,38,-42,3,-5,-16,38,8,110,58,6,-107,-26,-61,-43,-7,-49,-53,-3,-59,-15,-63,41,8,-23,9,36,-58,7,-64,-54,75,48,-35,-21,17,60,23,-17,53,41,6,54,-17,107,10,-8,50,9,-21,67,21,3,0,27,-14,47,-66,98,-25,38,-19,-3,-60,-91,-2,70,-36,-74,9,69,20,52,28,14,-3, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant11_scale = { 96, { 0.010653900913894176, 0.0094657065346837044, 0.0029071455355733633, 0.0049885585904121399, 0.0088337631896138191, 0.0073665319941937923, 0.013212639838457108, 0.0081872697919607162, 0.0096693737432360649, 0.0077902995981276035, 0.004393736831843853, 0.0067686508409678936, 0.0098480293527245522, 0.0055111320689320564, 0.006087790708988905, 0.017629107460379601, 0.0047397646121680737, 0.0069050099700689316, 0.0021769935265183449, 0.0073342244140803814, 0.0053459652699530125, 0.013030270114541054, 0.0097577665001153946, 0.0095348889008164406, 0.046732895076274872, 0.0056566805578768253, 0.010240807197988033, 0.006986287422478199, 0.0084241339936852455, 0.0041189924813807011, 0.014968696050345898, 0.0056729507632553577, 0.0089403530582785606, 0.0055547547526657581, 0.0054822596721351147, 0.035360764712095261, 0.006662457250058651, 0.015573011711239815, 0.0072357924655079842, 0.0036207286175340414, 0.0073638311587274075, 0.012066029943525791, 0.0082845557481050491, 0.0047622262500226498, 0.0029714647680521011, 0.0037776953540742397, 0.006418042816221714, 0.005165324080735445, 0.0080405734479427338, 0.0032148484606295824, 0.0027048231568187475, 0.0038008166011422873, 0.0047331820242106915, 0.0056096184998750687, 0.0091856690123677254, 0.0054597663693130016, 0.0039116996340453625, 0.0061339172534644604, 0.0073747304268181324, 0.0041935252957046032, 0.0057057319208979607, 0.0047849980182945728, 0.0074343206360936165, 0.0066881487146019936, 0.0087279938161373138, 0.0062501439824700356, 0.008779485709965229, 0.0082262987270951271, 0.006690718699246645, 0.0073235086165368557, 0.0085115488618612289, 0.0065157716162502766, 0.0027140327729284763, 0.0099468016996979713, 0.0085367597639560699, 0.0058308173902332783, 0.0025209584273397923, 0.0065603139810264111, 0.0059006474912166595, 0.0051731020212173462, 0.010865038260817528, 0.0053057735785841942, 0.009478922002017498, 0.0032055184710770845, 0.0021935568656772375, 0.0077155120670795441, 0.004445886705070734, 0.0078154895454645157, 0.007615117821842432, 0.014907083474099636, 0.0052227540872991085, 0.012913845479488373, 0.006663117092102766, 0.0091355759650468826, 0.0037059548776596785, 0.007384028285741806, } };
const TfArray<96, int> quant11_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[96] = { 5525, 2200, -758, -831, 7441, 7032, 10792, 3090, -1320, 7373, 1270, -2937, 1903, 3124, -173, -1088, 4185, 11207, -354, -1215, 4443, 9888, 24021, -2405, -8147, -693, 8512, -144, -1114, 1113, 16197, -1138, 9283, 2275, 13072, -7095, -57, -6153, -287, 826, 1676, 3320, 3042, -632, 651, 2854, 2383, 3954, 3804, 2881, 5419, 1742, -2342, 2223, 1124, 1528, 3603, 3228, 17749, 2666, -306, 8532, 2536, 3322, 1168, 14859, -3147, 2101, 7346, -1143, 12713, 1891, 1904, 6046, 3170, 1655, -238, 5582, 1416, 5057, 2765, 3560, 10301, 1036, 2819, 3220, -161, -145, 24412, -2706, 244, -2421, 7318, 1911, -28, -520, };
const TfArray<1, int> tensor_dimension12 = { 1, { 96 } };
const TfArray<96, float> quant12_scale = { 96, { 0.00012982913176529109, 0.00011510704644024372, 0.00010396658763056621, 0.00015714990149717778, 9.3127790023572743e-05, 0.00010814870620379224, 8.2406324509065598e-05, 0.00012098807928850874, 0.0001460469065932557, 0.00010943185770884156, 0.00017393477901350707, 0.00014631998783443123, 0.00013744839816354215, 0.00013419393508229405, 0.00017461477546021342, 0.00019392445392441005, 0.00015743871335871518, 7.5915071647614241e-05, 0.00015247844567056745, 0.00013386401406023651, 0.00010492718138266355, 7.4097166361752898e-05, 4.1657844121800736e-05, 0.00017247197683900595, 9.0410569100640714e-05, 0.00021195250155869871, 9.6283176389988512e-05, 0.0001417056773789227, 0.00015055699623189867, 0.00014555513917002827, 5.390349542722106e-05, 0.00017526485316921026, 9.3469163402915001e-05, 0.00016194446652662009, 6.6680426243692636e-05, 9.8757423984352499e-05, 0.00028089655097573996, 0.00010993490286637098, 0.00014618957357015461, 0.00023026023700367659, 0.00018257639021612704, 0.00013675456284545362, 0.00012778538803104311, 0.00016735040117055178, 0.00015281302330549806, 0.00015536978025920689, 0.0001537934149382636, 0.00012432201765477657, 0.00015288649592548609, 0.00014929809549357742, 0.00013016445154789835, 0.00019102697842754424, 0.00013807343202643096, 0.00011975446250289679, 0.00016305287135764956, 0.00015385310689453036, 0.00011915231152670458, 0.00014089587784837931, 5.4330797865986824e-05, 9.7132193332072347e-05, 0.00029197410913184285, 7.9131023085210472e-05, 0.0001595944631844759, 0.00015110702952370048, 0.00020581585704348981, 6.4608808315824717e-05, 0.0001697089901426807, 0.00014761013153474778, 9.6980111266020685e-05, 0.00018322136020287871, 7.0243266236502677e-05, 0.00010751708032330498, 0.00014611387450713664, 8.7975880887825042e-05, 0.00013590599701274186, 0.00014653710240963846, 0.00014127284521237016, 0.00010376112186349928, 0.00017388422566000372, 0.00011508423631312326, 0.00013685357407666743, 0.00013226490409579128, 8.3628816355485469e-05, 0.00012074368714820594, 0.00013738434063270688, 0.00014207673666533083, 0.0001885603996925056, 0.00021856192324776202, 4.3675619963323697e-05, 0.00010566683340584859, 0.00020190281793475151, 0.00011551797797437757, 9.5064155175350606e-05, 0.00020728433446493, 0.00019095357856713235, 0.00012530801177490503, } };
const TfArray<96, int> quant12_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[96*1*1*16] = { 
  /* [0][0][][] */ -97,25,-8,-85,-5,-37,-66,-1,74,-45,25,-91,22,-127,50,-112, 
  /* [1][0][][] */ -101,29,6,-45,-55,-36,-95,75,-27,89,-37,-46,-7,6,13,127, 
  /* [2][0][][] */ -28,-34,-68,32,-88,-40,20,-42,-120,127,116,26,74,57,-3,85, 
  /* [3][0][][] */ -27,-82,-12,-34,-51,17,-30,-127,23,-3,11,-47,-45,-57,-117,-60, 
  /* [4][0][][] */ 43,-46,44,67,-11,22,-127,25,24,69,15,30,15,-21,-69,-65, 
  /* [5][0][][] */ -53,22,-34,-18,30,-54,-19,-51,127,-14,-24,-45,-4,-101,-84,-89, 
  /* [6][0][][] */ -18,-59,12,62,-74,31,15,-20,-63,-12,127,-26,40,17,-92,48, 
  /* [7][0][][] */ -1,108,101,-35,68,106,93,1,41,5,-88,-77,127,-10,0,107, 
  /* [8][0][][] */ -44,32,15,-15,27,19,90,127,-63,-55,-36,-124,7,80,-77,-36, 
  /* [9][0][][] */ -32,10,-26,-60,-64,-55,-55,-35,-2,3,127,27,-68,-100,115,-32, 
  /* [10][0][][] */ 7,-127,38,-37,-103,64,27,25,-8,-79,-15,17,-4,24,-59,-1, 
  /* [11][0][][] */ 52,-86,29,126,-102,-36,10,40,89,127,-30,-2,18,-72,-3,125, 
  /* [12][0][][] */ -118,-2,101,50,68,43,78,126,103,-119,114,33,-57,-58,-12,127, 
  /* [13][0][][] */ -23,-28,34,43,4,59,114,58,-96,-20,11,-16,-57,127,113,-45, 
  /* [14][0][][] */ 127,-80,100,18,80,42,96,68,33,22,44,-18,118,-32,0,-4, 
  /* [15][0][][] */ -1,84,-6,-45,25,127,-46,41,-28,-35,-39,-44,-24,70,0,-38, 
  /* [16][0][][] */ -26,26,106,-14,-16,76,-14,19,-16,-3,-27,16,75,-1,81,127, 
  /* [17][0][][] */ -41,76,100,-5,-28,-31,-8,-36,-127,99,34,34,-20,18,90,-19, 
  /* [18][0][][] */ -120,-26,-28,33,32,39,-17,-15,26,78,127,48,-7,86,-20,46, 
  /* [19][0][][] */ 40,121,63,43,22,-53,-3,-5,-7,127,16,96,12,29,-31,50, 
  /* [20][0][][] */ 72,-75,1,14,-56,36,10,8,-7,-90,-127,-3,119,-89,-25,-53, 
  /* [21][0][][] */ -62,-115,40,71,-63,-14,-127,68,-48,27,28,56,31,7,-21,5, 
  /* [22][0][][] */ 26,61,-96,-79,114,-47,-127,-5,92,87,17,100,-65,-40,42,5, 
  /* [23][0][][] */ -68,17,-40,-15,33,40,127,46,-9,91,13,16,-33,30,-58,-10, 
  /* [24][0][][] */ 33,-58,42,6,127,105,42,-11,20,16,26,6,-37,-20,21,10, 
  /* [25][0][][] */ 78,-63,79,52,17,1,17,110,75,-53,-11,-47,127,-4,63,71, 
  /* [26][0][][] */ 64,22,57,18,48,-10,-49,-27,2,15,37,127,-14,-68,42,-53, 
  /* [27][0][][] */ -43,34,-116,-21,-26,93,62,-127,90,-107,106,21,81,-23,90,56, 
  /* [28][0][][] */ -16,66,3,-3,-66,18,-7,-6,-71,127,-1,18,-22,60,-81,108, 
  /* [29][0][][] */ 64,127,-90,79,6,83,18,19,14,67,64,51,-65,70,-11,90, 
  /* [30][0][][] */ -45,49,-127,-41,48,-57,26,2,-98,105,16,-9,12,125,-68,90, 
  /* [31][0][][] */ 11,-82,86,28,45,-127,-105,35,0,45,16,-29,-38,39,-19,107, 
  /* [32][0][][] */ -60,39,55,55,-127,19,-42,64,-10,-62,68,7,-16,28,12,49, 
  /* [33][0][][] */ -51,4,64,127,5,50,-27,-1,-59,-60,-64,-42,-14,2,2,94, 
  /* [34][0][][] */ -22,60,-97,-111,86,-32,-19,75,26,19,-16,-6,-66,-19,-36,127, 
  /* [35][0][][] */ 81,31,-6,-41,18,27,-95,-15,-2,-127,-66,-16,-43,-44,60,21, 
  /* [36][0][][] */ 11,26,-108,-15,25,127,-4,2,-10,-6,10,25,9,-3,-14,21, 
  /* [37][0][][] */ 90,41,48,-89,108,-100,80,-62,-60,29,-126,-13,12,14,127,25, 
  /* [38][0][][] */ -33,37,38,-41,16,-32,-22,-116,68,27,-79,61,-48,-94,-127,-11, 
  /* [39][0][][] */ 24,20,-74,-48,-30,44,6,1,-54,16,25,-54,111,39,-127,-6, 
  /* [40][0][][] */ -39,27,-66,-89,-13,14,-4,-127,74,-44,-31,-42,-6,50,22,37, 
  /* [41][0][][] */ -75,-127,-54,93,-74,-2,-105,-9,8,1,73,-12,-46,-9,4,52, 
  /* [42][0][][] */ -18,98,41,-127,-23,-16,-114,-45,-31,39,2,26,120,-37,-87,-7, 
  /* [43][0][][] */ 14,70,-21,-9,97,6,11,19,15,-8,-5,-75,-127,-19,-44,-12, 
  /* [44][0][][] */ 74,-41,23,13,-19,34,-9,23,46,-75,6,-1,127,-36,-71,-54, 
  /* [45][0][][] */ -16,-52,-29,50,-27,-51,-2,54,3,-26,7,-4,-87,127,38,8, 
  /* [46][0][][] */ -22,-85,77,96,-53,-33,-70,54,-47,-29,10,0,25,30,73,127, 
  /* [47][0][][] */ -25,-33,-4,63,17,31,83,-5,31,-85,-127,-40,61,-4,-63,-5, 
  /* [48][0][][] */ -36,55,0,-43,3,42,-47,-127,44,-35,31,-45,78,-107,-17,-27, 
  /* [49][0][][] */ -64,11,24,-50,16,15,114,127,-51,9,0,9,-47,60,-65,55, 
  /* [50][0][][] */ 51,29,-51,67,5,-127,-63,-11,-71,56,-30,7,15,-80,-84,-39, 
  /* [51][0][][] */ -18,34,-20,127,-45,1,1,-53,-8,-85,-40,-2,-7,10,27,109, 
  /* [52][0][][] */ -127,4,36,13,54,47,111,18,23,-66,-47,-58,-98,-48,-115,-13, 
  /* [53][0][][] */ 5,2,-81,-127,-14,-15,70,54,47,-110,-74,11,-37,2,97,55, 
  /* [54][0][][] */ -3,-72,9,-16,-19,83,59,-17,67,-92,10,8,-21,-24,-127,30, 
  /* [55][0][][] */ 15,-14,-52,-12,84,-3,70,60,-20,-90,-127,-21,38,-69,-6,4, 
  /* [56][0][][] */ 42,-99,-44,4,-127,2,-122,25,-71,-26,15,51,111,-7,61,14, 
  /* [57][0][][] */ -49,0,29,48,127,6,86,79,-19,18,-15,-28,-57,64,-57,40, 
  /* [58][0][][] */ 46,34,-29,-46,90,7,-23,-66,72,-127,-50,-1,-59,13,-59,18, 
  /* [59][0][][] */ -61,33,-34,-48,65,103,-82,-83,102,127,-82,-2,20,-68,-48,-26, 
  /* [60][0][][] */ 30,-32,18,23,-127,-12,-21,18,-3,10,-54,17,26,-35,48,3, 
  /* [61][0][][] */ -23,86,-82,-12,-52,-47,-127,-22,-77,51,69,81,70,-15,48,106, 
  /* [62][0][][] */ 25,-15,4,11,-7,23,79,112,49,36,18,63,-12,5,127,113, 
  /* [63][0][][] */ 35,-99,-40,-22,-63,-10,44,-39,1,-5,-4,8,-19,127,115,15, 
  /* [64][0][][] */ -19,84,-29,-31,44,17,12,40,-45,5,-29,9,-16,-33,-68,127, 
  /* [65][0][][] */ 32,-34,127,40,23,-37,111,46,-22,9,-113,7,83,100,-77,-23, 
  /* [66][0][][] */ -36,-127,5,-98,-30,-75,44,-31,15,-35,-27,73,-19,-38,-46,17, 
  /* [67][0][][] */ 28,-62,-91,-48,-38,127,20,-106,-4,-45,-33,-44,18,1,-50,-37, 
  /* [68][0][][] */ 127,13,21,-1,-58,42,-17,-59,-65,-97,8,22,65,-9,56,-87, 
  /* [69][0][][] */ 28,2,26,-34,-2,-84,-30,20,-6,127,-15,4,8,25,52,-18, 
  /* [70][0][][] */ 22,-38,-16,50,-127,-8,2,-67,52,127,35,61,73,-54,-19,-10, 
  /* [71][0][][] */ 121,-71,67,51,-61,-12,45,-50,99,-14,-91,41,59,-127,38,-8, 
  /* [72][0][][] */ -20,-62,53,97,126,7,-101,109,80,-36,31,-27,-22,-74,-119,127, 
  /* [73][0][][] */ 29,-17,97,-37,106,-30,-116,72,-35,127,-37,-46,58,-73,-25,-11, 
  /* [74][0][][] */ 54,-3,51,59,-123,-35,13,13,-127,12,49,-29,46,-14,-12,39, 
  /* [75][0][][] */ 74,100,-61,40,8,65,-48,-28,-46,-35,97,72,-127,105,27,88, 
  /* [76][0][][] */ -97,-25,11,-40,-33,-38,93,-12,-94,59,108,56,-32,-127,9,91, 
  /* [77][0][][] */ -28,127,-42,-63,15,-73,-77,72,44,-79,5,61,-61,33,-56,60, 
  /* [78][0][][] */ 127,45,-86,23,-67,40,-98,-49,4,-12,-87,19,44,-107,9,44, 
  /* [79][0][][] */ -74,-2,104,-18,16,-105,-64,-17,27,67,50,35,-47,47,-127,62, 
  /* [80][0][][] */ 60,74,66,-127,-75,31,85,-96,-13,-2,31,104,60,-80,-58,-65, 
  /* [81][0][][] */ 25,-22,11,-89,107,58,-18,32,72,49,74,26,-97,83,-100,-127, 
  /* [82][0][][] */ 2,-24,127,31,67,-82,16,68,2,123,-35,54,57,-66,13,-49, 
  /* [83][0][][] */ -87,38,31,27,114,39,56,112,-26,102,24,-43,-127,58,-46,-41, 
  /* [84][0][][] */ -59,-127,4,83,21,-2,-65,25,-48,95,-89,-14,-93,10,-6,-54, 
  /* [85][0][][] */ -28,33,8,-63,14,-56,-104,-79,20,7,-29,-27,-127,-105,-25,-18, 
  /* [86][0][][] */ 47,92,40,74,78,-70,111,36,27,-11,-25,-36,-5,123,-127,-54, 
  /* [87][0][][] */ 19,71,127,-52,-90,-50,23,-21,46,-7,-11,67,-39,9,-28,-54, 
  /* [88][0][][] */ -26,-91,-78,52,39,14,-13,13,-14,-44,-117,-87,127,-3,29,78, 
  /* [89][0][][] */ 30,58,13,-76,21,-44,-27,58,127,-29,7,-86,-19,-55,46,-59, 
  /* [90][0][][] */ 6,65,-5,45,-29,18,37,106,14,-70,5,85,-1,13,11,127, 
  /* [91][0][][] */ -15,1,8,26,61,29,-40,-106,-33,39,-28,21,-122,-127,3,1, 
  /* [92][0][][] */ -43,-12,49,22,-127,-8,-26,67,-57,43,33,56,6,-25,52,24, 
  /* [93][0][][] */ 48,-5,65,9,-127,-63,-6,41,-19,-33,-5,-44,14,-57,6,-2, 
  /* [94][0][][] */ -16,-127,24,-116,24,23,-18,-13,92,-10,-9,78,42,42,-48,24, 
  /* [95][0][][] */ -14,-63,4,-88,127,104,-41,16,88,51,-101,70,-94,71,-40,10, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant13_scale = { 96, { 0.0018427069298923016, 0.0016337515553459525, 0.0014756313757970929, 0.0022304793819785118, 0.0013217928353697062, 0.0015349895693361759, 0.0011696196161210537, 0.0017172229709103703, 0.0020728909876197577, 0.0015532016986981034, 0.0024687126278877258, 0.0020767669193446636, 0.0019508495461195707, 0.0019046579254791141, 0.002478363923728466, 0.0027524323668330908, 0.0022345785982906818, 0.0010774871334433556, 0.0021641759667545557, 0.0018999752355739474, 0.0014892653562128544, 0.0010516850743442774, 0.00059126323321834207, 0.0024479504209011793, 0.0012832264183089137, 0.0030083104502409697, 0.0013665782753378153, 0.0020112744532525539, 0.0021369040478020906, 0.0020659111905843019, 0.00076506973709911108, 0.0024875907693058252, 0.0013266380410641432, 0.0022985301911830902, 0.00094641686882823706, 0.0014016960049048066, 0.0039868555031716824, 0.0015603415668010712, 0.0020749159157276154, 0.0032681580632925034, 0.0025913657154887915, 0.0019410017412155867, 0.0018136993749067187, 0.0023752583656460047, 0.0021689245477318764, 0.0022052135318517685, 0.0021828396711498499, 0.0017645425396040082, 0.0021699673961848021, 0.0021190361585468054, 0.0018474662210792303, 0.0027113077230751514, 0.0019597208593040705, 0.0016997137572616339, 0.0023142620921134949, 0.0021836869418621063, 0.0016911672428250313, 0.0019997807685285807, 0.00077113456791266799, 0.001378628658130765, 0.0041440827772021294, 0.0011231321841478348, 0.0022651758044958115, 0.0021447108592838049, 0.0029212110675871372, 0.00091701367637142539, 0.0024087345227599144, 0.0020950783509761095, 0.0013764700852334499, 0.0026005199179053307, 0.000996985356323421, 0.0015260246582329273, 0.0020738414023071527, 0.0012486701598390937, 0.0019289577612653375, 0.0020798484329134226, 0.0020051312167197466, 0.0014727151719853282, 0.0024679950438439846, 0.0016334278043359518, 0.0019424071069806814, 0.0018772785551846027, 0.001186970854178071, 0.0017137541435658932, 0.0019499404588714242, 0.0020165410824120045, 0.0026762986090034246, 0.0031021200120449066, 0.00061990221729502082, 0.0014997635735198855, 0.0028656718786805868, 0.0016395839629694819, 0.0013492762809619308, 0.0029420536011457443, 0.0027102658059448004, 0.0017785370582714677, } };
const TfArray<96, int> quant13_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[16] = { -32098, -11348, 15588, 2754, -4080, -15798, 1016, 5435, 1031, 268, 18518, 17368, 7547, -27880, -438, 7785, };
const TfArray<1, int> tensor_dimension14 = { 1, { 16 } };
const TfArray<16, float> quant14_scale = { 16, { 4.7258476115530357e-05, 5.7411540183238685e-05, 2.8655695132329129e-05, 3.6548080970533192e-05, 9.5501716714352369e-05, 0.00011457963410066441, 6.0027952713426203e-05, 4.4917775085195899e-05, 9.4636874564457685e-05, 8.1906357081606984e-05, 5.6898908951552585e-05, 5.0262955483049154e-05, 5.214986958890222e-05, 7.8008706623222679e-05, 4.7336707211798057e-05, 6.7280023358762264e-05, } };
const TfArray<16, int> quant14_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[16*1*1*96] = { 
  /* [0][0][][] */ 19,26,11,13,-51,-98,-14,-35,8,-40,44,11,60,-76,40,38,-89,-3,20,25,92,-14,-73,6,-17,63,115,45,16,104,47,-34,11,16,49,34,23,19,17,-5,127,67,28,-5,-5,14,31,-7,32,-82,74,-21,-82,-41,10,85,-7,-15,-12,33,-13,58,-43,-10,53,11,78,1,10,-12,17,49,11,42,3,17,56,-41,48,26,5,37,29,49,-41,-8,27,88,12,25,-85,-28,28,9,124,84, 
  /* [1][0][][] */ 23,-1,-19,10,12,13,76,-61,-56,-15,-59,5,8,-48,-19,-18,-20,-24,-45,-5,4,-97,127,7,6,6,11,59,-55,34,-61,24,-10,5,4,66,-20,50,-39,74,24,39,57,-54,50,-82,4,32,-75,20,63,-106,-16,56,-2,52,59,43,-93,9,-49,25,-13,9,31,11,50,91,-43,-118,-14,65,36,89,-31,45,-57,-9,95,14,14,-44,39,-20,-5,-29,-19,37,-17,-48,22,11,48,-19,-29,57, 
  /* [2][0][][] */ -30,-16,9,-32,101,23,-47,42,-84,16,-12,-16,9,-20,45,38,25,-22,-127,-14,18,-38,-43,26,11,-23,-44,23,-45,-2,28,70,-41,-42,-20,38,-32,-2,-16,-38,22,32,0,35,-1,30,-33,-41,-81,-7,-29,28,-52,44,43,-108,52,-31,59,19,-13,-89,-46,50,9,-13,6,-30,-27,13,1,-80,24,47,4,50,-64,-10,-1,-95,26,41,21,-106,-31,-73,-28,-44,-17,-37,-32,-15,24,-14,89,-66, 
  /* [3][0][][] */ 37,-41,-24,-99,35,-19,96,29,8,127,-97,-14,-13,-41,32,80,66,57,-29,47,-31,34,-15,12,-1,65,56,19,-21,-15,-21,64,-19,-15,16,-33,-7,-57,13,45,13,-3,-119,33,48,-50,0,43,40,-34,11,-6,68,30,65,-41,1,-106,0,-18,1,-18,60,1,-25,-6,107,-49,-43,13,-65,-13,59,-78,-42,-66,3,-31,107,-73,0,-72,-81,-98,-55,-80,50,50,4,76,-55,-100,75,-79,-9,-9, 
  /* [4][0][][] */ -12,10,58,-5,-30,2,-21,-41,45,-18,20,12,26,15,-52,35,-10,-50,-30,-55,-2,-44,-24,22,-28,-20,-17,11,-8,127,-51,-13,5,-25,3,10,52,32,-36,19,28,36,37,-47,-2,-8,68,-7,8,-22,-33,-27,-28,21,9,42,4,63,-18,26,-21,-22,-2,5,49,2,-49,17,-2,-4,9,-27,13,63,74,54,-14,19,-46,58,3,59,47,-17,33,-25,1,-28,-24,-54,-10,43,-11,27,8,-8, 
  /* [5][0][][] */ 12,-20,93,-19,-25,-23,-29,-31,29,10,-1,4,-1,-32,0,2,-28,0,-43,-50,-36,-23,-25,-31,0,-46,57,-28,38,66,-18,68,18,-72,14,9,-23,-39,-7,22,-32,18,-17,15,6,21,-82,21,-24,16,27,-13,49,-82,0,46,19,-61,-30,-21,34,39,38,69,-15,-7,90,-16,12,-22,-2,5,-11,13,81,-10,3,-34,127,63,-20,21,-26,19,35,70,27,93,19,-29,24,37,20,-74,-32,47, 
  /* [6][0][][] */ -32,-76,49,20,-84,49,-11,-90,22,-42,-45,95,-3,-11,-39,116,-7,21,-1,-42,-43,-44,-75,-33,19,-51,-25,72,-92,106,-43,-14,-31,104,-1,61,-19,-20,20,-25,-14,109,82,-66,26,91,-7,6,8,11,-58,-127,99,16,-89,35,24,-23,-6,-14,2,-33,26,-10,45,-36,-39,-3,-90,31,14,-4,32,-38,59,-47,32,16,-23,27,-48,101,32,-41,36,-26,10,8,-67,30,-66,104,76,-93,80,-106, 
  /* [7][0][][] */ -29,-6,-54,26,4,-3,17,-10,-127,9,48,37,-10,-41,-4,-39,-27,25,-8,0,-12,-1,-58,-38,21,19,-36,65,-16,23,42,20,-39,-93,24,84,-10,13,-52,-9,-25,-14,-31,-33,-8,2,11,54,18,61,-43,11,29,-31,66,-88,8,10,-56,-23,36,-48,-11,-38,42,-28,82,-18,-38,-21,59,-16,-16,-28,-75,-47,32,-22,74,-55,-3,19,-39,-48,19,21,-75,31,-8,25,14,-54,79,-24,62,-14, 
  /* [8][0][][] */ 0,-47,27,-9,-39,-23,19,-33,18,16,49,54,16,19,-60,0,51,7,-9,-5,-14,-74,-11,-9,-45,-42,37,2,-4,64,-9,-24,-18,7,30,44,-34,-12,21,-11,11,48,93,-65,19,14,69,-5,31,-49,29,-16,-14,-2,-62,65,-12,127,-37,4,-1,-20,-51,-17,-53,-16,-10,2,-14,22,39,-2,-24,-80,67,-103,20,14,-72,31,-18,-5,22,71,61,-39,-24,17,-49,51,19,27,-66,19,1,-49, 
  /* [9][0][][] */ 25,-43,23,35,42,51,4,55,-61,9,32,48,-12,51,59,-7,-9,21,-8,-26,7,23,2,13,-34,32,18,25,23,-37,6,3,-3,-27,-15,3,2,-26,40,12,-19,-47,-55,-4,-5,4,-54,27,-44,43,-22,28,112,5,1,-26,30,-43,-32,33,-29,-8,51,40,5,-10,17,33,28,-15,-33,26,19,-127,-39,-74,-37,2,32,-1,-21,9,-19,-68,52,15,-47,1,23,92,35,-2,13,41,-8,30, 
  /* [10][0][][] */ 24,38,-11,7,6,12,-36,2,53,7,-61,2,-3,15,11,-76,-29,-14,15,-19,31,9,-39,-24,31,-20,-88,51,-32,19,22,22,-2,16,-61,-45,22,-6,-7,-3,28,-16,14,-48,-41,-24,-2,3,4,12,-5,-4,-21,-13,23,-9,-30,-17,14,-12,0,-61,-30,21,-24,-27,-94,-22,-60,-7,47,-28,-7,19,27,19,37,-12,-80,-10,-22,34,-14,-27,-9,-8,-89,-127,-16,38,-12,-18,70,-46,23,9, 
  /* [11][0][][] */ -3,-50,13,-10,-39,36,21,-12,25,-26,-39,-59,22,3,16,5,-4,46,50,-43,28,57,30,4,17,21,64,9,48,-68,-14,29,20,80,-106,-27,12,-32,35,-2,-46,45,-36,22,-33,-47,-51,-22,64,-33,-48,13,-65,-22,-74,65,-19,-38,0,-31,17,-37,-18,-77,-21,-64,-127,-96,17,-52,-47,28,40,5,-9,22,21,30,-77,-69,-35,23,-21,-40,-7,-10,54,77,31,-50,3,-54,-66,27,79,8, 
  /* [12][0][][] */ -2,59,-98,-66,42,-22,8,84,33,-53,-22,-29,-38,-63,29,32,35,-73,-40,20,24,54,-28,20,-11,-12,-127,4,65,-34,49,3,-45,-80,58,-20,30,-46,27,16,-10,-50,-16,50,48,-54,16,-44,-101,-26,-90,81,44,-56,47,-69,-38,-14,-21,-49,60,17,41,6,-19,7,78,22,89,47,18,41,12,-15,-32,16,-44,-91,70,-105,18,-45,-2,-78,-12,-37,-30,-101,31,46,-73,-30,58,11,16,-18, 
  /* [13][0][][] */ -5,-25,-87,46,32,36,-9,11,31,58,-32,69,-42,-36,38,-10,21,32,43,16,-4,-48,9,27,26,51,6,26,10,53,24,0,-12,35,9,92,25,-32,-60,-51,9,3,40,5,38,16,-14,26,-41,30,11,-9,20,-25,20,19,48,-22,-64,10,1,26,-22,-18,8,56,89,64,9,4,-54,23,38,48,-63,77,0,-42,127,-5,-27,-35,28,19,14,52,-14,24,-7,-44,-16,28,39,25,56,36, 
  /* [14][0][][] */ 11,77,-4,19,-89,-47,31,41,-64,1,74,11,-81,9,60,-54,-38,80,-84,49,2,44,-127,31,-95,11,-46,-106,6,-13,61,83,-79,44,59,-15,-54,-50,-10,-61,8,-18,90,-31,4,72,-45,45,-25,-110,80,60,-51,11,15,64,-119,43,40,15,51,54,13,23,-3,-13,6,-83,59,76,86,30,-70,45,-37,-7,14,-25,27,-13,-74,112,-12,-108,58,-23,-20,-16,-121,22,-25,29,-33,-3,59,33, 
  /* [15][0][][] */ 59,-23,10,33,55,32,-3,7,-3,10,-54,-23,28,46,0,-20,-5,8,-53,33,-2,10,7,7,54,-25,64,23,17,-35,-17,45,40,29,-31,-85,45,44,26,28,51,-3,-51,12,-29,-127,-11,-32,-28,36,-21,16,4,-24,-1,-21,-4,-11,-35,19,-9,-57,-39,35,14,20,-42,31,-10,-27,-2,-2,-1,-103,-33,-53,-19,9,-60,19,37,-16,37,12,-37,-1,-22,-13,28,59,7,-97,-6,-31,28,-30, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 16,1,1,96 } };
const TfArray<16, float> quant15_scale = { 16, { 0.0020084851421415806, 0.0024399904068559408, 0.0012178670149296522, 0.0015532934339717031, 0.0040588229894638062, 0.004869634285569191, 0.0025511879939585924, 0.0019090054556727409, 0.0040220669470727444, 0.0034810199867933989, 0.0024182035122066736, 0.0021361755207180977, 0.0022163693793118, 0.0033153698313981295, 0.0020118099637329578, 0.0028594010509550571, } };
const TfArray<16, int> quant15_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[96] = { -79, 2308, -11820, 7776, -5498, -2917, -164, -2727, 4704, -13644, 5969, -2604, 4963, -6245, -5674, -7615, -1819, 3237, -10373, -1127, -963, -440, -5720, 8201, 41, 13442, -9984, -5055, -7476, -1832, -6694, -5011, 14765, -1485, -485, -2857, -4717, 11571, -2359, 9906, -386, -3651, 770, 13484, -1099, -5184, 474, 4951, -9506, -1660, 4264, 1093, -7807, -3878, -8001, 10288, -5570, 3877, 2828, 1950, -3720, 4452, -10002, 7212, 3706, 242, 8689, 6755, 9206, -931, 4722, 2043, 3556, 6642, -1903, -511, 13641, 6685, 7644, 17000, 13656, -1250, 7604, 10786, -371, -9968, 8996, -6157, 13407, -849, -7840, 339, -2516, -2989, 15219, -941, };
const TfArray<1, int> tensor_dimension16 = { 1, { 96 } };
const TfArray<96, float> quant16_scale = { 96, { 0.00012524116027634591, 0.00029482279205694795, 7.3202325438614935e-05, 0.00012865412281826138, 0.0002045331202680245, 0.00048762850929051638, 6.8569010181818157e-05, 0.00016255669470410794, 0.00028421267052181065, 6.7040702560916543e-05, 0.00023848240380175412, 0.00013968042912892997, 8.8981883891392499e-05, 6.1396960518322885e-05, 0.00012193702423246577, 0.0001268555351998657, 0.00017441977979615331, 0.00024700327776372433, 0.00010190208558924496, 0.00027550867525860667, 0.0002072751522064209, 0.00023123274149838835, 0.00016313117521349341, 7.183569687185809e-05, 0.0011037024669349194, 8.8131600932683796e-05, 0.00018596644804347306, 8.5481166024692357e-05, 0.00024165214563254267, 0.00030840415274724364, 0.00014743953943252563, 0.00017274974379688501, 7.5617550464812666e-05, 0.00030235984013415873, 0.00012194797454867512, 0.00017006830603349954, 0.00013179998495616019, 9.236878395313397e-05, 0.00017102913989219815, 0.00010106269473908469, 0.00052552105626091361, 0.00021396586089394987, 0.00030585029162466526, 0.00010613627091515809, 0.00010973607277264819, 0.00024917151313275099, 0.00015563846682198346, 0.00013734350795857608, 9.89230175036937e-05, 0.0003552472626324743, 0.00020200123253744096, 0.0001900795177789405, 7.8681121522095054e-05, 0.00021589534298982471, 0.00031575377215631306, 0.00013162680261302739, 0.0001399885950377211, 0.00048468325985595584, 0.00032723252661526203, 0.00026182094006799161, 0.00019995294860564172, 0.0002744338707998395, 0.00011473969789221883, 0.00014200969599187374, 0.00022998619533609599, 0.00022684052237309515, 0.00013601180398836732, 0.00012456376862246543, 0.00016143187531270087, 0.00023350671108346432, 0.00013270323688630015, 0.00015840189007576555, 0.00013571734598372132, 0.00020754607976414263, 0.00017847531125880778, 0.00029061315581202507, 6.5282649302389473e-05, 0.00018708496645558625, 0.00012399999832268804, 0.00018809063476510346, 5.3354568080976605e-05, 0.00036116686533205211, 0.00012725291890092194, 0.00035465473774820566, 0.00010243884025840089, 9.341201075585559e-05, 0.00016702653374522924, 0.00017022539395838976, 9.3566508439835161e-05, 0.00028869402012787759, 0.00010438991012051702, 0.00015727152640465647, 0.0002899280225392431, 9.268047142541036e-05, 0.00011727817764040083, 0.00021212415595073253, } };
const TfArray<96, int> quant16_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*96] = { 
  /* [0][0][][] */ 60,-32,37,-4,127,26,60,-32,-32,39,-36,-41,19,22,-58,-37,-5,-2,51,16,-19,41,92,-27,-14,0,-32,78,39,-8,88,28,-66,5,-30,-43,40,-112,12,-63,2,-32,65,-127,-78,92,127,-27,58,18,-76,71,-35,-27,86,-73,28,-67,-32,-51,47,-67,18,36,23,-18,-40,-63,-47,65,-100,-7,36,-24,-29,-30,23,41,127,-75,-27,8,-120,-58,-7,5,-21,-6,-104,0,-5,-123,22,56,20,-41, 85,30,71,-30,-44,0,107,-34,-26,8,-69,1,-7,15,-102,60,2,70,85,-11,-22,127,41,73,9,4,36,124,127,30,127,-19,-57,-9,-127,-17,-2,-109,127,-63,-23,-30,4,-51,38,-20,4,-34,57,0,-5,127,-95,-6,-55,-14,-18,-30,-11,-5,8,-120,-79,43,-8,5,-25,-56,-31,57,-48,57,-123,-50,9,-36,-104,-17,23,-112,-113,18,27,-53,62,86,-79,57,-96,12,-8,-11,37,127,1,-127, 6,-22,36,3,103,16,57,-74,-43,66,-41,33,-13,52,-13,127,7,-5,-20,-22,-41,-28,127,-30,-7,-43,-24,14,30,127,21,23,-30,7,-30,118,48,-56,-6,-50,-13,-14,52,-87,33,-23,-68,-50,-8,-3,-37,41,-15,-7,46,-51,60,-23,5,-58,-3,1,4,-35,-19,-24,127,-127,-26,30,60,-9,92,-57,-33,15,-62,28,-27,-127,-53,-26,-127,-65,61,-14,5,-32,-14,-5,11,71,43,126,61,-10, 
  /* [0][1][][] */ -3,-10,73,-35,90,99,-50,1,-11,35,-60,48,-127,98,31,-4,-12,12,60,43,38,14,1,-94,78,55,65,127,-5,-22,6,21,-127,-14,59,-8,30,-5,-45,-127,-11,-20,38,-59,-85,127,46,-98,127,78,-33,-26,-73,66,55,-70,24,-16,11,-20,19,-36,127,-127,14,21,-20,-63,-35,-13,-127,13,127,113,-3,-89,-24,-27,-53,-13,-127,-20,-47,-27,111,60,-127,31,-56,127,127,-112,127,-31,-93,-4, 127,127,111,106,-103,-127,127,-36,127,127,-88,-28,-44,119,-21,47,127,-127,99,127,127,-13,-45,-127,-127,-127,127,120,-81,24,-19,127,-32,127,99,-54,127,127,8,46,127,59,-127,-42,127,-18,71,127,62,-110,127,-68,105,127,-127,127,-37,127,-127,127,-88,127,115,-28,127,127,-27,122,-127,-127,58,-127,-51,127,127,63,-1,-127,90,-26,14,127,125,127,122,79,-19,127,-55,32,10,-23,-106,-51,-127,-8, -75,-106,127,-31,69,100,-47,-1,-52,19,-12,127,-105,127,48,89,-13,23,127,16,-27,-38,81,-83,53,-16,91,5,12,71,51,17,-122,-26,109,127,15,-47,-29,-43,-31,107,31,-34,-15,-62,-103,-125,40,127,-47,-42,127,53,107,-81,127,-2,62,-37,-21,-15,-73,-55,-62,-6,-49,-16,-55,-22,0,-23,-30,-101,28,127,-64,-27,-39,-30,-68,-31,-22,-38,45,127,45,90,-83,-64,79,127,-21,-77,-56,30, 
  /* [0][2][][] */ -86,-34,31,-31,22,-5,36,63,-4,67,22,-81,27,-21,78,-42,10,-16,-57,-36,-9,-33,-42,-99,12,-74,-19,-41,13,-43,9,24,-10,11,-4,-82,-15,-87,1,-110,-19,-19,9,-62,-18,64,35,-22,-18,-3,-62,-29,102,-23,30,-46,-8,-38,-5,-6,7,-23,9,-72,-17,-51,122,71,-23,-3,-113,-37,-73,-16,-15,-36,127,10,-21,15,-116,33,-45,-62,12,33,-46,-39,-36,-21,6,-87,-28,-23,-34,3, -46,-38,36,-127,-46,-7,122,127,-52,67,127,-63,-4,29,127,88,13,-43,13,-87,-28,-47,4,-8,-9,-18,23,-35,3,-13,-42,-41,-37,-8,-108,-3,-88,-94,30,-2,-19,-14,-55,52,-7,-5,-63,-38,55,-8,-36,-49,111,25,-28,-37,20,-29,13,-42,127,8,114,-42,-73,-88,-47,16,71,7,36,-32,-107,-41,0,-4,73,-71,-9,106,-113,-6,-2,-40,-37,-113,-10,-18,-40,-18,18,-19,11,-95,-35,126, -50,27,39,-82,29,3,32,82,-27,31,6,43,51,27,46,11,5,-18,-84,-34,-7,-60,22,-18,28,-51,-20,-114,23,45,28,13,-28,16,27,67,7,-59,-9,-93,-35,127,-13,-32,63,-5,-110,1,-12,28,-36,-33,88,-20,87,-38,69,2,-24,-29,24,12,37,-10,-75,-43,-52,53,-27,-13,50,-38,-117,-77,-20,6,12,13,93,-22,-44,-14,-109,-14,-127,60,65,-36,-127,-9,20,32,0,-31,-28,-27, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,96 } };
const TfArray<96, float> quant17_scale = { 96, { 0.0056199268437922001, 0.013229535892605782, 0.0032847963739186525, 0.0057730758562684059, 0.0091779818758368492, 0.021881276741623878, 0.0030768862925469875, 0.007294380571693182, 0.01275342982262373, 0.0030083067249506712, 0.010701382532715797, 0.006267857737839222, 0.0039928699843585491, 0.0027550559025257826, 0.0054716607555747032, 0.0056923679076135159, 0.0078267110511660576, 0.011083738878369331, 0.0045726359821856022, 0.012362857349216938, 0.0093010244891047478, 0.010376069694757462, 0.0073201591148972511, 0.0032234718091785908, 0.049526263028383255, 0.0039547150954604149, 0.0083448430523276329, 0.0038357826415449381, 0.010843617841601372, 0.013838970102369785, 0.0066160308197140694, 0.0077517717145383358, 0.0033931741490960121, 0.013567744754254818, 0.0054721520282328129, 0.0076314476318657398, 0.0059142396785318851, 0.0041448497213423252, 0.0076745632104575634, 0.0045349700376391411, 0.023581622168421745, 0.0096012558788061142, 0.013724370859563351, 0.0047626360319554806, 0.0049241692759096622, 0.01118103414773941, 0.0069839400239288807, 0.0061629931442439556, 0.0044389567337930202, 0.01594095304608345, 0.0090643689036369324, 0.0085294079035520554, 0.003530645277351141, 0.0096878372132778168, 0.014168768189847469, 0.0059064682573080063, 0.0062816860154271126, 0.021749114617705345, 0.014683852903544903, 0.011748649179935455, 0.0089724566787481308, 0.012314627878367901, 0.0051486962474882603, 0.0063723782077431679, 0.010320133529603481, 0.010178978554904461, 0.006103235762566328, 0.0055895298719406128, 0.0072439070791006088, 0.010478109121322632, 0.0059547713026404381, 0.0071079428307712078, 0.0060900226235389709, 0.0093131819739937782, 0.0080086942762136459, 0.013040637597441673, 0.0029294178821146488, 0.0083950338885188103, 0.0055642323568463326, 0.0084401611238718033, 0.0023941709659993649, 0.016206583008170128, 0.0057101999409496784, 0.015914365649223328, 0.0045967218466103077, 0.0041916621848940849, 0.0074949548579752445, 0.0076384968124330044, 0.0041985949501395226, 0.012954520992934704, 0.0046842717565596104, 0.007057220209389925, 0.013009893707931042, 0.0041588358581066132, 0.0052626049146056175, 0.0095186131075024605, } };
const TfArray<96, int> quant17_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[96] = { 1358, 2693, 422, 4643, 12851, 14716, 1680, 2304, 12829, 272, 16359, 2491, -215, 672, 4017, -817, 9333, 5272, -611, 8125, 1405, 4731, -1029, 2965, -4477, 1316, 2350, 3566, 7977, -2727, 8248, 4146, 1941, 16669, 2378, 5086, 4168, 4926, 3397, 1626, 26881, -1112, 343, -967, 2591, 14936, 4433, 6154, 1997, 102, 2054, 10518, 2542, -2925, 19882, 458, 114, 20068, 391, 11763, 2711, 29816, 2808, -278, 23729, 14133, 1976, 7731, 11023, 8541, 3932, 1204, -1811, 13876, 340, 5627, -812, 12234, 4544, 41960, 1445, 6020, 3595, 36165, -1317, 8134, 9429, 2204, -380, 2293, 2838, 7868, 2999, 291, 8085, 9934, };
const TfArray<1, int> tensor_dimension18 = { 1, { 96 } };
const TfArray<96, float> quant18_scale = { 96, { 0.0001613494532648474, 0.00022712233476340771, 0.00019091210560873151, 0.00010042301437351853, 6.603599467780441e-05, 6.1769955209456384e-05, 0.00012207112740725279, 0.00017496387590654194, 6.5270040067844093e-05, 0.00017891656898427755, 5.6432018027408049e-05, 0.00012883107410743833, 0.00011958630784647539, 0.00026357470778748393, 0.00012145849905209616, 0.00017888436559587717, 7.7998891356401145e-05, 0.00012063494068570435, 0.00011160017311340198, 9.0969020675402135e-05, 0.00021347962319850922, 0.00013426691293716431, 0.00025983742671087384, 0.00010729934001574293, 0.00013461623166222125, 0.00013414894056040794, 0.00018323298718314618, 0.00012584780051838607, 0.00010275535169057548, 0.00013278199185151607, 8.7799409811850637e-05, 0.0001259328710148111, 0.00011908000305993482, 5.0496033509261906e-05, 0.00019117923511657864, 0.00010220233525615185, 0.00012351153418421745, 0.00011861273378599435, 0.00011636465933406726, 0.00019532036094460636, 3.6342811654321849e-05, 0.00018144235946238041, 0.00016002611664589494, 0.00010620395187288523, 0.00014258577721193433, 5.6747128837741911e-05, 0.00013406526704784483, 0.00011017442739102989, 0.0001560004020575434, 0.00016569602303206921, 0.00021666659449692816, 6.9843466917518526e-05, 0.00015669639105908573, 0.00014500069664791226, 4.9303605919703841e-05, 0.00016542125376872718, 0.00016382994363084435, 4.8393056204076856e-05, 0.00015966931823641062, 5.9409114328445867e-05, 0.00012376229278743267, 3.5453045711619779e-05, 0.00017337422468699515, 0.00017052060866262764, 4.314278339734301e-05, 6.4059451688081026e-05, 0.00016362234600819647, 8.7280452135019004e-05, 7.9170866229105741e-05, 7.7335098467301577e-05, 0.00011917750089196488, 0.00014817439659964293, 0.00019583932589739561, 6.469294021371752e-05, 0.00017403342644684017, 0.00013778645370621234, 0.00023499449889641255, 7.1151815063785762e-05, 0.0001287101476918906, 2.8975660825381055e-05, 0.00014053256018087268, 6.663922977168113e-05, 0.0001036871035466902, 3.0055136448936537e-05, 0.00012214379967190325, 8.1361416960135102e-05, 8.1565362052060664e-05, 0.00018202344654127955, 0.00019789021462202072, 0.00019770648214034736, 0.00011542942229425535, 7.0925285399425775e-05, 0.00017620286962483078, 0.00019388311193324625, 8.055139915086329e-05, 7.3672810685820878e-05, } };
const TfArray<96, int> quant18_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[96*1*1*16] = { 
  /* [0][0][][] */ 37,-49,-53,8,-103,34,127,30,64,46,-20,41,73,24,-55,36, 
  /* [1][0][][] */ -1,33,-127,-6,121,99,-5,14,12,0,-14,10,-64,18,-83,-11, 
  /* [2][0][][] */ -18,84,73,-23,81,45,16,30,50,13,28,-7,57,-127,3,-7, 
  /* [3][0][][] */ 120,-103,27,-21,39,73,-21,-60,75,67,-50,-17,-36,75,-127,19, 
  /* [4][0][][] */ -20,39,-7,64,-112,-14,-55,-69,-113,42,44,-59,-98,-30,-3,127, 
  /* [5][0][][] */ -64,56,15,0,127,30,-43,29,-72,62,6,34,-100,27,-61,7, 
  /* [6][0][][] */ -127,-3,-40,18,-18,-29,75,3,-5,-32,-49,11,15,3,-36,45, 
  /* [7][0][][] */ 18,63,127,-14,35,55,60,34,30,-25,35,56,85,-7,6,-21, 
  /* [8][0][][] */ -30,-34,-77,127,-76,0,-90,-46,9,-76,101,51,114,63,-37,60, 
  /* [9][0][][] */ -50,-127,-50,93,-59,-81,-35,39,-5,74,43,59,-120,2,24,-20, 
  /* [10][0][][] */ -45,-42,-63,89,-52,106,40,-38,23,-98,0,-13,9,127,-54,86, 
  /* [11][0][][] */ -53,-50,-76,89,7,103,59,-1,42,-51,8,-52,-31,127,-74,109, 
  /* [12][0][][] */ -58,-30,-74,127,-114,-116,76,82,52,-15,-64,38,-10,-9,37,34, 
  /* [13][0][][] */ -59,-25,-29,-5,-14,-1,9,19,-20,127,3,-24,19,10,27,-3, 
  /* [14][0][][] */ -12,40,53,-27,66,61,18,-36,127,-48,56,29,99,-121,13,-66, 
  /* [15][0][][] */ -24,-127,91,10,-33,-65,2,72,-6,-12,-41,1,74,7,-103,-40, 
  /* [16][0][][] */ -13,-38,21,-34,41,6,-16,-37,38,-95,31,5,8,20,-127,-93, 
  /* [17][0][][] */ -35,49,2,-59,66,36,-42,9,86,-2,75,18,27,-127,-12,-75, 
  /* [18][0][][] */ 75,-30,19,-64,4,4,87,-31,59,19,-31,49,30,54,-53,-127, 
  /* [19][0][][] */ -12,-100,7,-80,-66,26,29,18,73,-89,-43,-127,5,-23,-57,-23, 
  /* [20][0][][] */ 51,65,33,-104,58,-14,-2,45,-27,-106,36,-32,1,127,-31,-45, 
  /* [21][0][][] */ 34,-31,-92,-28,30,10,127,40,-3,-91,6,29,65,-55,-35,53, 
  /* [22][0][][] */ 15,-39,55,-41,65,45,122,46,31,127,49,27,-34,21,45,-25, 
  /* [23][0][][] */ -82,-58,16,59,55,9,-20,30,-45,75,5,-65,-45,47,29,127, 
  /* [24][0][][] */ -24,-2,-7,57,-7,-117,-9,-7,-15,92,-58,62,-32,-24,127,5, 
  /* [25][0][][] */ 114,-21,127,89,81,6,54,51,-63,54,-36,-111,49,39,38,-47, 
  /* [26][0][][] */ -5,39,17,29,-38,96,-3,22,-39,-27,-81,28,15,6,41,-127, 
  /* [27][0][][] */ 5,-25,19,-7,-46,5,-97,76,-91,-17,-59,-61,-99,49,-22,127, 
  /* [28][0][][] */ -12,35,46,-8,5,-22,-127,-20,-2,-33,1,-12,8,-63,-77,-46, 
  /* [29][0][][] */ -15,-127,45,112,-4,-17,61,-10,61,59,-94,61,62,4,-86,30, 
  /* [30][0][][] */ 60,-48,-95,13,-127,-23,14,-84,-35,14,44,-54,-42,-2,-15,75, 
  /* [31][0][][] */ -127,-14,8,60,19,25,-55,36,-19,-22,8,-23,-38,-51,11,63, 
  /* [32][0][][] */ -93,-58,-112,38,-127,-95,27,-31,64,-12,-81,-93,99,100,29,-11, 
  /* [33][0][][] */ -34,-25,-86,53,-127,-40,20,19,-88,-1,-47,-70,-10,78,112,69, 
  /* [34][0][][] */ 53,46,-30,21,-20,-45,43,13,29,-127,12,5,-81,-20,-30,38, 
  /* [35][0][][] */ 35,-52,-64,-10,-66,19,127,-30,41,-8,-7,8,75,109,-7,55, 
  /* [36][0][][] */ 0,-1,-14,42,127,-1,25,59,-62,17,-77,-50,15,-17,13,18, 
  /* [37][0][][] */ -88,40,-36,-100,26,-76,-127,-48,-9,3,-17,39,68,-55,-4,-102, 
  /* [38][0][][] */ 67,88,-21,-110,-99,23,-70,-109,1,-116,63,70,-33,-127,45,-22, 
  /* [39][0][][] */ -4,-5,-44,24,-9,32,59,-34,-26,29,0,-3,21,127,31,62, 
  /* [40][0][][] */ 97,80,47,84,-14,-113,-13,67,-41,20,-5,-20,-115,-55,127,-9, 
  /* [41][0][][] */ -22,13,-1,93,-45,127,-6,28,-59,8,-68,-5,17,5,15,-94, 
  /* [42][0][][] */ -41,-127,72,24,50,36,1,-28,-30,-42,-74,20,24,59,-38,-41, 
  /* [43][0][][] */ -41,-117,26,10,87,96,-47,35,13,-73,-127,-27,63,-19,-109,-69, 
  /* [44][0][][] */ -45,-64,-34,-36,31,60,71,-14,-46,-127,-67,32,-9,43,23,89, 
  /* [45][0][][] */ -52,-127,-28,-24,-102,115,10,-40,56,-44,-29,-61,70,50,-80,-48, 
  /* [46][0][][] */ -15,1,-29,9,83,-55,-14,127,-29,5,40,3,-30,-51,69,-51, 
  /* [47][0][][] */ -26,13,-1,33,-6,4,20,-9,20,127,123,97,-18,63,-2,50, 
  /* [48][0][][] */ 15,-31,-51,-59,12,-35,14,28,40,-71,-1,27,-30,25,-71,-127, 
  /* [49][0][][] */ 19,-12,-16,56,12,-38,-14,41,-61,127,15,79,-58,-3,41,79, 
  /* [50][0][][] */ 8,3,-3,9,-127,-4,-7,-27,67,11,36,68,-27,-55,12,-4, 
  /* [51][0][][] */ 22,10,-57,-120,-41,59,127,-86,12,-98,23,-63,63,49,-88,47, 
  /* [52][0][][] */ 24,-34,0,-65,94,-59,-15,-28,71,-11,127,-20,52,-18,-44,55, 
  /* [53][0][][] */ -32,-59,55,-32,-65,-127,54,-114,-18,67,-48,103,-35,31,12,-98, 
  /* [54][0][][] */ 49,30,57,11,-127,-75,-91,-54,-71,54,50,66,-118,-50,58,-20, 
  /* [55][0][][] */ 43,-23,-74,127,-87,52,15,-47,-19,53,79,9,-57,-22,2,46, 
  /* [56][0][][] */ 69,-19,-116,-36,56,87,10,13,127,55,119,106,-15,-59,-9,36, 
  /* [57][0][][] */ 21,34,43,-73,6,-27,-93,-36,-9,41,127,94,-5,-19,62,-91, 
  /* [58][0][][] */ 63,30,-35,-13,-64,-67,24,127,18,31,11,35,51,20,89,59, 
  /* [59][0][][] */ -25,45,-21,-27,-58,-127,34,15,-38,-19,-54,-95,-73,-4,34,-26, 
  /* [60][0][][] */ 44,-84,29,9,31,7,-10,-67,25,127,1,81,-11,-14,-76,-68, 
  /* [61][0][][] */ 39,59,-23,-2,-98,-115,-25,-21,-98,3,2,-26,-75,-7,63,127, 
  /* [62][0][][] */ 13,47,-2,2,-7,127,-7,17,-17,-8,-91,19,4,17,31,-73, 
  /* [63][0][][] */ 15,-20,-27,-127,-17,-61,47,-22,-15,-12,6,58,-31,72,27,-53, 
  /* [64][0][][] */ -30,-4,36,-67,55,-82,-17,114,-86,-36,-120,22,33,127,24,82, 
  /* [65][0][][] */ -70,-127,-15,-2,96,118,-101,-106,-56,-94,46,22,-114,50,-121,58, 
  /* [66][0][][] */ -86,20,16,32,-34,127,-55,56,-56,58,-33,57,-34,34,60,-50, 
  /* [67][0][][] */ 62,47,-44,-18,-38,-127,73,-104,-37,-6,63,50,-23,-17,23,-92, 
  /* [68][0][][] */ -36,-64,-52,81,-39,30,26,75,-3,38,81,9,-127,-5,32,17, 
  /* [69][0][][] */ 18,20,49,-85,61,-44,-42,42,52,107,127,102,-13,-46,8,-61, 
  /* [70][0][][] */ 77,72,66,-44,69,2,-94,-54,-89,-94,-9,76,-33,49,-127,-23, 
  /* [71][0][][] */ 9,-89,9,-67,59,13,67,-4,-24,37,-127,-67,38,109,-103,-12, 
  /* [72][0][][] */ -37,-76,25,25,-83,2,-110,-30,-35,88,-49,8,38,127,-77,21, 
  /* [73][0][][] */ 18,0,2,-56,10,-127,-5,-29,61,117,112,46,30,-48,-36,93, 
  /* [74][0][][] */ -19,17,-36,127,-76,-44,74,55,60,41,6,71,120,49,-42,38, 
  /* [75][0][][] */ -28,53,-12,31,-31,127,4,15,-31,28,-53,-10,1,31,34,-51, 
  /* [76][0][][] */ -68,30,-83,-41,-116,47,-5,-19,56,47,-89,-45,105,-70,-127,12, 
  /* [77][0][][] */ 59,48,-101,127,31,39,43,56,10,-34,94,-59,45,61,64,48, 
  /* [78][0][][] */ 30,4,10,-25,24,-95,28,-64,-3,32,127,-31,-10,2,-25,103, 
  /* [79][0][][] */ -38,4,-6,0,-28,-33,-14,-57,-114,-37,76,0,66,45,-127,-40, 
  /* [80][0][][] */ -47,36,46,1,77,56,26,-127,-36,-2,-114,-59,84,-72,21,51, 
  /* [81][0][][] */ 54,59,-41,2,-17,-68,68,103,-116,89,-24,-61,-25,14,83,127, 
  /* [82][0][][] */ 59,78,32,-80,90,47,57,-127,68,79,-9,84,99,-78,27,-62, 
  /* [83][0][][] */ -25,-72,52,71,-29,24,-98,-109,30,6,127,-2,24,-62,-35,-58, 
  /* [84][0][][] */ -116,-81,-8,31,-30,72,89,6,41,30,74,43,40,127,-66,29, 
  /* [85][0][][] */ 44,34,85,-10,96,63,3,93,-15,96,-42,-21,-92,60,127,32, 
  /* [86][0][][] */ -127,72,-35,10,34,95,0,70,87,42,127,-79,-51,47,50,42, 
  /* [87][0][][] */ 26,-38,26,-57,49,-127,40,-43,61,-23,59,-27,48,-51,-34,63, 
  /* [88][0][][] */ -89,10,-10,26,66,-19,22,58,-72,-49,104,-57,42,127,47,-57, 
  /* [89][0][][] */ -20,21,2,25,-20,127,-20,35,-55,14,-43,-10,-16,36,11,-85, 
  /* [90][0][][] */ 28,-49,41,-11,127,-10,0,32,9,-59,-126,-47,-37,-48,-28,29, 
  /* [91][0][][] */ -48,87,46,55,29,65,-100,71,-28,39,-37,-44,-127,-91,-39,35, 
  /* [92][0][][] */ 54,37,103,81,-127,-36,-58,2,-15,2,-27,-28,-60,-62,8,-33, 
  /* [93][0][][] */ -11,-25,-127,23,-6,-56,30,67,73,45,4,44,-19,68,-7,10, 
  /* [94][0][][] */ 127,-2,109,-66,77,16,3,-1,72,124,32,78,52,-21,95,-43, 
  /* [95][0][][] */ -78,-14,-127,-111,53,-34,78,113,-75,-11,-70,-100,-6,10,-56,110, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 96,1,1,16 } };
const TfArray<96, float> quant19_scale = { 96, { 0.0032154594082385302, 0.0045262170024216175, 0.0038046000991016626, 0.0020012843888252974, 0.0013160011731088161, 0.0012309851590543985, 0.0024326995480805635, 0.0034867750946432352, 0.0013007367961108685, 0.003565546590834856, 0.001124607864767313, 0.0025674155913293362, 0.0023831808939576149, 0.0052526597864925861, 0.0024204908404499292, 0.0035649046767503023, 0.0015544042689725757, 0.002404078608378768, 0.0022240288089960814, 0.0018128800438717008, 0.0042543378658592701, 0.0026757437735795975, 0.0051781809888780117, 0.0021383194252848625, 0.0026827051769942045, 0.0026733928825706244, 0.0036515663377940655, 0.0025079632177948952, 0.0020477643702179193, 0.0026461516972631216, 0.0017497142544016242, 0.002509658457711339, 0.0023730909451842308, 0.0010063123190775514, 0.0038099235389381647, 0.0020367435645312071, 0.0024614047724753618, 0.0023637788835912943, 0.002318978076800704, 0.0038924501277506351, 0.00072425924008712173, 0.0036158817820250988, 0.0031890873797237873, 0.0021164899226278067, 0.0028415266424417496, 0.0011308875400573015, 0.0026717253495007753, 0.0021956157870590687, 0.0031088606920093298, 0.0033020803239196539, 0.0043178494088351727, 0.0013918784679844975, 0.0031227306462824345, 0.0028896525036543608, 0.0009825490415096283, 0.0032966043800115585, 0.0032648921478539705, 0.0009644030942581594, 0.0031819767318665981, 0.0011839370708912611, 0.0024664020165801048, 0.00070652749855071306, 0.0034550956916064024, 0.003398227272555232, 0.00085977278649806976, 0.0012766115833073854, 0.0032607547473162413, 0.0017393722664564848, 0.0015777599764987826, 0.0015411757631227374, 0.0023750339169055223, 0.0029528997838497162, 0.00390279246494174, 0.0012892360100522637, 0.0034682326950132847, 0.0027458833064883947, 0.0046830978244543076, 0.0014179520076140761, 0.002565005561336875, 0.00057744269724935293, 0.0028006089851260185, 0.0013280226849019527, 0.0020663328468799591, 0.00059895508456975222, 0.0024341479875147343, 0.0016214144416153431, 0.0016254788497462869, 0.0036274620797485113, 0.0039436635561287403, 0.0039400020614266396, 0.0023003402166068554, 0.0014134375378489494, 0.0035114663187414408, 0.0038638077676296234, 0.0016052720602601767, 0.0014681917382404208, } };
const TfArray<96, int> quant19_zero = { 96, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[16] = { -8527, 10781, -9835, 8761, 7985, -17794, -30818, -5169, -9121, 10163, -13560, -17082, 7993, -8745, -3637, -4402, };
const TfArray<1, int> tensor_dimension20 = { 1, { 16 } };
const TfArray<16, float> quant20_scale = { 16, { 0.00011408182763261721, 8.830781007418409e-05, 0.00011751936108339578, 0.00014436659694183618, 9.4208888185676187e-05, 0.00011581606668187305, 8.4849867562297732e-05, 0.00013734496315009892, 7.0041503931861371e-05, 7.6648932008538395e-05, 0.00013164206757210195, 5.2092898840783164e-05, 0.00012164573126938194, 6.2071238062344491e-05, 8.2606071373447776e-05, 0.00013090074935462326, } };
const TfArray<16, int> quant20_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[16*1*1*48] = { 
  /* [0][0][][] */ 5,32,39,-21,72,50,-39,28,-37,127,-3,39,-52,41,-18,15,25,97,41,-55,-66,80,-25,29,48,61,59,51,-19,-57,-6,62,14,-10,-85,66,38,-111,-23,13,-2,-26,77,-8,-23,-57,-44,5, 
  /* [1][0][][] */ -74,5,-63,-54,25,73,-64,25,-23,-1,-44,44,38,-11,-40,-37,-28,-27,-4,54,-71,49,-116,-30,-65,-32,42,69,-8,-18,42,-67,1,6,-28,62,18,-65,127,-13,-29,27,-30,-43,-11,48,28,29, 
  /* [2][0][][] */ 5,10,33,-25,-40,-54,4,14,76,77,-102,8,93,-49,127,71,-85,-42,-39,39,70,-72,-37,-101,-9,-31,28,-91,52,29,-73,6,42,-33,30,21,-69,-11,-19,-26,42,-4,53,-32,24,-95,70,-51, 
  /* [3][0][][] */ 36,-7,-54,-18,14,127,24,-12,41,-49,35,-25,-70,18,13,48,-44,-73,21,-105,12,-32,-17,-13,-53,76,101,35,-15,-38,40,49,9,-30,96,9,-77,-63,-8,21,30,19,-50,-12,4,11,-12,-38, 
  /* [4][0][][] */ 95,3,18,-57,67,61,43,1,61,-22,-95,45,65,-33,-3,3,-83,-112,7,-89,-26,55,-39,-34,-50,94,-89,127,-60,-11,-7,54,60,-39,-3,-9,-11,12,-2,61,-30,-9,34,38,-31,92,-63,-37, 
  /* [5][0][][] */ -9,-26,-55,-7,-26,43,48,-28,82,36,28,91,52,-12,36,17,-57,116,-6,33,13,-4,-54,-25,49,-8,-76,-14,-30,47,-8,9,-47,-17,38,19,-59,5,-80,31,127,-19,16,45,-11,31,-56,2, 
  /* [6][0][][] */ 26,7,17,89,13,-39,120,-42,17,48,127,85,13,68,-74,58,17,-36,-23,41,78,-76,-11,66,-82,62,79,26,107,13,-28,13,80,-60,-93,3,57,27,54,6,-21,75,46,-9,79,97,32,-19, 
  /* [7][0][][] */ -63,4,-25,22,-31,-58,40,42,80,87,-39,-39,-71,20,-24,9,-52,55,4,98,-42,17,26,27,-27,-72,-39,-52,15,41,-8,-10,-48,9,8,-19,-4,-46,127,26,9,35,2,-8,44,58,-49,-7, 
  /* [8][0][][] */ 2,-63,64,-57,43,-63,80,-58,-31,-106,10,10,-17,-9,12,37,-15,19,-15,66,-2,61,-23,-2,71,-3,-44,-33,-89,-21,-68,-79,53,-86,-13,92,7,42,103,24,25,3,92,127,0,-67,-51,75, 
  /* [9][0][][] */ 30,-34,-11,-79,34,68,-70,51,42,-38,-23,-31,13,-26,127,-29,4,-120,21,76,-57,34,65,-18,-42,-84,-32,87,62,49,-30,-57,-66,66,12,120,-80,-67,-61,-18,-40,-38,27,69,26,82,-81,11, 
  /* [10][0][][] */ -8,23,-17,-9,6,21,-78,-25,49,32,75,-19,-26,-9,51,-52,-51,127,-7,44,4,-5,11,33,-35,33,2,82,28,0,-11,-21,68,26,7,13,1,-49,-46,-13,-93,-13,31,-27,-10,44,42,31, 
  /* [11][0][][] */ -32,62,-29,1,39,52,-27,-9,34,-2,-123,-104,85,22,-13,-69,-15,56,-36,-42,-10,10,127,-6,54,-2,0,49,16,20,9,39,74,5,-36,11,42,93,103,-3,25,-58,80,7,-67,-13,125,23, 
  /* [12][0][][] */ -56,-28,25,25,-58,-41,45,-5,-19,-39,-75,-3,31,-35,-14,23,12,81,76,-127,0,16,-36,-64,-11,-19,18,-21,10,8,0,82,51,44,31,-45,-45,-13,37,-4,-33,12,37,14,71,-10,-28,-41, 
  /* [13][0][][] */ -65,-120,-42,-81,-1,17,85,27,-85,-30,126,-69,45,58,101,14,95,38,27,-121,85,-85,127,15,-73,-13,-23,45,-46,-107,-95,21,33,-16,-53,45,17,-45,99,-71,-5,74,59,49,56,-11,101,-73, 
  /* [14][0][][] */ 68,63,-56,28,-25,32,-91,-8,-42,98,55,59,-28,-59,-13,-62,65,-119,20,48,82,-74,27,3,-56,127,-110,15,-48,-10,-85,-27,108,82,90,-51,-74,-4,-17,75,-30,-37,99,-34,-57,-29,-64,61, 
  /* [15][0][][] */ -47,12,17,21,90,8,5,28,32,74,-11,51,46,5,-26,0,26,30,-9,-21,11,-31,-37,-17,50,-51,-38,56,-34,7,22,12,-77,-1,127,-9,-90,14,60,-13,-44,-16,2,-20,-43,-24,-5,14, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 16,1,1,48 } };
const TfArray<16, float> quant21_scale = { 16, { 0.0048484774306416512, 0.0037530818954110146, 0.0049945726059377193, 0.0061355801299214363, 0.0040038777515292168, 0.0049221827648580074, 0.0036061194259673357, 0.0058371606282889843, 0.0029767637606710196, 0.0032575796358287334, 0.0055947876535356045, 0.0022139481734484434, 0.0051699434407055378, 0.0026380275376141071, 0.003510757815092802, 0.0055632819421589375, } };
const TfArray<16, int> quant21_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { 10851, -517, 11905, 713, 12280, -6024, 33039, -1307, 8584, 38711, 414, 28647, 5074, 9417, 29341, 30833, 779, 2874, -1059, 34324, -28, 14212, 1764, 15593, 8543, 44465, 849, -78, -5406, 8160, 21828, -4, 1541, -4598, 3069, 13474, 8609, 34212, -865, 9804, 16031, 70, 673, 10202, -3454, 4167, 33393, 13966, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 8.6042869952507317e-05, 0.00020764274813700467, 9.9332632089499384e-05, 0.00015551636170130223, 0.00011140175047330558, 8.2658509199973196e-05, 7.5947573350276798e-05, 7.0316600613296032e-05, 0.00013549145660363138, 5.2631872677011415e-05, 6.4575084252282977e-05, 7.8736076829954982e-05, 7.353080582106486e-05, 0.00011006233398802578, 6.468960054917261e-05, 7.210670446511358e-05, 9.3611663032788783e-05, 5.722827700083144e-05, 6.9992296630516648e-05, 6.32534283795394e-05, 0.00020945738651789725, 9.3771486717741936e-05, 8.6431653471663594e-05, 0.00010756207484519109, 0.00013833411503583193, 4.5718647015746683e-05, 4.8821799282450229e-05, 3.8563961425097659e-05, 0.00025674575590528548, 0.00011807183182099834, 5.7553315855329856e-05, 0.00044037599582225084, 0.00015821807028260082, 0.00013322869199328125, 0.00017653881513979286, 6.1841958086006343e-05, 0.00015652032743673772, 4.7908826672937721e-05, 0.0001001170021481812, 0.00011867858847836033, 9.5648880233056843e-05, 0.00016608762962277979, 0.00058035459369421005, 0.00011293194984318689, 0.00020958538516424596, 4.5461980334948748e-05, 5.2175360906403512e-05, 0.00011003128020092845, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ -101,127,-127,92,-91,127,-120,-13,-2,-122,45,-21,65,-127,-23,-127,70,72,87,-102,27,-16,49,-78,-123,-68,127,119,-84,-85,-74,-41,32,-109,61,-76,-66,-101,127,5,-6,-56,20,-19,67,30,-68,7, -105,15,-17,50,-127,95,-39,6,-97,-124,92,-18,58,-37,-99,-80,49,115,127,-45,48,-43,67,-127,-127,-88,55,127,18,-70,-75,-9,12,-101,73,-89,-34,-33,87,-12,-48,68,26,22,-72,121,-127,13, -80,-16,-14,-5,-35,23,-99,-46,-65,-56,71,-70,-1,1,-13,-72,53,80,91,11,-21,-23,18,-54,-27,-56,85,103,127,-58,-14,-40,-15,-74,43,-49,-14,-59,65,-53,-127,-62,5,-6,-31,83,46,-31, 
  /* [0][1][][] */ -127,100,-54,79,12,84,-53,122,-71,-127,45,-39,127,-97,-37,-33,105,90,-88,-91,127,-91,71,-79,-72,-124,103,9,-94,-25,-112,89,96,56,112,-110,-96,-116,65,-34,1,-90,127,-127,127,59,-80,-61, -127,43,-29,76,-29,24,-20,57,-77,-68,127,-48,126,-77,-127,-62,127,127,-67,-127,114,-127,127,-83,21,-127,58,32,4,-81,-127,124,127,36,127,-15,-127,-127,105,-127,-92,127,62,-87,-19,127,-105,-70, -36,33,-64,20,-56,16,-92,66,-60,-72,105,-127,44,-68,-35,-98,67,108,-46,-76,25,-81,88,-62,38,-119,94,70,73,-35,-80,127,29,-10,61,-71,25,-62,62,-84,-84,-96,34,-85,-37,121,17,-127, 
  /* [0][2][][] */ -28,10,42,127,-31,83,-127,84,-70,-24,52,-96,-19,24,11,-70,52,4,-62,19,39,-36,20,-49,-16,-35,41,16,-51,-100,-86,70,45,105,40,-110,-16,-45,4,16,-21,3,2,-100,127,23,-86,-48, -8,13,-46,55,-108,80,-29,127,-127,-6,47,-125,-53,-58,-15,-28,44,70,-61,-22,24,-13,49,-18,-15,-38,23,2,25,-127,-39,99,35,68,32,-127,-26,-42,-5,-34,12,91,-12,-37,-29,27,-113,-18, 6,50,-42,11,-57,3,-112,34,-7,53,49,-64,-3,-49,24,-53,65,23,-89,-25,-66,3,9,-21,-38,-1,73,47,89,-17,-97,8,59,127,34,-83,-7,-67,-15,-28,25,-42,-7,-21,-27,73,18,-65, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.0036568220239132643, 0.0088248169049620628, 0.0042216368019580841, 0.0066094454377889633, 0.0047345743514597416, 0.0035129867028445005, 0.0032277719583362341, 0.0029884555842727423, 0.0057583870366215706, 0.0022368545178323984, 0.0027444411534816027, 0.003346283221617341, 0.0031250591855496168, 0.0046776491217315197, 0.0027493080124258995, 0.0030645348597317934, 0.0039784954860806465, 0.0024322017561644316, 0.0029746724758297205, 0.002688270527869463, 0.008901938796043396, 0.0039852880872786045, 0.0036733453162014484, 0.0045713880099356174, 0.0058792000636458397, 0.001943042385391891, 0.0020749263931065798, 0.0016389683587476611, 0.010911693796515465, 0.0050180526450276375, 0.0024460158310830593, 0.018715979531407356, 0.0067242677323520184, 0.0056622191332280636, 0.0075028995051980019, 0.0026282831095159054, 0.0066521139815449715, 0.0020361251663416624, 0.0042549725621938705, 0.0050438400357961655, 0.0040650772862136364, 0.007058724295347929, 0.024665068835020065, 0.0047996076755225658, 0.008907378651201725, 0.0019321341533213854, 0.0022174527402967215, 0.0046763294376432896, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { 1465, -1897, 772, -3129, 2868, -138, 7579, -1742, 1219, 1662, 1419, 4445, 375, -272, 188, 8746, -1297, 3156, 2705, 37, -2909, 2777, -210, 5353, 2263, 2332, 2242, -341, 17371, -990, 1402, -2619, -2728, 3098, -2953, 1450, 2604, 442, 222, 3617, 1379, 17676, -4048, 2010, 5905, 518, 1102, 4098, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00023472250904887915, 0.0002339099592063576, 0.00023834890453144908, 0.00016094635066110641, 0.00025850991369225085, 0.00023879237414803356, 0.00011143261508550495, 0.00019707053434103727, 0.00022376960259862244, 0.00013968559505883604, 0.00028487687814049423, 0.00017192628001794219, 0.00024147286603692919, 0.00033704558154568076, 0.00026188176707364619, 0.00010413634299766272, 0.00026703631738200784, 0.00021203717915341258, 0.00023054220946505666, 0.00026990048354491591, 0.00016000942559912801, 0.00019245530711486936, 0.00019594683544710279, 0.00015849029296077788, 0.00019528561097104102, 0.00019358620920684189, 0.00023018103092908859, 0.00020653348474297673, 5.7311688578920439e-05, 0.00028228905284777284, 0.00021963486506137997, 0.00013650083565153182, 0.00011075169459218159, 0.0001814478455344215, 0.00017881786334328353, 0.00025394701515324414, 0.00020568098989315331, 0.00032241237931884825, 0.00015836193051654845, 0.00020510275498963892, 0.00026301472098566592, 6.1042512243147939e-05, 0.0001378436281811446, 0.00023577474348712713, 0.00012623019574675709, 0.00022137882479000837, 0.00024663639487698674, 0.00018121521861758083, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 35,40,127,-27,60,112,-33,-57, 
  /* [1][0][][] */ 6,-74,-127,-5,64,-18,45,-48, 
  /* [2][0][][] */ -127,-57,-44,-20,107,30,-75,-50, 
  /* [3][0][][] */ 47,73,112,-96,-14,-127,-13,-2, 
  /* [4][0][][] */ -127,29,-55,-24,38,1,-64,-33, 
  /* [5][0][][] */ -127,22,-36,-38,-7,44,-90,-121, 
  /* [6][0][][] */ -29,-127,-88,50,118,51,12,74, 
  /* [7][0][][] */ -63,-127,-70,-95,-78,-98,29,54, 
  /* [8][0][][] */ 82,34,30,11,127,-80,-119,8, 
  /* [9][0][][] */ -43,84,-62,107,-86,-71,127,-72, 
  /* [10][0][][] */ -23,127,50,35,89,-21,-6,59, 
  /* [11][0][][] */ -82,-13,-37,5,-68,107,127,8, 
  /* [12][0][][] */ 66,35,-127,55,-45,-42,-42,-42, 
  /* [13][0][][] */ 30,-62,-49,-21,18,-127,-34,-7, 
  /* [14][0][][] */ 30,-72,55,14,127,-99,-51,7, 
  /* [15][0][][] */ -32,-57,-8,127,106,67,-61,41, 
  /* [16][0][][] */ 127,25,-3,9,80,-74,-118,-14, 
  /* [17][0][][] */ 75,127,68,88,39,62,29,-85, 
  /* [18][0][][] */ 46,-15,-7,-4,127,-11,40,0, 
  /* [19][0][][] */ -30,127,49,4,-120,33,60,-49, 
  /* [20][0][][] */ -44,46,80,-127,-2,-3,-34,58, 
  /* [21][0][][] */ -41,127,3,-115,37,65,3,123, 
  /* [22][0][][] */ -68,-36,-97,39,-127,103,127,-12, 
  /* [23][0][][] */ 49,40,-127,-5,-11,-70,-78,-14, 
  /* [24][0][][] */ -84,16,11,-10,-35,55,-127,97, 
  /* [25][0][][] */ -115,-71,-124,17,-52,-38,80,127, 
  /* [26][0][][] */ 24,13,-7,-57,97,0,127,-18, 
  /* [27][0][][] */ 127,-103,36,114,17,54,8,125, 
  /* [28][0][][] */ 114,78,61,5,76,-90,110,-127, 
  /* [29][0][][] */ -26,-19,-2,-64,-39,34,127,-26, 
  /* [30][0][][] */ 84,-91,-32,-55,-127,-15,32,-104, 
  /* [31][0][][] */ -32,44,-36,-23,-127,17,-2,2, 
  /* [32][0][][] */ 28,-51,-79,98,-31,-116,122,-127, 
  /* [33][0][][] */ 120,127,51,33,14,-76,-18,-72, 
  /* [34][0][][] */ -127,-26,123,37,-49,75,84,6, 
  /* [35][0][][] */ -10,111,127,-34,-61,-77,-40,56, 
  /* [36][0][][] */ -93,-51,127,-47,-6,52,16,-6, 
  /* [37][0][][] */ -31,-107,-29,-127,12,-110,71,63, 
  /* [38][0][][] */ 63,-39,109,-60,76,75,-127,3, 
  /* [39][0][][] */ -14,127,-64,-38,-6,17,29,82, 
  /* [40][0][][] */ 44,-45,41,22,28,6,-3,127, 
  /* [41][0][][] */ -47,127,117,-5,25,72,-109,42, 
  /* [42][0][][] */ 55,-89,-104,-1,-123,2,30,-127, 
  /* [43][0][][] */ -47,-127,7,-54,61,-39,4,14, 
  /* [44][0][][] */ 46,41,127,-52,64,32,-114,12, 
  /* [45][0][][] */ -45,47,24,102,-120,79,-127,46, 
  /* [46][0][][] */ -22,-54,62,38,-109,-127,-51,-36, 
  /* [47][0][][] */ -41,26,54,-127,-97,33,-18,66, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.0026158611290156841, 0.0026068056467920542, 0.0026562754064798355, 0.0017936639487743378, 0.0028809595387428999, 0.0026612177025526762, 0.0012418589321896434, 0.0021962493192404509, 0.0024937966372817755, 0.0015567237278446555, 0.0031748055480420589, 0.0019160296069458127, 0.002691090339794755, 0.0037561987992376089, 0.0029185370076447725, 0.0011605457402765751, 0.0029759819153696299, 0.0023630447685718536, 0.0025692738126963377, 0.0030079013668000698, 0.0017832224257290363, 0.0021448149345815182, 0.0021837262902408838, 0.0017662923783063889, 0.0021763572003692389, 0.0021574182901531458, 0.0025652486365288496, 0.0023017090279608965, 0.00063870917074382305, 0.0031459655147045851, 0.0024477171245962381, 0.0015212313737720251, 0.0012342703994363546, 0.0020221425220370293, 0.0019928326364606619, 0.0028301083948463202, 0.0022922083735466003, 0.0035931195598095655, 0.0017648618668317795, 0.0022857643198221922, 0.0029311631806194782, 0.0006802872521802783, 0.0015361960977315903, 0.0026275876443833113, 0.001406770315952599, 0.0024671526625752449, 0.0027486353646963835, 0.0020195499528199434, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { -1279, -3835, 17376, 2476, 3930, -9642, 3930, -14984, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 7.3256414907518774e-05, 0.00010611659672576934, 0.00011154714593430981, 8.2775426562875509e-05, 7.5962663686368614e-05, 0.00012827393948100507, 8.8259701442439109e-05, 5.8274392358725891e-05, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ -16,-38,-3,-51,4,-19,62,71,-98,-81,-42,-18,-66,4,-21,21,-84,13,5,105,96,6,-21,124,87,76,33,40,-119,-55,-71,-60,-19,97,80,-58,22,-6,118,-42,15,12,3,-127,45,-36,-38,-63, 
  /* [1][0][][] */ -43,53,20,-9,-84,86,-42,-29,-50,91,-29,-2,40,49,-54,-10,4,-117,89,-27,117,19,-72,30,94,-19,-90,72,34,-36,91,46,-37,13,61,-52,28,110,3,-20,76,58,-18,-20,127,4,-41,59, 
  /* [2][0][][] */ -12,-44,127,11,100,-27,-8,34,-36,-21,-24,42,3,-34,-29,-115,-53,-92,28,47,-95,32,-43,-50,-55,7,-3,-37,-50,-2,-20,-13,2,-18,68,-16,36,-33,-49,33,20,-55,38,-49,-33,-43,-75,-53, 
  /* [3][0][][] */ 87,31,65,-16,22,-70,51,44,-37,-74,46,-34,-76,41,-8,-5,92,15,-46,57,-103,-85,119,30,22,16,-71,-84,-90,52,108,-111,4,-127,-45,57,11,-97,-43,18,-61,-84,57,16,-116,-112,76,7, 
  /* [4][0][][] */ 14,-38,77,-34,6,-25,5,2,-78,-21,-8,-17,70,-85,32,-97,32,58,-9,-53,22,27,26,29,11,2,55,-25,13,35,-127,2,-19,-8,-21,19,50,-18,22,-7,-56,1,-54,34,-10,-90,-7,21, 
  /* [5][0][][] */ 26,-27,53,21,39,14,9,0,-57,-35,-45,31,30,15,-1,-57,105,71,20,-18,79,-75,127,-92,-30,40,-20,24,17,1,-52,-56,-35,-50,-42,25,37,34,46,24,-70,3,27,37,33,-5,82,-12, 
  /* [6][0][][] */ -30,55,-108,58,25,16,31,20,-4,3,48,-50,-79,-10,-31,16,-91,35,-17,57,-2,22,-54,-95,-26,-6,-15,56,-9,-40,-62,-13,6,54,-36,18,-8,5,33,29,68,38,-70,-41,-44,127,-42,-59, 
  /* [7][0][][] */ 5,46,-62,22,34,41,114,51,51,37,-64,-3,-31,-18,-52,-44,33,39,110,71,127,-4,91,53,125,102,5,85,-22,113,-17,-52,-19,-54,-21,58,13,60,-67,86,-71,32,-12,-50,84,-13,67,12, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0031133976299315691, 0.0045099551789462566, 0.0047407536767423153, 0.0035179555416107178, 0.0032284131739288568, 0.0054516424424946308, 0.0037510371766984463, 0.0024766616988927126, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { 323, 12034, 893, 6154, 3745, -528, -3605, -8138, -8166, -173, -12340, -134, 3358, -1307, -4825, 2518, 5313, -735, -1921, -313, -10015, 6336, 13466, -1424, -5398, -2516, 8192, -3251, -3014, 8108, 815, 12607, 7711, 180, 10190, -1182, 691, 19, 8863, -1052, 1706, -932, 3904, 3273, 1926, 1891, -1634, -7268, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00028362550074234605, 9.5923671324271709e-05, 0.0011129162739962339, 0.00016362209862563759, 0.00027726532425731421, 0.0003306593862362206, 0.0002211657993029803, 0.00019061875354964286, 7.8441371442750096e-05, 0.00017516770458314568, 0.00014385122631210834, 0.0012276828056201339, 0.00045693040010519326, 0.00043447047937661409, 0.00023749574029352516, 0.00074626359855756164, 0.00017755695444066077, 6.3078317907638848e-05, 0.00023638500715605915, 0.00027685548411682248, 0.00023177082766778767, 0.00026675662957131863, 9.5170980785042048e-05, 0.00043108451063744724, 0.00024180793843697757, 0.0003660749935079366, 0.00091696734307333827, 0.00020521262194961309, 0.00023283185146283358, 0.00025348126655444503, 0.00014999290578998625, 0.00010249828483210877, 7.3569572123233229e-05, 0.00021965065388940275, 0.00010934718739008531, 0.00024403704446740448, 0.00083927845116704702, 0.0005338380578905344, 0.00013363435573410243, 0.00018405671289656311, 0.00017135069356299937, 0.00017080633551813662, 0.00021748503786511719, 0.0002547993790358305, 0.00042453772039152682, 0.00013002482592128217, 6.6885222622659057e-05, 0.00013359064178075641, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ 9,-83,0,-23,-48,-69,-22,67,-26,5,10,-8,43,2,-7,3,58,53,89,-46,9,-50,1,2,-9,3,24,-67,-26,59,-127,-127,48,-33,-127,-28,-17,-61,6,33,-4,63,4,19,-32,64,127,32, -127,-83,-28,127,-114,70,-54,127,16,37,-4,-11,62,24,-33,-45,-43,127,38,-8,44,96,14,127,127,-14,-36,46,80,-118,-46,-99,46,-18,-21,-127,14,22,-69,-6,-90,14,-96,-127,26,47,18,127, -9,14,4,-10,-23,55,46,66,60,-63,-9,1,-47,-4,4,5,-50,76,-73,-22,0,-47,127,19,-23,27,-5,78,55,18,17,-52,-22,-31,-36,121,-4,3,15,78,52,-6,19,-46,-19,72,-9,16, 
  /* [0][1][][] */ -6,-38,-36,-23,19,-127,106,-61,8,30,65,16,127,-1,34,-20,7,-38,70,21,54,-65,68,-9,-43,127,-54,-120,127,-127,62,-114,-53,-4,-93,16,3,-83,-49,4,104,127,5,-78,-71,-40,27,68, 66,-127,127,-33,127,-11,-35,-54,6,127,127,-127,-93,127,127,127,127,125,115,127,127,100,-34,6,85,-89,-127,-16,26,92,125,-9,-127,127,113,103,-127,127,-127,-127,41,14,-127,-23,127,-127,-8,72, 35,70,-42,-28,-36,74,-84,64,98,-97,47,76,-73,15,31,-54,38,18,-127,47,9,-127,-51,-5,81,-10,-45,127,-52,-63,77,-29,-47,19,95,-29,24,-23,8,-98,127,-38,33,18,-47,77,89,-39, 
  /* [0][2][][] */ -2,-29,-2,-65,-16,-67,15,12,45,36,25,-9,-15,-10,16,2,-16,-34,25,-64,4,-45,93,-24,-75,8,34,-60,-3,-24,-104,32,22,-17,-104,33,-14,-23,35,44,-7,-34,-9,20,-45,18,16,18, 12,-42,-33,-78,11,4,127,-55,127,-6,14,10,-64,4,-28,-65,2,95,18,8,32,14,-12,-25,-11,28,40,-15,-114,-24,-111,-1,13,-6,-27,-32,38,2,15,74,-91,-35,-24,53,18,24,5,-87, 17,10,1,-52,-2,-9,23,-29,25,-91,26,30,-3,4,13,20,55,51,-54,-27,0,-44,-34,-17,40,-27,-4,47,-6,-43,-107,16,47,-26,-15,-40,-19,28,42,6,-5,-31,5,-17,-26,26,71,-47, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.012054083868861198, 0.0040767560712993145, 0.047298941761255264, 0.006953938864171505, 0.011783775873482227, 0.014053023420274258, 0.0093995463103055954, 0.0081012966111302376, 0.0033337583299726248, 0.007444627583026886, 0.0061136768199503422, 0.052176516503095627, 0.019419541582465172, 0.018464995548129082, 0.010093568824231625, 0.031716201454401016, 0.0075461706146597862, 0.0026808285620063543, 0.01004636287689209, 0.011766357347369194, 0.0098502598702907562, 0.011337156407535076, 0.0040447665378451347, 0.018321091309189796, 0.010276837274432182, 0.015558186918497086, 0.038971111178398132, 0.0087215360254049301, 0.0098953535780310631, 0.010772953741252422, 0.006374698132276535, 0.0043561770580708981, 0.0031267066951841116, 0.009335152804851532, 0.0046472554095089436, 0.010371574200689793, 0.035669334232807159, 0.022688116878271103, 0.0056794602423906326, 0.0078224102035164833, 0.0072824042290449142, 0.0072592692449688911, 0.0092431139200925827, 0.010828972794115543, 0.018042853102087975, 0.0055260551162064075, 0.0028426218777894974, 0.0056776022538542747, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 2369, 2326, 22372, 3969, 2944, -1342, 3310, 48947, 2400, -200, 11336, -2098, 523179, -1631, 4458, 14921, -1194, 3145, 103, 1493, 3029, 4908, 21, 7327, 4491, 2504, 42686, 878, 4650, 7279, 394, 1422, 727, 2334, 219, 196, -2855, -862, 3213, 3953, 4575, 2154, 4777, 1728, 8865, 9882, 2563, 4270, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.00025850444217212498, 0.00024671101709827781, 4.9892292736331001e-05, 0.00015742295363452286, 0.00023124230210669339, 0.00026259201695211232, 0.00021081458544358611, 2.2297621399047785e-05, 0.00017431560263503343, 0.00036071270005777478, 8.3609418652486056e-05, 0.00024671040591783822, 2.3841532765800366e-06, 0.00022806998458690941, 0.00016269822663161904, 7.0799324021209031e-05, 0.00027694515301845968, 0.00020422777743078768, 0.00052266224520280957, 0.00031722048879601061, 0.00026293363771401346, 0.00017166779434774071, 0.00037042913027107716, 0.0001237125979969278, 0.00017711104010231793, 0.00026180181885138154, 2.7566302378545515e-05, 0.00037790517671965063, 0.00018722405366133898, 0.00011527986498549581, 0.00031944355578161776, 0.0003042246971745044, 0.0002306227688677609, 0.00020019365183543414, 0.00035179546102881432, 0.00044812014675699174, 0.00020044669508934021, 0.00028357037808746099, 0.00015690475993324071, 0.0001873256842372939, 0.00017110533372033387, 0.00023989133478607982, 0.00017760100308805704, 0.00037988906842656434, 0.00011692530097207054, 9.280240919906646e-05, 0.00024028563348110765, 0.00018233757873531431, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ 41,101,-127,-79,-24,100,35,48, 
  /* [1][0][][] */ 80,-68,47,-127,-33,11,-106,-44, 
  /* [2][0][][] */ 16,101,127,51,85,-19,88,-22, 
  /* [3][0][][] */ 88,33,-62,45,25,-104,-127,-28, 
  /* [4][0][][] */ -18,25,3,22,3,66,127,-1, 
  /* [5][0][][] */ 22,127,-91,-49,30,60,45,-39, 
  /* [6][0][][] */ 31,127,-9,57,28,0,-19,-76, 
  /* [7][0][][] */ 127,-23,1,12,33,35,102,22, 
  /* [8][0][][] */ 57,87,57,72,127,61,62,-81, 
  /* [9][0][][] */ 52,88,-110,-26,-69,127,8,74, 
  /* [10][0][][] */ -68,-49,-1,-75,-44,-44,-83,127, 
  /* [11][0][][] */ 1,-126,-127,-49,33,-32,7,-23, 
  /* [12][0][][] */ 46,62,127,5,113,-35,85,-83, 
  /* [13][0][][] */ -1,21,-100,76,-127,-51,-14,-32, 
  /* [14][0][][] */ -53,-37,-127,-16,46,-26,-6,-68, 
  /* [15][0][][] */ 26,-60,-94,-16,-127,-42,-52,3, 
  /* [16][0][][] */ 99,-69,18,48,-100,37,38,127, 
  /* [17][0][][] */ -23,72,127,-21,-22,-5,-18,-8, 
  /* [18][0][][] */ 1,-127,12,56,18,-51,55,-33, 
  /* [19][0][][] */ 127,-63,-56,62,-72,-3,59,79, 
  /* [20][0][][] */ -40,-127,96,92,-23,-62,18,-68, 
  /* [21][0][][] */ -37,-36,-33,-39,127,31,83,8, 
  /* [22][0][][] */ -127,-21,-52,-5,48,38,-88,-51, 
  /* [23][0][][] */ -100,-40,68,-12,-52,127,75,-57, 
  /* [24][0][][] */ -100,17,61,-42,-33,127,69,-4, 
  /* [25][0][][] */ -40,-127,-30,-18,-48,13,4,5, 
  /* [26][0][][] */ 6,78,-35,120,-127,20,-28,-17, 
  /* [27][0][][] */ -3,-103,15,76,-30,-78,9,-127, 
  /* [28][0][][] */ -12,79,15,4,127,0,-2,3, 
  /* [29][0][][] */ 127,43,-110,13,68,-108,-65,-49, 
  /* [30][0][][] */ 38,12,-48,-127,14,-93,-22,-86, 
  /* [31][0][][] */ 31,-70,13,39,-12,15,13,127, 
  /* [32][0][][] */ -45,-84,35,-57,-55,127,72,95, 
  /* [33][0][][] */ -10,36,56,-45,52,105,-127,81, 
  /* [34][0][][] */ 79,127,-38,-6,125,111,-31,72, 
  /* [35][0][][] */ 15,-127,38,20,7,-54,85,11, 
  /* [36][0][][] */ -6,-27,-73,-41,-127,-66,-25,22, 
  /* [37][0][][] */ -87,-127,5,98,-52,-103,-33,-99, 
  /* [38][0][][] */ -73,30,68,-114,-127,-110,-82,84, 
  /* [39][0][][] */ 127,-123,113,62,-27,-71,-24,-73, 
  /* [40][0][][] */ 1,77,3,57,-127,-12,-71,-11, 
  /* [41][0][][] */ 97,127,-98,-126,77,38,5,19, 
  /* [42][0][][] */ -8,-25,-1,4,127,16,32,16, 
  /* [43][0][][] */ 127,0,31,-10,-73,-36,13,46, 
  /* [44][0][][] */ 13,2,33,23,106,-107,-127,5, 
  /* [45][0][][] */ 56,46,54,107,127,-124,49,-76, 
  /* [46][0][][] */ 52,-43,8,127,52,74,39,85, 
  /* [47][0][][] */ -123,-95,50,64,-127,27,109,-67, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0036074651870876551, 0.0034428862854838371, 0.00069625384639948606, 0.0021968591026961803, 0.0032270182855427265, 0.0036645079962909222, 0.0029419467318803072, 0.00031116639729589224, 0.0024325982667505741, 0.0050337957218289375, 0.0011667809449136257, 0.0034428779035806656, 3.3271189749939367e-05, 0.0031827480997890234, 0.0022704761940985918, 0.0009880143916234374, 0.0038648080080747604, 0.002850026823580265, 0.0072938236407935619, 0.004426855593919754, 0.0036692754365503788, 0.0023956478107720613, 0.0051693897694349289, 0.0017264263005927205, 0.00247160904109478, 0.0036534804385155439, 0.00038469154969789088, 0.0052737188525497913, 0.0026127374731004238, 0.0016087464755401015, 0.0044578788802027702, 0.00424549775198102, 0.0032183725852519274, 0.0027937300037592649, 0.0049093542620539665, 0.0062535787001252174, 0.0027972613461315632, 0.0039572636596858501, 0.0021896276157349348, 0.0026141558773815632, 0.0023877986241132021, 0.0033477167598903179, 0.0024784465786069632, 0.0053014042787253857, 0.0016317086992785335, 0.0012950703967362642, 0.0033532192464917898, 0.0025445460341870785, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { 6073, 16901, -5689, 7577, -3275, 396, -12968, -18851, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00012931713717989624, 0.00012261960364412516, 0.00012561192852444947, 7.3850904300343245e-05, 0.00016602122923359275, 0.00011742489004973322, 0.00012579539907164872, 0.00010819883755175397, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ -44,8,33,21,-29,-7,13,2,-58,1,-68,-50,-24,-66,-2,-27,36,-50,50,54,-4,31,-44,22,7,-24,58,-23,-6,-21,10,8,106,35,27,-127,22,-24,5,-38,17,-10,46,48,33,-15,32,-1, 
  /* [1][0][][] */ 7,41,34,-22,-18,35,-57,-34,5,50,-13,-96,8,105,-30,45,-41,18,-8,-53,27,-56,-39,27,-31,-5,7,-113,-63,-18,28,-58,67,74,-31,-8,127,-59,-8,71,-29,73,-72,-43,113,-29,-31,-21, 
  /* [2][0][][] */ -6,-36,-55,18,-13,64,23,0,-35,35,11,21,81,-94,11,-58,50,-84,15,25,-10,38,5,54,-44,48,-7,-63,1,-28,24,-63,-44,-94,66,-19,118,27,-17,-70,14,38,106,30,127,22,25,47, 
  /* [3][0][][] */ 13,49,-68,71,19,-11,-64,-126,11,-49,-46,7,24,23,32,98,-17,14,-41,42,1,-123,24,-54,-84,0,127,-30,-48,-4,-54,17,4,-68,9,2,-12,-77,-16,86,-53,-40,-7,36,40,6,-31,61, 
  /* [4][0][][] */ -40,-69,-11,18,22,-33,-10,2,41,-5,67,-64,3,22,11,9,2,-26,-9,-18,-4,-41,-22,-14,11,-7,31,21,40,15,-28,17,-14,-23,14,-6,-58,92,42,-25,44,-24,-12,-9,-71,21,127,15, 
  /* [5][0][][] */ 38,-46,6,25,37,-33,34,-127,30,-20,-7,111,-56,65,16,-47,-5,-84,9,3,-26,44,-32,-59,-67,80,-25,-6,-11,46,-56,-38,21,41,49,18,-23,-4,-51,-56,17,-48,-46,22,-4,56,98,38, 
  /* [6][0][][] */ 82,-25,43,-9,-29,-21,-49,7,-41,9,-31,127,-48,-30,-4,90,-2,29,8,45,59,-115,5,25,31,45,-69,-11,24,-59,2,54,53,39,-9,6,24,-18,-26,-16,-33,-16,41,75,6,-38,85,-15, 
  /* [7][0][][] */ -43,-35,-7,71,39,15,23,23,18,2,61,8,117,81,64,44,34,47,-7,-3,12,-12,-72,10,-15,-4,-26,66,29,-8,-34,-19,-14,2,35,-78,-57,77,46,35,-19,20,73,127,-36,-39,-78,61, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.005495978519320488, 0.0052113332785665989, 0.0053385067731142044, 0.0031386634800583124, 0.0070559023879468441, 0.004990557674318552, 0.0053463042713701725, 0.004598450381308794, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 10135, 7458, 3543, -4455, 5178, 9361, 1637, 30890, 5044, 906, 4585, 45847, 1972, 329, 1620, 9344, -3409, 15637, -2251, 9636, 10289, -195, -526, -9246, 8198, 2797, 5903, 15995, 2538, -5082, -15169, 7911, 10414, 6649, -1457, 6501, -14821, 4575, 4126, 15286, -30, 3649, 5550, 1338, 2432, -2425, 2264, -5649, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.00011872703180415556, 0.00011178945715073496, 0.00014280073810368776, 0.00014412762538995594, 0.00033811063622124493, 0.00019934045849367976, 5.705911826225929e-05, 0.00010068343544844538, 0.00020991748897358775, 7.6983873441349715e-05, 9.3739385192748159e-05, 6.6259664890822023e-05, 8.9020839368458837e-05, 5.7564036978874356e-05, 0.00023053264885675162, 0.00015007184993010014, 8.1189202319364995e-05, 0.00037634189357049763, 0.00012419835547916591, 0.00013419687456917018, 5.1636470743687823e-05, 0.00020335179578978568, 0.0001068429191946052, 0.00025724843726493418, 0.00014022509276401252, 7.0635687734466046e-05, 7.1797549026086926e-05, 9.5893003162927926e-05, 0.00015753733168821782, 0.00049500714521855116, 0.00019169213192071766, 0.00011180899309692904, 0.00010436815500725061, 0.0001043423471855931, 0.00026555312797427177, 5.7825731346383691e-05, 5.760649946751073e-05, 6.789808685425669e-05, 0.00010470889537828043, 8.6417181591968983e-05, 0.00016945067909546196, 0.00011038000229746103, 6.6689201048575342e-05, 0.00016509852139279246, 6.3478357333224267e-05, 0.00029019537032581866, 7.3568015068303794e-05, 9.7415599157102406e-05, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -49,2,-16,32,127,-98,127,-70,-81,-83,9,-29,127,67,58,-127,36,-12,8,-62,-127,127,80,127,-67,79,-4,-46,36,-39,49,-56,-98,-105,57,30,-22,59,88,-47,-127,-35,95,80,33,-89,83,103, -39,-18,-77,55,-70,63,64,-46,-82,29,85,-32,77,68,96,-104,-97,-80,47,-58,-97,75,119,83,-41,52,38,-127,80,-29,16,-69,-75,-119,80,50,127,62,107,-44,-100,-90,13,95,95,127,127,106, 73,-99,-71,127,-88,-46,46,14,28,51,25,-9,42,64,-68,-62,-86,-24,43,-39,-94,-32,-65,-66,-95,16,-37,-50,19,47,49,-39,-64,-38,-2,7,92,61,24,-18,-33,127,56,72,33,33,46,-29, 
  /* [0][1][][] */ -95,-91,4,-11,-105,-127,102,-127,-89,-127,127,-107,104,127,-126,-41,127,-96,-40,-117,-67,115,-71,119,-16,91,72,-35,-109,-45,26,-13,-95,-127,-127,22,52,127,-10,-78,48,-78,52,127,58,94,115,-13, -127,-66,-127,-36,-48,95,103,-59,48,37,76,-127,85,72,16,-45,82,-127,-124,-101,-114,66,-34,23,-113,127,127,-100,-127,127,4,-127,-127,-112,64,127,120,125,-18,-127,98,-95,79,122,127,-24,110,127, 10,-50,-94,102,22,-49,46,-45,45,23,-23,-29,18,69,67,-8,-7,-1,-9,-95,-103,84,-68,-123,-127,42,9,-87,-56,54,123,-31,-106,0,65,70,95,89,-31,-32,61,105,127,49,60,-76,32,91, 
  /* [0][2][][] */ -123,-22,29,16,-43,-85,5,-69,35,-71,28,-50,3,48,-54,1,-60,-25,127,-45,-24,-28,-40,37,20,18,66,-28,36,71,34,-18,-16,-93,-44,67,54,48,-84,-17,13,-45,52,40,38,63,-39,15, -61,-127,-72,-48,77,-4,18,-20,12,48,-42,-58,-40,44,-127,-27,54,-8,55,-104,-82,-4,-127,99,-60,46,61,-49,40,8,-38,3,-71,-22,-77,84,97,78,-127,-36,39,-44,53,60,36,-91,3,55, 9,-125,-8,-12,-40,-33,5,-55,-127,4,-2,-2,0,2,-21,25,68,16,12,-127,-70,-55,-125,-76,-45,23,32,17,14,-59,127,7,-61,51,13,43,-9,60,-66,-12,-6,58,14,41,19,6,1,80, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.005045898724347353, 0.0047510517761111259, 0.0060690310783684254, 0.0061254240572452545, 0.014369701966643333, 0.0084719695150852203, 0.0024250124115496874, 0.0042790458537638187, 0.0089214928448200226, 0.0032718146685510874, 0.0039839236997067928, 0.002816035645082593, 0.0037833855021744967, 0.0024464714806526899, 0.0097976373508572578, 0.0063780536875128746, 0.0034505410585552454, 0.01599453017115593, 0.0052784299477934837, 0.0057033668272197247, 0.0021945498883724213, 0.0086424509063363075, 0.0045408238656818867, 0.010933058336377144, 0.0059595662169158459, 0.0030020165722817183, 0.0030513957608491182, 0.0040754526853561401, 0.0066953366622328758, 0.02103780210018158, 0.0081469155848026276, 0.0047518820501863956, 0.0044356463477015495, 0.0044345497153699398, 0.011286007240414619, 0.0024575935676693916, 0.0024482761509716511, 0.0028856685385107994, 0.0044501279480755329, 0.0036727301776409149, 0.0072016534395515919, 0.004691150039434433, 0.0028342909645289183, 0.0070166871882975101, 0.0026978300884366035, 0.01233330275863409, 0.0031266405712813139, 0.0041401628404855728, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 574, -733, -217, -47, 7094, 5624, -393, 5274, 1666, 1070, 119, 5239, 748, 172, -566, 787, 1662, 14910, 2615, -790, 845, -630, -60, 6007, -1186, -673, 1791, 303, 3257, 10173, 2758, -15, 630, 194, 5467, 9, -101, -737, 1182, 1183, 3723, 3363, 389, -1454, -49, 2602, 1141, -348, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00074211374158039689, 0.00031846901401877403, 0.00048090034397318959, 0.00050386739894747734, 0.0001174883873318322, 0.00017771581769920886, 0.0004567892465274781, 0.00017365525127388537, 0.00034173775929957628, 0.00063173362286761403, 0.00046444981126114726, 0.00018333157640881836, 0.00034077712916769087, 0.00056128203868865967, 0.00048790237633511424, 0.00025154315517283976, 0.00027050758944824338, 6.7005625169258565e-05, 0.00025389663642272353, 0.00036790332524105906, 0.00033140278537757695, 0.00022353457461576909, 0.00059280660934746265, 0.00016849230451043695, 0.00035933713661506772, 0.00065845961216837168, 0.00028997610206715763, 0.00060374377062544227, 0.00024353949993383139, 7.8467885032296181e-05, 0.00026725034695118666, 0.00045839391532354057, 0.00044114002957940102, 0.00048908614553511143, 0.00017641537124291062, 0.00042085436871275306, 0.00043410761281847954, 0.00050664105219766498, 0.00041112801409326494, 0.00050202943384647369, 0.00019058793259318918, 0.00026673838146962225, 0.00032099365489557385, 0.00033286100369878113, 0.00049033062532544136, 0.00022113168961368501, 0.00030477452673949301, 0.0004478977934923023, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -13,4,16,-5,-68,-13,-127,-7, 
  /* [1][0][][] */ 82,-127,-55,-11,112,-111,42,6, 
  /* [2][0][][] */ -99,88,-67,-127,44,-7,-49,58, 
  /* [3][0][][] */ 37,1,25,-29,96,106,127,69, 
  /* [4][0][][] */ -81,-127,79,-14,-79,-120,64,-107, 
  /* [5][0][][] */ 127,-54,46,75,-122,-15,44,23, 
  /* [6][0][][] */ 16,40,127,-45,61,-35,-58,17, 
  /* [7][0][][] */ 60,17,-112,-12,-19,127,116,-52, 
  /* [8][0][][] */ 23,42,17,-1,15,127,83,17, 
  /* [9][0][][] */ -80,127,-111,69,14,-100,37,70, 
  /* [10][0][][] */ -9,-68,7,-41,-12,-127,-85,-70, 
  /* [11][0][][] */ -127,-81,95,36,-43,-60,84,45, 
  /* [12][0][][] */ -51,32,-127,47,38,-26,-66,112, 
  /* [13][0][][] */ 127,-122,89,92,19,40,48,-62, 
  /* [14][0][][] */ 20,22,18,-127,15,-42,-21,-32, 
  /* [15][0][][] */ 57,127,41,-43,61,-78,97,-127, 
  /* [16][0][][] */ -114,-127,-20,68,-51,-8,-57,74, 
  /* [17][0][][] */ -27,-97,-127,86,-49,83,-89,116, 
  /* [18][0][][] */ -124,-42,-83,127,-36,52,8,67, 
  /* [19][0][][] */ 78,-106,85,-127,33,-82,42,-10, 
  /* [20][0][][] */ 45,127,52,19,77,82,39,-28, 
  /* [21][0][][] */ 10,113,40,-37,33,-72,74,-127, 
  /* [22][0][][] */ 21,-24,49,8,-45,127,31,-75, 
  /* [23][0][][] */ -104,-93,32,-117,62,71,-45,-127, 
  /* [24][0][][] */ -68,-47,54,-63,127,89,-39,-72, 
  /* [25][0][][] */ 127,10,-71,-4,20,41,-57,-21, 
  /* [26][0][][] */ -121,-35,-127,-43,-46,-16,16,5, 
  /* [27][0][][] */ 93,50,17,-81,-125,-17,127,111, 
  /* [28][0][][] */ -50,-96,-11,11,21,-127,44,-11, 
  /* [29][0][][] */ 44,127,83,-112,21,47,-76,-96, 
  /* [30][0][][] */ -119,-70,15,-122,49,77,-14,-127, 
  /* [31][0][][] */ 75,50,27,127,28,-90,-19,-2, 
  /* [32][0][][] */ -45,127,-2,11,5,56,-23,-10, 
  /* [33][0][][] */ -8,127,-52,13,49,-39,-63,-24, 
  /* [34][0][][] */ -124,-65,-54,103,3,0,8,127, 
  /* [35][0][][] */ -61,127,-25,0,82,101,65,57, 
  /* [36][0][][] */ 66,122,-22,-29,-99,-107,107,127, 
  /* [37][0][][] */ -48,98,3,15,-120,77,-9,-127, 
  /* [38][0][][] */ 41,19,61,-21,127,63,105,46, 
  /* [39][0][][] */ -18,-61,25,-20,12,47,-94,127, 
  /* [40][0][][] */ -87,-127,-82,65,-15,-25,15,106, 
  /* [41][0][][] */ 64,17,24,127,-57,-22,-8,-47, 
  /* [42][0][][] */ -60,0,-107,-127,63,-113,12,123, 
  /* [43][0][][] */ 16,16,72,-16,60,127,99,13, 
  /* [44][0][][] */ -19,-17,-52,127,32,-3,-27,-23, 
  /* [45][0][][] */ 98,51,49,-127,115,-72,34,-68, 
  /* [46][0][][] */ -31,-127,-33,5,-22,12,-51,88, 
  /* [47][0][][] */ 14,29,79,-9,127,113,57,28, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0075500467792153358, 0.0032400100026279688, 0.0048925383016467094, 0.0051261987537145615, 0.0011952922213822603, 0.0018080284353345633, 0.0046472391113638878, 0.001766717410646379, 0.0034767393954098225, 0.0064270715229213238, 0.0047251754440367222, 0.0018651614664122462, 0.0034669660963118076, 0.0057103182189166546, 0.0049637751653790474, 0.0025591258890926838, 0.0027520644944161177, 0.00068169552832841873, 0.0025830697268247604, 0.0037429400254040956, 0.0033715942408889532, 0.0022741749417036772, 0.0060310396365821362, 0.0017141910502687097, 0.0036557901185005903, 0.0066989739425480366, 0.0029501314274966717, 0.0061423112638294697, 0.0024776991922408342, 0.00079830916365608573, 0.0027189261745661497, 0.0046635647304356098, 0.0044880285859107971, 0.0049758185632526875, 0.0017947979504242539, 0.0042816484346985817, 0.0044164829887449741, 0.0051544168964028358, 0.0041826954111456871, 0.0051074996590614319, 0.001938985544256866, 0.0027137177530676126, 0.0032656949479132891, 0.0033864297438412905, 0.0049884794279932976, 0.0022497286554425955, 0.0031006862409412861, 0.0045567802153527737, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { -5174, 294, 9934, -12251, 21827, 6700, -3299, 9612, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 0.000204709023819305, 0.00022560442448593676, 0.00020602336735464633, 0.00026882821111939847, 0.00018112050020135939, 0.00023059510567691177, 0.00015035804244689643, 0.0002592090459074825, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*16] = { 
  /* [0][0][][] */ -19,-13,-20,-73,-22,-29,17,-30,52,22,-38,-11,106,127,-38,-109, 
  /* [1][0][][] */ 127,-72,-42,29,-52,80,-79,-56,-40,88,-61,-57,-25,10,-48,-49, 
  /* [2][0][][] */ -23,-93,31,39,35,-53,-51,-14,14,-77,12,-127,31,-13,-59,4, 
  /* [3][0][][] */ 40,12,6,30,-19,49,-41,-1,127,47,4,11,14,-27,8,29, 
  /* [4][0][][] */ -98,-33,-13,-127,0,26,64,-92,22,-26,-30,-28,-101,34,-21,2, 
  /* [5][0][][] */ 87,48,47,-49,42,-52,-113,-127,-19,-62,64,47,-47,31,50,-47, 
  /* [6][0][][] */ 96,30,-127,-87,5,-54,10,-94,-56,39,-92,50,70,-105,0,51, 
  /* [7][0][][] */ -127,-5,92,-35,-39,-1,-15,-48,-41,61,89,-28,53,-22,27,29, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,16 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0087001333013176918, 0.0095881875604391098, 0.0087559930980205536, 0.01142519898712635, 0.0076976213604211807, 0.009800291620194912, 0.0063902167603373528, 0.011016384698450565, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[16] = { 9365, 641, 597, 6485, -4866, 1319, 5377, 2176, 846, 1189, -1544, 1828, 13743, -2118, -359, -310, };
const TfArray<1, int> tensor_dimension40 = { 1, { 16 } };
const TfArray<16, float> quant40_scale = { 16, { 0.00020758654864039272, 0.00022875711147207767, 0.00014191279478836805, 0.00013609997404273599, 0.00057308992836624384, 0.00062199786771088839, 0.00020541514095384628, 0.00056810496607795358, 0.00048842100659385324, 0.0010528259444981813, 0.00027549313381314278, 0.00022762148000765592, 7.2916707722470164e-05, 0.00013697771646548063, 0.00018869827908929437, 0.00077768234768882394, } };
const TfArray<16, int> quant40_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*16] = { 
  /* [0][0][][] */ 28,-13,-4,3,-14,7,20,10,-3,-10,1,3,-10,6,-11,0, 33,-24,0,-4,18,-3,17,-28,-18,8,0,85,-8,27,7,-2, 19,-8,-12,-15,8,-16,-17,5,-18,-3,10,3,-1,3,-5,-6, 
  /* [0][1][][] */ 17,-14,-17,7,127,-30,-127,-22,127,127,7,-5,109,-15,9,-19, -127,127,127,8,-71,-99,-1,-100,23,-108,127,127,127,127,127,127, 38,-1,-16,6,1,127,30,-11,-26,-17,-10,-29,-3,2,-3,-12, 
  /* [0][2][][] */ -6,-3,-8,-45,-6,12,59,7,-18,-10,-17,-5,-2,5,-6,-17, 19,-26,-13,-127,16,-22,3,127,-14,0,-14,-22,-30,-52,-6,-37, -11,-22,-13,-31,12,-11,1,-2,-22,-1,-13,-30,3,0,-10,-17, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,16 } };
const TfArray<16, float> quant41_scale = { 16, { 0.0088224280625581741, 0.0097221769392490387, 0.0060312934219837189, 0.0057842489331960678, 0.02435632050037384, 0.026434909552335739, 0.0087301433086395264, 0.024144461378455162, 0.020757891237735748, 0.044745102524757385, 0.011708457954227924, 0.0096739130094647408, 0.0030989600345492363, 0.0058215525932610035, 0.0080196764320135117, 0.033051498234272003, } };
const TfArray<16, int> quant41_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[16] = { 6166, 581, -1726, 2733, 64638, 49620, 7191, 948, 11087, 7951, 4734, 2373, 6247, -7477, 3558, 22209, };
const TfArray<1, int> tensor_dimension42 = { 1, { 16 } };
const TfArray<16, float> quant42_scale = { 16, { 0.0001646662421990186, 0.0010622679255902767, 0.0002745618112385273, 0.00011592092050705105, 2.330906136194244e-05, 3.6191737308399752e-05, 0.00010694652883103117, 4.7742993046995252e-05, 9.9701173894573003e-05, 3.5542041587177664e-05, 0.00033166812499985099, 0.00052558665629476309, 0.0003705803828779608, 2.0589555788319558e-05, 0.00034497366868890822, 7.2877075581345707e-05, } };
const TfArray<16, int> quant42_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[16*3*3*1] = { 
  /* [0][0][][] */ -93, -115, -38, 
  /* [0][1][][] */ 62, -39, 11, 
  /* [0][2][][] */ 30, 127, 11, 
  /* [1][0][][] */ 103, -97, -12, 
  /* [1][1][][] */ -127, 102, 24, 
  /* [1][2][][] */ 15, -1, -10, 
  /* [2][0][][] */ -24, -2, -45, 
  /* [2][1][][] */ 35, 95, 127, 
  /* [2][2][][] */ -10, -89, -74, 
  /* [3][0][][] */ 118, 123, 57, 
  /* [3][1][][] */ 1, -22, -15, 
  /* [3][2][][] */ -101, -127, -45, 
  /* [4][0][][] */ 18, -46, 3, 
  /* [4][1][][] */ 18, -127, -7, 
  /* [4][2][][] */ 17, -74, -17, 
  /* [5][0][][] */ -38, 40, -51, 
  /* [5][1][][] */ -127, 34, -48, 
  /* [5][2][][] */ -95, 13, -44, 
  /* [6][0][][] */ -19, 78, 127, 
  /* [6][1][][] */ -46, 55, -19, 
  /* [6][2][][] */ -31, -56, -96, 
  /* [7][0][][] */ 32, 9, -12, 
  /* [7][1][][] */ 127, 43, 3, 
  /* [7][2][][] */ 10, -5, -10, 
  /* [8][0][][] */ -21, -30, 52, 
  /* [8][1][][] */ -54, -85, 127, 
  /* [8][2][][] */ -23, -57, 98, 
  /* [9][0][][] */ -15, 67, 14, 
  /* [9][1][][] */ -20, 127, 18, 
  /* [9][2][][] */ -19, 47, -1, 
  /* [10][0][][] */ 18, 79, 6, 
  /* [10][1][][] */ -40, -127, -33, 
  /* [10][2][][] */ 9, 37, 14, 
  /* [11][0][][] */ 5, -22, 7, 
  /* [11][1][][] */ 63, -98, 33, 
  /* [11][2][][] */ -89, 127, -49, 
  /* [12][0][][] */ -43, 44, -13, 
  /* [12][1][][] */ -127, 107, 3, 
  /* [12][2][][] */ -78, 74, 2, 
  /* [13][0][][] */ 59, 9, 11, 
  /* [13][1][][] */ 127, 79, 27, 
  /* [13][2][][] */ 80, 96, 39, 
  /* [14][0][][] */ -33, -31, 42, 
  /* [14][1][][] */ 39, 91, -127, 
  /* [14][2][][] */ -18, -71, 75, 
  /* [15][0][][] */ -36, 21, 55, 
  /* [15][1][][] */ -127, -106, -12, 
  /* [15][2][][] */ -31, -52, -19, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant43_scale = { 16, { 0.041989888995885849, 0.27087831497192383, 0.070013254880905151, 0.029559832066297531, 0.0059438101015985012, 0.0092288926243782043, 0.027271363884210587, 0.012174462899565697, 0.025423798710107803, 0.0090632196515798569, 0.084575369954109192, 0.13402459025382996, 0.094497993588447571, 0.0052503366023302078, 0.087968282401561737, 0.018583653494715691, } };
const TfArray<16, int> quant43_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,48,48,16 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,48,48,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.098292604088783264, } };
const TfArray<1, int> quant46_zero = { 1, { 8 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,48,48,48 } };
const TfArray<1, float> quant47_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant47_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,49,49,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant50_scale = { 1, { 0.071658194065093994, } };
const TfArray<1, int> quant50_zero = { 1, { -31 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant53_scale = { 1, { 0.06352679431438446, } };
const TfArray<1, int> quant53_zero = { 1, { -12 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.089730493724346161, } };
const TfArray<1, int> quant54_zero = { 1, { -24 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant55_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant55_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant58_scale = { 1, { 0.050179284065961838, } };
const TfArray<1, int> quant58_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant59_scale = { 1, { 0.02228519506752491, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant60_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant61_scale = { 1, { 0.044573593884706497, } };
const TfArray<1, int> quant61_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant62_scale = { 1, { 0.070455662906169891, } };
const TfArray<1, int> quant62_zero = { 1, { -22 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant63_scale = { 1, { 0.023483699187636375, } };
const TfArray<1, int> quant63_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant64_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant65_scale = { 1, { 0.054815724492073059, } };
const TfArray<1, int> quant65_zero = { 1, { 16 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,12,12,16 } };
const TfArray<1, float> quant66_scale = { 1, { 0.091099940240383148, } };
const TfArray<1, int> quant66_zero = { 1, { 5 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,12,12,96 } };
const TfArray<1, float> quant67_scale = { 1, { 0.023054037243127823, } };
const TfArray<1, int> quant67_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,12,12,32 } };
const TfArray<1, float> quant68_scale = { 1, { 0.054175198078155518, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant69_scale = { 1, { 0.16618870198726654, } };
const TfArray<1, int> quant69_zero = { 1, { -15 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,12,12,2 } };
const TfArray<1, float> quant70_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteConvParams opdata3 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs3 = { 3, { 46,37,36 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfArray<2, int> inputs4 = { 2, { 47,1 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfLiteDepthwiseConvParams opdata5 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 48,35,34 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteConvParams opdata6 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,33,32 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,31,30 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteDepthwiseConvParams opdata8 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,29,28 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteConvParams opdata9 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,27,26 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteAddParams opdata10 = { kTfLiteActNone };
const TfArray<2, int> inputs10 = { 2, { 50,53 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteConvParams opdata11 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs11 = { 3, { 54,25,24 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfArray<2, int> inputs12 = { 2, { 55,1 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfLiteDepthwiseConvParams opdata13 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 56,23,22 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteConvParams opdata14 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,21,20 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,19,18 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteDepthwiseConvParams opdata16 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,17,16 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteConvParams opdata17 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,15,14 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteAddParams opdata18 = { kTfLiteActNone };
const TfArray<2, int> inputs18 = { 2, { 58,61 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteConvParams opdata19 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs19 = { 3, { 62,13,12 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteDepthwiseConvParams opdata20 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,11,10 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteConvParams opdata21 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,9,8 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteAddParams opdata22 = { kTfLiteActNone };
const TfArray<2, int> inputs22 = { 2, { 62,65 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteConvParams opdata23 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs23 = { 3, { 66,7,6 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,5,4 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,3,2 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteSoftmaxParams opdata26 = { 1 };
const TfArray<1, int> inputs26 = { 1, { 69 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 9216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension44, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 36864, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36864), (TfLiteIntArray*)&g0::tensor_dimension46, 18432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension47, 110592, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 115248, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 115248), (TfLiteIntArray*)&g0::tensor_dimension49, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 55296), (TfLiteIntArray*)&g0::tensor_dimension50, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension51, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension52, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension53, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension55, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension57, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 36912), (TfLiteIntArray*)&g0::tensor_dimension58, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension59, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension60, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension61, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 27648), (TfLiteIntArray*)&g0::tensor_dimension62, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension63, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension64, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16128), (TfLiteIntArray*)&g0::tensor_dimension65, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension66, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension67, 13824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension68, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 288), (TfLiteIntArray*)&g0::tensor_dimension69, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension70, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[27] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata13)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 71, };
const size_t tflNodes_subgraph_index[] = {0, 27, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  70, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 71;
  for (size_t i = 0; i < 71; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 27; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
